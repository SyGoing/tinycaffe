// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe {

namespace {

const ::google::protobuf::Descriptor* BlobShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProtoVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProtoVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Datum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datum_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SolverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetStateRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetStateRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamSpec_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccuracyParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccuracyParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArgMaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArgMaxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcatParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcatParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchNormParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchNormParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BatchNormParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BiasParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiasParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContrastiveLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContrastiveLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvolutionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CropParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DropoutParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropoutParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EltwiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EltwiseParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ELUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ELUParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmbedParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmbedParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlattenParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlattenParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HDF5DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDF5DataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HDF5OutputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDF5OutputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HingeLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HingeLossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfogainLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfogainLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerProductParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerDistanceParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerDistanceParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LRNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LRNParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemoryDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVNParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolingParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PowerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PythonParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PythonParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecurrentParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecurrentParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReductionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReductionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReLUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReLUParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReshapeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReshapeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScaleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScaleParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigmoidParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigmoidParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SliceParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SliceParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftmaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftmaxParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TanHParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TanHParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TileParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThresholdParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThresholdParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MILParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MILParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MILParameter_MILType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WindowDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WindowDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MILDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MILDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPPParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPPParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* V1LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  V1LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* V0LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  V0LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TripletLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripletLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROIPoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROIPoolingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsanityParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsanityParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PReLUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PReLUParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BNParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BNParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LocalParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EltwiseAffineParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EltwiseAffineParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubRegionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubRegionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoiseParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotspotParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotspotParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredictBoxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredictBoxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FCNDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FCNDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlipParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlipParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalizeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalizeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralContrastiveParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralContrastiveParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchContrastiveParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchContrastiveParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftContrastiveParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftContrastiveParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralTripletParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralTripletParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftTruncationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftTruncationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProposalParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProposalParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSROIPoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSROIPoolingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairwiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairwiseParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PairwiseParameter_PairwiseOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SmoothL1Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothL1Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PermuteParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PermuteParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* NCAParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NCAParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LargeMarginInnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LargeMarginInnerProductParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LargeMarginInnerProductParameter_LargeMarginType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LabelSpecificRescaleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSpecificRescaleParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfimumLossParamter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfimumLossParamter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrdinalRegressionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrdinalRegressionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResizeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResizeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarginInnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarginInnerProductParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarginInnerProductParameter_MarginType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeatureDecayLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureDecayLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfidencePenaltyLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfidencePenaltyLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FocalLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FocalLossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FocalLossParameter_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LabelSpecificMarginParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSpecificMarginParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LabelSpecificMarginParameter_MarginType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChannelScaleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelScaleParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelSpecificAffineParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSpecificAffineParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelSpecificHardMarginParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSpecificHardMarginParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelSpecificStatisticsParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSpecificStatisticsParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelSpecificAddParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSpecificAddParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Phase_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe_2eproto() {
  protobuf_AddDesc_caffe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe.proto");
  GOOGLE_CHECK(file != NULL);
  BlobShape_descriptor_ = file->message_type(0);
  static const int BlobShape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, dim_),
  };
  BlobShape_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobShape_descriptor_,
      BlobShape::default_instance_,
      BlobShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _has_bits_[0]),
      -1,
      -1,
      sizeof(BlobShape),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _internal_metadata_),
      -1);
  BlobProto_descriptor_ = file->message_type(1);
  static const int BlobProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
  };
  BlobProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobProto_descriptor_,
      BlobProto::default_instance_,
      BlobProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(BlobProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _internal_metadata_),
      -1);
  BlobProtoVector_descriptor_ = file->message_type(2);
  static const int BlobProtoVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, blobs_),
  };
  BlobProtoVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobProtoVector_descriptor_,
      BlobProtoVector::default_instance_,
      BlobProtoVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _has_bits_[0]),
      -1,
      -1,
      sizeof(BlobProtoVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _internal_metadata_),
      -1);
  Datum_descriptor_ = file->message_type(3);
  static const int Datum_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, encoded_),
  };
  Datum_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Datum_descriptor_,
      Datum::default_instance_,
      Datum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_[0]),
      -1,
      -1,
      sizeof(Datum),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _internal_metadata_),
      -1);
  FillerParameter_descriptor_ = file->message_type(4);
  static const int FillerParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, sparse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, variance_norm_),
  };
  FillerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FillerParameter_descriptor_,
      FillerParameter::default_instance_,
      FillerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(FillerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _internal_metadata_),
      -1);
  FillerParameter_VarianceNorm_descriptor_ = FillerParameter_descriptor_->enum_type(0);
  NetParameter_descriptor_ = file->message_type(5);
  static const int NetParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, force_backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layers_),
  };
  NetParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetParameter_descriptor_,
      NetParameter::default_instance_,
      NetParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _internal_metadata_),
      -1);
  SolverParameter_descriptor_ = file->message_type(6);
  static const int SolverParameter_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_compute_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_initialization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, base_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, average_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, iter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, lr_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, regularization_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clip_gradients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clamp_weights_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clamp_weights_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clip_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, rms_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_after_train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, layer_wise_reduce_),
  };
  SolverParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SolverParameter_descriptor_,
      SolverParameter::default_instance_,
      SolverParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SolverParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _internal_metadata_),
      -1);
  SolverParameter_SnapshotFormat_descriptor_ = SolverParameter_descriptor_->enum_type(0);
  SolverParameter_SolverMode_descriptor_ = SolverParameter_descriptor_->enum_type(1);
  SolverParameter_SolverType_descriptor_ = SolverParameter_descriptor_->enum_type(2);
  SolverState_descriptor_ = file->message_type(7);
  static const int SolverState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, current_step_),
  };
  SolverState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SolverState_descriptor_,
      SolverState::default_instance_,
      SolverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_[0]),
      -1,
      -1,
      sizeof(SolverState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _internal_metadata_),
      -1);
  NetState_descriptor_ = file->message_type(8);
  static const int NetState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, stage_),
  };
  NetState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetState_descriptor_,
      NetState::default_instance_,
      NetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _internal_metadata_),
      -1);
  NetStateRule_descriptor_ = file->message_type(9);
  static const int NetStateRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, not_stage_),
  };
  NetStateRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetStateRule_descriptor_,
      NetStateRule::default_instance_,
      NetStateRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetStateRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _internal_metadata_),
      -1);
  ParamSpec_descriptor_ = file->message_type(10);
  static const int ParamSpec_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, share_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
  };
  ParamSpec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParamSpec_descriptor_,
      ParamSpec::default_instance_,
      ParamSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _has_bits_[0]),
      -1,
      -1,
      sizeof(ParamSpec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _internal_metadata_),
      -1);
  ParamSpec_DimCheckMode_descriptor_ = ParamSpec_descriptor_->enum_type(0);
  LayerParameter_descriptor_ = file->message_type(11);
  static const int LayerParameter_offsets_[101] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, propagate_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exclude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, accuracy_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, argmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_norm_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bias_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dummy_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, elu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, embed_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flatten_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hinge_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, infogain_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, log_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, memory_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mvn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, parameter_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, prelu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, python_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, recurrent_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reduction_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reshape_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, scale_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, slice_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tanh_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, threshold_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tile_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, window_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, local_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, insanity_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, triplet_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, roi_pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_affine_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sub_region_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, noise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hotspot_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, predict_box_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mil_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mil_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, fcn_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, center_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flip_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_distance_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, normalize_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, general_contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, soft_contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, general_triplet_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, soft_truncation_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, proposal_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, psroi_pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pairwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smoothl1_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, permute_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, truncation_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, nca_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, largemargin_inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_specific_rescale_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, infimum_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, ordinal_regression_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, resize_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, margin_inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, feature_decay_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, confidence_penalty_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, focal_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_specific_margin_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, channel_scale_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_specific_affine_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_specific_hard_margin_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_specific_add_param_),
  };
  LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::default_instance_,
      LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _internal_metadata_),
      -1);
  TransformationParameter_descriptor_ = file->message_type(12);
  static const int TransformationParameter_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_gray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, center_crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, erase_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, scale_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, scale_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, aspect_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, aspect_max_),
  };
  TransformationParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformationParameter_descriptor_,
      TransformationParameter::default_instance_,
      TransformationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransformationParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _internal_metadata_),
      -1);
  LossParameter_descriptor_ = file->message_type(13);
  static const int LossParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, ignore_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalize_),
  };
  LossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LossParameter_descriptor_,
      LossParameter::default_instance_,
      LossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _internal_metadata_),
      -1);
  LossParameter_NormalizationMode_descriptor_ = LossParameter_descriptor_->enum_type(0);
  AccuracyParameter_descriptor_ = file->message_type(14);
  static const int AccuracyParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, top_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, ignore_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, min_is_better_),
  };
  AccuracyParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccuracyParameter_descriptor_,
      AccuracyParameter::default_instance_,
      AccuracyParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(AccuracyParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _internal_metadata_),
      -1);
  ArgMaxParameter_descriptor_ = file->message_type(15);
  static const int ArgMaxParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, out_max_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, top_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, axis_),
  };
  ArgMaxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArgMaxParameter_descriptor_,
      ArgMaxParameter::default_instance_,
      ArgMaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ArgMaxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _internal_metadata_),
      -1);
  ConcatParameter_descriptor_ = file->message_type(16);
  static const int ConcatParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, concat_dim_),
  };
  ConcatParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConcatParameter_descriptor_,
      ConcatParameter::default_instance_,
      ConcatParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConcatParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _internal_metadata_),
      -1);
  BatchNormParameter_descriptor_ = file->message_type(17);
  static const int BatchNormParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, use_global_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, moving_average_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, disable_mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, disable_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, scale_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, engine_),
  };
  BatchNormParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchNormParameter_descriptor_,
      BatchNormParameter::default_instance_,
      BatchNormParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(BatchNormParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _internal_metadata_),
      -1);
  BatchNormParameter_Engine_descriptor_ = BatchNormParameter_descriptor_->enum_type(0);
  BiasParameter_descriptor_ = file->message_type(18);
  static const int BiasParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, num_axes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, filler_),
  };
  BiasParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BiasParameter_descriptor_,
      BiasParameter::default_instance_,
      BiasParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(BiasParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _internal_metadata_),
      -1);
  ContrastiveLossParameter_descriptor_ = file->message_type(19);
  static const int ContrastiveLossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, legacy_version_),
  };
  ContrastiveLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContrastiveLossParameter_descriptor_,
      ContrastiveLossParameter::default_instance_,
      ContrastiveLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContrastiveLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _internal_metadata_),
      -1);
  ConvolutionParameter_descriptor_ = file->message_type(20);
  static const int ConvolutionParameter_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, dilation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, force_nd_im2col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, cudnn_convolution_algo_seeker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, shape_offset_),
  };
  ConvolutionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConvolutionParameter_descriptor_,
      ConvolutionParameter::default_instance_,
      ConvolutionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConvolutionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _internal_metadata_),
      -1);
  ConvolutionParameter_Engine_descriptor_ = ConvolutionParameter_descriptor_->enum_type(0);
  ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor_ = ConvolutionParameter_descriptor_->enum_type(1);
  CropParameter_descriptor_ = file->message_type(21);
  static const int CropParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, offset_),
  };
  CropParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CropParameter_descriptor_,
      CropParameter::default_instance_,
      CropParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(CropParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _internal_metadata_),
      -1);
  DataParameter_descriptor_ = file->message_type(22);
  static const int DataParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, backend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, force_encoded_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, prefetch_),
  };
  DataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataParameter_descriptor_,
      DataParameter::default_instance_,
      DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _internal_metadata_),
      -1);
  DataParameter_DB_descriptor_ = DataParameter_descriptor_->enum_type(0);
  DropoutParameter_descriptor_ = file->message_type(23);
  static const int DropoutParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, sqrt_scale_),
  };
  DropoutParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DropoutParameter_descriptor_,
      DropoutParameter::default_instance_,
      DropoutParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(DropoutParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _internal_metadata_),
      -1);
  DummyDataParameter_descriptor_ = file->message_type(24);
  static const int DummyDataParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, data_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, width_),
  };
  DummyDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DummyDataParameter_descriptor_,
      DummyDataParameter::default_instance_,
      DummyDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(DummyDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _internal_metadata_),
      -1);
  EltwiseParameter_descriptor_ = file->message_type(25);
  static const int EltwiseParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, stable_prod_grad_),
  };
  EltwiseParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EltwiseParameter_descriptor_,
      EltwiseParameter::default_instance_,
      EltwiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(EltwiseParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _internal_metadata_),
      -1);
  EltwiseParameter_EltwiseOp_descriptor_ = EltwiseParameter_descriptor_->enum_type(0);
  ELUParameter_descriptor_ = file->message_type(26);
  static const int ELUParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, alpha_),
  };
  ELUParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ELUParameter_descriptor_,
      ELUParameter::default_instance_,
      ELUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ELUParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _internal_metadata_),
      -1);
  EmbedParameter_descriptor_ = file->message_type(27);
  static const int EmbedParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_filler_),
  };
  EmbedParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmbedParameter_descriptor_,
      EmbedParameter::default_instance_,
      EmbedParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(EmbedParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _internal_metadata_),
      -1);
  ExpParameter_descriptor_ = file->message_type(28);
  static const int ExpParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, shift_),
  };
  ExpParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExpParameter_descriptor_,
      ExpParameter::default_instance_,
      ExpParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExpParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _internal_metadata_),
      -1);
  FlattenParameter_descriptor_ = file->message_type(29);
  static const int FlattenParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, end_axis_),
  };
  FlattenParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FlattenParameter_descriptor_,
      FlattenParameter::default_instance_,
      FlattenParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(FlattenParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _internal_metadata_),
      -1);
  HDF5DataParameter_descriptor_ = file->message_type(30);
  static const int HDF5DataParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, shuffle_),
  };
  HDF5DataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HDF5DataParameter_descriptor_,
      HDF5DataParameter::default_instance_,
      HDF5DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(HDF5DataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _internal_metadata_),
      -1);
  HDF5OutputParameter_descriptor_ = file->message_type(31);
  static const int HDF5OutputParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, file_name_),
  };
  HDF5OutputParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HDF5OutputParameter_descriptor_,
      HDF5OutputParameter::default_instance_,
      HDF5OutputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(HDF5OutputParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _internal_metadata_),
      -1);
  HingeLossParameter_descriptor_ = file->message_type(32);
  static const int HingeLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, norm_),
  };
  HingeLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HingeLossParameter_descriptor_,
      HingeLossParameter::default_instance_,
      HingeLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(HingeLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _internal_metadata_),
      -1);
  HingeLossParameter_Norm_descriptor_ = HingeLossParameter_descriptor_->enum_type(0);
  ImageDataParameter_descriptor_ = file->message_type(33);
  static const int ImageDataParameter_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, is_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, face_transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, max_shear_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, max_aspect_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, max_rotate_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, min_random_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, max_random_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, max_random_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, face_mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, face_point_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, root_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, balance_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, balance_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, label_cut_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, label_cut_end_),
  };
  ImageDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageDataParameter_descriptor_,
      ImageDataParameter::default_instance_,
      ImageDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _internal_metadata_),
      -1);
  InfogainLossParameter_descriptor_ = file->message_type(34);
  static const int InfogainLossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, axis_),
  };
  InfogainLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InfogainLossParameter_descriptor_,
      InfogainLossParameter::default_instance_,
      InfogainLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(InfogainLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _internal_metadata_),
      -1);
  InnerProductParameter_descriptor_ = file->message_type(35);
  static const int InnerProductParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, transpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, normalize_),
  };
  InnerProductParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnerProductParameter_descriptor_,
      InnerProductParameter::default_instance_,
      InnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnerProductParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _internal_metadata_),
      -1);
  InnerDistanceParameter_descriptor_ = file->message_type(36);
  static const int InnerDistanceParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, transpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, distance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, normalize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, update_center_only_),
  };
  InnerDistanceParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnerDistanceParameter_descriptor_,
      InnerDistanceParameter::default_instance_,
      InnerDistanceParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnerDistanceParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerDistanceParameter, _internal_metadata_),
      -1);
  InputParameter_descriptor_ = file->message_type(37);
  static const int InputParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, shape_),
  };
  InputParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputParameter_descriptor_,
      InputParameter::default_instance_,
      InputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(InputParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _internal_metadata_),
      -1);
  LogParameter_descriptor_ = file->message_type(38);
  static const int LogParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, shift_),
  };
  LogParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogParameter_descriptor_,
      LogParameter::default_instance_,
      LogParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _internal_metadata_),
      -1);
  LRNParameter_descriptor_ = file->message_type(39);
  static const int LRNParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, norm_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, engine_),
  };
  LRNParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LRNParameter_descriptor_,
      LRNParameter::default_instance_,
      LRNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LRNParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _internal_metadata_),
      -1);
  LRNParameter_NormRegion_descriptor_ = LRNParameter_descriptor_->enum_type(0);
  LRNParameter_Engine_descriptor_ = LRNParameter_descriptor_->enum_type(1);
  MemoryDataParameter_descriptor_ = file->message_type(40);
  static const int MemoryDataParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, transpose_),
  };
  MemoryDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryDataParameter_descriptor_,
      MemoryDataParameter::default_instance_,
      MemoryDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(MemoryDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _internal_metadata_),
      -1);
  MVNParameter_descriptor_ = file->message_type(41);
  static const int MVNParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, normalize_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, across_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, eps_),
  };
  MVNParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVNParameter_descriptor_,
      MVNParameter::default_instance_,
      MVNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVNParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _internal_metadata_),
      -1);
  ParameterParameter_descriptor_ = file->message_type(42);
  static const int ParameterParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, blob_filler_),
  };
  ParameterParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterParameter_descriptor_,
      ParameterParameter::default_instance_,
      ParameterParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ParameterParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, _internal_metadata_),
      -1);
  PoolingParameter_descriptor_ = file->message_type(43);
  static const int PoolingParameter_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, global_pooling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, blobs_a_min_),
  };
  PoolingParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoolingParameter_descriptor_,
      PoolingParameter::default_instance_,
      PoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PoolingParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _internal_metadata_),
      -1);
  PoolingParameter_PoolMethod_descriptor_ = PoolingParameter_descriptor_->enum_type(0);
  PoolingParameter_Engine_descriptor_ = PoolingParameter_descriptor_->enum_type(1);
  PowerParameter_descriptor_ = file->message_type(44);
  static const int PowerParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, shift_),
  };
  PowerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PowerParameter_descriptor_,
      PowerParameter::default_instance_,
      PowerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PowerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _internal_metadata_),
      -1);
  PythonParameter_descriptor_ = file->message_type(45);
  static const int PythonParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, param_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, share_in_parallel_),
  };
  PythonParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PythonParameter_descriptor_,
      PythonParameter::default_instance_,
      PythonParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PythonParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _internal_metadata_),
      -1);
  RecurrentParameter_descriptor_ = file->message_type(46);
  static const int RecurrentParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, expose_hidden_),
  };
  RecurrentParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecurrentParameter_descriptor_,
      RecurrentParameter::default_instance_,
      RecurrentParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(RecurrentParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, _internal_metadata_),
      -1);
  ReductionParameter_descriptor_ = file->message_type(47);
  static const int ReductionParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, coeff_),
  };
  ReductionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReductionParameter_descriptor_,
      ReductionParameter::default_instance_,
      ReductionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReductionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _internal_metadata_),
      -1);
  ReductionParameter_ReductionOp_descriptor_ = ReductionParameter_descriptor_->enum_type(0);
  ReLUParameter_descriptor_ = file->message_type(48);
  static const int ReLUParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, negative_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, engine_),
  };
  ReLUParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReLUParameter_descriptor_,
      ReLUParameter::default_instance_,
      ReLUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReLUParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _internal_metadata_),
      -1);
  ReLUParameter_Engine_descriptor_ = ReLUParameter_descriptor_->enum_type(0);
  ReshapeParameter_descriptor_ = file->message_type(49);
  static const int ReshapeParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, num_axes_),
  };
  ReshapeParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReshapeParameter_descriptor_,
      ReshapeParameter::default_instance_,
      ReshapeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReshapeParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _internal_metadata_),
      -1);
  ScaleParameter_descriptor_ = file->message_type(50);
  static const int ScaleParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, num_axes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, min_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, max_value_),
  };
  ScaleParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScaleParameter_descriptor_,
      ScaleParameter::default_instance_,
      ScaleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScaleParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _internal_metadata_),
      -1);
  SigmoidParameter_descriptor_ = file->message_type(51);
  static const int SigmoidParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, engine_),
  };
  SigmoidParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SigmoidParameter_descriptor_,
      SigmoidParameter::default_instance_,
      SigmoidParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SigmoidParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _internal_metadata_),
      -1);
  SigmoidParameter_Engine_descriptor_ = SigmoidParameter_descriptor_->enum_type(0);
  SliceParameter_descriptor_ = file->message_type(52);
  static const int SliceParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_dim_),
  };
  SliceParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SliceParameter_descriptor_,
      SliceParameter::default_instance_,
      SliceParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SliceParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _internal_metadata_),
      -1);
  SoftmaxParameter_descriptor_ = file->message_type(53);
  static const int SoftmaxParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, hard_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, class_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, hard_mining_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, cutting_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, normalize_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, label_smooth_factor_),
  };
  SoftmaxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftmaxParameter_descriptor_,
      SoftmaxParameter::default_instance_,
      SoftmaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SoftmaxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _internal_metadata_),
      -1);
  SoftmaxParameter_Engine_descriptor_ = SoftmaxParameter_descriptor_->enum_type(0);
  TanHParameter_descriptor_ = file->message_type(54);
  static const int TanHParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, engine_),
  };
  TanHParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TanHParameter_descriptor_,
      TanHParameter::default_instance_,
      TanHParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(TanHParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _internal_metadata_),
      -1);
  TanHParameter_Engine_descriptor_ = TanHParameter_descriptor_->enum_type(0);
  TileParameter_descriptor_ = file->message_type(55);
  static const int TileParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, tiles_),
  };
  TileParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TileParameter_descriptor_,
      TileParameter::default_instance_,
      TileParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(TileParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _internal_metadata_),
      -1);
  ThresholdParameter_descriptor_ = file->message_type(56);
  static const int ThresholdParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, threshold_),
  };
  ThresholdParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ThresholdParameter_descriptor_,
      ThresholdParameter::default_instance_,
      ThresholdParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ThresholdParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _internal_metadata_),
      -1);
  MILParameter_descriptor_ = file->message_type(57);
  static const int MILParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILParameter, type_),
  };
  MILParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MILParameter_descriptor_,
      MILParameter::default_instance_,
      MILParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(MILParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILParameter, _internal_metadata_),
      -1);
  MILParameter_MILType_descriptor_ = MILParameter_descriptor_->enum_type(0);
  WindowDataParameter_descriptor_ = file->message_type(58);
  static const int WindowDataParameter_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, bg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, context_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, cache_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, root_folder_),
  };
  WindowDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WindowDataParameter_descriptor_,
      WindowDataParameter::default_instance_,
      WindowDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(WindowDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _internal_metadata_),
      -1);
  MILDataParameter_descriptor_ = file->message_type(59);
  static const int MILDataParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, num_scales_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, images_per_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, n_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, label_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, root_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, randomize_),
  };
  MILDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MILDataParameter_descriptor_,
      MILDataParameter::default_instance_,
      MILDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(MILDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MILDataParameter, _internal_metadata_),
      -1);
  SPPParameter_descriptor_ = file->message_type(60);
  static const int SPPParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pyramid_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, engine_),
  };
  SPPParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SPPParameter_descriptor_,
      SPPParameter::default_instance_,
      SPPParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SPPParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _internal_metadata_),
      -1);
  SPPParameter_PoolMethod_descriptor_ = SPPParameter_descriptor_->enum_type(0);
  SPPParameter_Engine_descriptor_ = SPPParameter_descriptor_->enum_type(1);
  V1LayerParameter_descriptor_ = file->message_type(61);
  static const int V1LayerParameter_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exclude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blob_share_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, accuracy_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, argmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dummy_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, eltwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hinge_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, image_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, infogain_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, memory_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, mvn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, slice_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, tanh_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, threshold_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, window_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, bn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, local_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, prelu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, insanity_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, triplet_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, roi_pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, eltwise_affine_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, sub_region_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, noise_param_),
  };
  V1LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      V1LayerParameter_descriptor_,
      V1LayerParameter::default_instance_,
      V1LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(V1LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _internal_metadata_),
      -1);
  V1LayerParameter_LayerType_descriptor_ = V1LayerParameter_descriptor_->enum_type(0);
  V1LayerParameter_DimCheckMode_descriptor_ = V1LayerParameter_descriptor_->enum_type(1);
  V0LayerParameter_descriptor_ = file->message_type(62);
  static const int V0LayerParameter_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, biasterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, kernelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, dropout_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, meanfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, batchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, cropsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_bg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_context_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_crop_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, shuffle_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, concat_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, hdf5_output_param_),
  };
  V0LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      V0LayerParameter_descriptor_,
      V0LayerParameter::default_instance_,
      V0LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(V0LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _internal_metadata_),
      -1);
  V0LayerParameter_PoolMethod_descriptor_ = V0LayerParameter_descriptor_->enum_type(0);
  TripletLossParameter_descriptor_ = file->message_type(63);
  static const int TripletLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, margin_),
  };
  TripletLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TripletLossParameter_descriptor_,
      TripletLossParameter::default_instance_,
      TripletLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(TripletLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, _internal_metadata_),
      -1);
  ROIPoolingParameter_descriptor_ = file->message_type(64);
  static const int ROIPoolingParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, pooled_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, pooled_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, spatial_scale_),
  };
  ROIPoolingParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ROIPoolingParameter_descriptor_,
      ROIPoolingParameter::default_instance_,
      ROIPoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ROIPoolingParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, _internal_metadata_),
      -1);
  InsanityParameter_descriptor_ = file->message_type(65);
  static const int InsanityParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsanityParameter, lb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsanityParameter, ub_),
  };
  InsanityParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InsanityParameter_descriptor_,
      InsanityParameter::default_instance_,
      InsanityParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsanityParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(InsanityParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsanityParameter, _internal_metadata_),
      -1);
  PReLUParameter_descriptor_ = file->message_type(66);
  static const int PReLUParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, channel_shared_),
  };
  PReLUParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PReLUParameter_descriptor_,
      PReLUParameter::default_instance_,
      PReLUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PReLUParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _internal_metadata_),
      -1);
  BNParameter_descriptor_ = file->message_type(67);
  static const int BNParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, slope_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, frozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, engine_),
  };
  BNParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BNParameter_descriptor_,
      BNParameter::default_instance_,
      BNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(BNParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, _internal_metadata_),
      -1);
  BNParameter_Engine_descriptor_ = BNParameter_descriptor_->enum_type(0);
  LocalParameter_descriptor_ = file->message_type(68);
  static const int LocalParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, bias_filler_),
  };
  LocalParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalParameter_descriptor_,
      LocalParameter::default_instance_,
      LocalParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LocalParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalParameter, _internal_metadata_),
      -1);
  EltwiseAffineParameter_descriptor_ = file->message_type(69);
  static const int EltwiseAffineParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseAffineParameter, slope_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseAffineParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseAffineParameter, channel_shared_),
  };
  EltwiseAffineParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EltwiseAffineParameter_descriptor_,
      EltwiseAffineParameter::default_instance_,
      EltwiseAffineParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseAffineParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(EltwiseAffineParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseAffineParameter, _internal_metadata_),
      -1);
  SubRegionParameter_descriptor_ = file->message_type(70);
  static const int SubRegionParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubRegionParameter, region_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubRegionParameter, region_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubRegionParameter, data_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubRegionParameter, data_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubRegionParameter, as_dim_),
  };
  SubRegionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubRegionParameter_descriptor_,
      SubRegionParameter::default_instance_,
      SubRegionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubRegionParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubRegionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubRegionParameter, _internal_metadata_),
      -1);
  NoiseParameter_descriptor_ = file->message_type(71);
  static const int NoiseParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, gaussian_std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, uniform_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, bias_),
  };
  NoiseParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NoiseParameter_descriptor_,
      NoiseParameter::default_instance_,
      NoiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(NoiseParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, _internal_metadata_),
      -1);
  HotspotParameter_descriptor_ = file->message_type(72);
  static const int HotspotParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, gaussian_std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, output_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, output_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, data_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, data_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, mean_removed_),
  };
  HotspotParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HotspotParameter_descriptor_,
      HotspotParameter::default_instance_,
      HotspotParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(HotspotParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotParameter, _internal_metadata_),
      -1);
  PredictBoxParameter_descriptor_ = file->message_type(73);
  static const int PredictBoxParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, receptive_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, nms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, output_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, positive_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, bbreg_exp_),
  };
  PredictBoxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PredictBoxParameter_descriptor_,
      PredictBoxParameter::default_instance_,
      PredictBoxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PredictBoxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictBoxParameter, _internal_metadata_),
      -1);
  FCNDataParameter_descriptor_ = file->message_type(74);
  static const int FCNDataParameter_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, template_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, template_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, expand_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, expand_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, expand_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, expand_bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, roi_multiply_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, roi_multiply_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, scale_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, scale_step_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, gaussian_size_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, gaussian_size_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, gaussian_std_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, gaussian_std_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, use_hog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, hog_cell_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, min_iou_),
  };
  FCNDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FCNDataParameter_descriptor_,
      FCNDataParameter::default_instance_,
      FCNDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(FCNDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNDataParameter, _internal_metadata_),
      -1);
  CenterLossParameter_descriptor_ = file->message_type(75);
  static const int CenterLossParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLossParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLossParameter, center_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLossParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLossParameter, distance_type_),
  };
  CenterLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CenterLossParameter_descriptor_,
      CenterLossParameter::default_instance_,
      CenterLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(CenterLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLossParameter, _internal_metadata_),
      -1);
  FlipParameter_descriptor_ = file->message_type(76);
  static const int FlipParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipParameter, flip_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipParameter, flip_height_),
  };
  FlipParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FlipParameter_descriptor_,
      FlipParameter::default_instance_,
      FlipParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(FlipParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipParameter, _internal_metadata_),
      -1);
  NormalizeParameter_descriptor_ = file->message_type(77);
  static const int NormalizeParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, normalize_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, fix_gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, bp_norm_),
  };
  NormalizeParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NormalizeParameter_descriptor_,
      NormalizeParameter::default_instance_,
      NormalizeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(NormalizeParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, _internal_metadata_),
      -1);
  GeneralContrastiveParameter_descriptor_ = file->message_type(78);
  static const int GeneralContrastiveParameter_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, positive_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, negative_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, positive_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, negative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, normalize_negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, positive_outlier_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, square_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, max_negative_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, max_positive_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, positive_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, positive_upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, exp_negative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, add_intra_mae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, max_negative_margin_),
  };
  GeneralContrastiveParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeneralContrastiveParameter_descriptor_,
      GeneralContrastiveParameter::default_instance_,
      GeneralContrastiveParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(GeneralContrastiveParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralContrastiveParameter, _internal_metadata_),
      -1);
  BatchContrastiveParameter_descriptor_ = file->message_type(79);
  static const int BatchContrastiveParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchContrastiveParameter, positive_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchContrastiveParameter, negative_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchContrastiveParameter, positive_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchContrastiveParameter, negative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchContrastiveParameter, max_only_),
  };
  BatchContrastiveParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchContrastiveParameter_descriptor_,
      BatchContrastiveParameter::default_instance_,
      BatchContrastiveParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchContrastiveParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(BatchContrastiveParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchContrastiveParameter, _internal_metadata_),
      -1);
  SoftContrastiveParameter_descriptor_ = file->message_type(80);
  static const int SoftContrastiveParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, positive_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, negative_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, positive_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, negative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, exponent_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, square_),
  };
  SoftContrastiveParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftContrastiveParameter_descriptor_,
      SoftContrastiveParameter::default_instance_,
      SoftContrastiveParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SoftContrastiveParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftContrastiveParameter, _internal_metadata_),
      -1);
  GeneralTripletParameter_descriptor_ = file->message_type(81);
  static const int GeneralTripletParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, add_center_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, hardest_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, positive_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, positive_upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, positive_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, negative_weight_),
  };
  GeneralTripletParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeneralTripletParameter_descriptor_,
      GeneralTripletParameter::default_instance_,
      GeneralTripletParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(GeneralTripletParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTripletParameter, _internal_metadata_),
      -1);
  SoftTruncationParameter_descriptor_ = file->message_type(82);
  static const int SoftTruncationParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftTruncationParameter, c_),
  };
  SoftTruncationParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftTruncationParameter_descriptor_,
      SoftTruncationParameter::default_instance_,
      SoftTruncationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftTruncationParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SoftTruncationParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftTruncationParameter, _internal_metadata_),
      -1);
  TruncationParameter_descriptor_ = file->message_type(83);
  static const int TruncationParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncationParameter, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncationParameter, upper_bound_),
  };
  TruncationParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TruncationParameter_descriptor_,
      TruncationParameter::default_instance_,
      TruncationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncationParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(TruncationParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncationParameter, _internal_metadata_),
      -1);
  ProposalParameter_descriptor_ = file->message_type(84);
  static const int ProposalParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, feat_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, base_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, min_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, pre_nms_topn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, post_nms_topn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, nms_thresh_),
  };
  ProposalParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProposalParameter_descriptor_,
      ProposalParameter::default_instance_,
      ProposalParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProposalParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalParameter, _internal_metadata_),
      -1);
  PSROIPoolingParameter_descriptor_ = file->message_type(85);
  static const int PSROIPoolingParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, spatial_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, output_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, group_size_),
  };
  PSROIPoolingParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PSROIPoolingParameter_descriptor_,
      PSROIPoolingParameter::default_instance_,
      PSROIPoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PSROIPoolingParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, _internal_metadata_),
      -1);
  PairwiseParameter_descriptor_ = file->message_type(86);
  static const int PairwiseParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairwiseParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairwiseParameter, coeff_),
  };
  PairwiseParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PairwiseParameter_descriptor_,
      PairwiseParameter::default_instance_,
      PairwiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairwiseParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PairwiseParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairwiseParameter, _internal_metadata_),
      -1);
  PairwiseParameter_PairwiseOp_descriptor_ = PairwiseParameter_descriptor_->enum_type(0);
  SmoothL1Parameter_descriptor_ = file->message_type(87);
  static const int SmoothL1Parameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothL1Parameter, turn_point_),
  };
  SmoothL1Parameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmoothL1Parameter_descriptor_,
      SmoothL1Parameter::default_instance_,
      SmoothL1Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothL1Parameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmoothL1Parameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothL1Parameter, _internal_metadata_),
      -1);
  PermuteParameter_descriptor_ = file->message_type(88);
  static const int PermuteParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermuteParameter, order_),
  };
  PermuteParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PermuteParameter_descriptor_,
      PermuteParameter::default_instance_,
      PermuteParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermuteParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PermuteParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermuteParameter, _internal_metadata_),
      -1);
  NCAParameter_descriptor_ = file->message_type(89);
  static const int NCAParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCAParameter, min_negative_only_),
  };
  NCAParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NCAParameter_descriptor_,
      NCAParameter::default_instance_,
      NCAParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCAParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(NCAParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCAParameter, _internal_metadata_),
      -1);
  LargeMarginInnerProductParameter_descriptor_ = file->message_type(90);
  static const int LargeMarginInnerProductParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, lambda_min_),
  };
  LargeMarginInnerProductParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LargeMarginInnerProductParameter_descriptor_,
      LargeMarginInnerProductParameter::default_instance_,
      LargeMarginInnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LargeMarginInnerProductParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeMarginInnerProductParameter, _internal_metadata_),
      -1);
  LargeMarginInnerProductParameter_LargeMarginType_descriptor_ = LargeMarginInnerProductParameter_descriptor_->enum_type(0);
  LabelSpecificRescaleParameter_descriptor_ = file->message_type(91);
  static const int LabelSpecificRescaleParameter_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, positive_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, negative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, positive_lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, negative_upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, rescale_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, for_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, positive_weight_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, positive_weight_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, positive_weight_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, bias_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, power_on_positive_),
  };
  LabelSpecificRescaleParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelSpecificRescaleParameter_descriptor_,
      LabelSpecificRescaleParameter::default_instance_,
      LabelSpecificRescaleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LabelSpecificRescaleParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificRescaleParameter, _internal_metadata_),
      -1);
  InfimumLossParamter_descriptor_ = file->message_type(92);
  static const int InfimumLossParamter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfimumLossParamter, infimum_),
  };
  InfimumLossParamter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InfimumLossParamter_descriptor_,
      InfimumLossParamter::default_instance_,
      InfimumLossParamter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfimumLossParamter, _has_bits_[0]),
      -1,
      -1,
      sizeof(InfimumLossParamter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfimumLossParamter, _internal_metadata_),
      -1);
  OrdinalRegressionParameter_descriptor_ = file->message_type(93);
  static const int OrdinalRegressionParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdinalRegressionParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdinalRegressionParameter, weight_file_),
  };
  OrdinalRegressionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrdinalRegressionParameter_descriptor_,
      OrdinalRegressionParameter::default_instance_,
      OrdinalRegressionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdinalRegressionParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrdinalRegressionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdinalRegressionParameter, _internal_metadata_),
      -1);
  ResizeParameter_descriptor_ = file->message_type(94);
  static const int ResizeParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, is_pyramid_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, out_height_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, out_width_scale_),
  };
  ResizeParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResizeParameter_descriptor_,
      ResizeParameter::default_instance_,
      ResizeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResizeParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, _internal_metadata_),
      -1);
  MarginInnerProductParameter_descriptor_ = file->message_type(95);
  static const int MarginInnerProductParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, lambda_min_),
  };
  MarginInnerProductParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarginInnerProductParameter_descriptor_,
      MarginInnerProductParameter::default_instance_,
      MarginInnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(MarginInnerProductParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginInnerProductParameter, _internal_metadata_),
      -1);
  MarginInnerProductParameter_MarginType_descriptor_ = MarginInnerProductParameter_descriptor_->enum_type(0);
  FeatureDecayLossParameter_descriptor_ = file->message_type(96);
  static const int FeatureDecayLossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDecayLossParameter, decay_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDecayLossParameter, force_decay_),
  };
  FeatureDecayLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureDecayLossParameter_descriptor_,
      FeatureDecayLossParameter::default_instance_,
      FeatureDecayLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDecayLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(FeatureDecayLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDecayLossParameter, _internal_metadata_),
      -1);
  ConfidencePenaltyLossParameter_descriptor_ = file->message_type(97);
  static const int ConfidencePenaltyLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePenaltyLossParameter, beta_),
  };
  ConfidencePenaltyLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfidencePenaltyLossParameter_descriptor_,
      ConfidencePenaltyLossParameter::default_instance_,
      ConfidencePenaltyLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePenaltyLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfidencePenaltyLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePenaltyLossParameter, _internal_metadata_),
      -1);
  FocalLossParameter_descriptor_ = file->message_type(98);
  static const int FocalLossParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocalLossParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocalLossParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocalLossParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocalLossParameter, beta_),
  };
  FocalLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FocalLossParameter_descriptor_,
      FocalLossParameter::default_instance_,
      FocalLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocalLossParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(FocalLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocalLossParameter, _internal_metadata_),
      -1);
  FocalLossParameter_Type_descriptor_ = FocalLossParameter_descriptor_->enum_type(0);
  LabelSpecificMarginParameter_descriptor_ = file->message_type(99);
  static const int LabelSpecificMarginParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, margin_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, margin_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, reset_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, margin_on_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, auto_tune_),
  };
  LabelSpecificMarginParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelSpecificMarginParameter_descriptor_,
      LabelSpecificMarginParameter::default_instance_,
      LabelSpecificMarginParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LabelSpecificMarginParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificMarginParameter, _internal_metadata_),
      -1);
  LabelSpecificMarginParameter_MarginType_descriptor_ = LabelSpecificMarginParameter_descriptor_->enum_type(0);
  ChannelScaleParameter_descriptor_ = file->message_type(100);
  static const int ChannelScaleParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, do_forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, do_backward_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, do_backward_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, global_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, max_global_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, min_global_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, init_global_scale_),
  };
  ChannelScaleParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelScaleParameter_descriptor_,
      ChannelScaleParameter::default_instance_,
      ChannelScaleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChannelScaleParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelScaleParameter, _internal_metadata_),
      -1);
  LabelSpecificAffineParameter_descriptor_ = file->message_type(101);
  static const int LabelSpecificAffineParameter_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, scale_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, scale_gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, scale_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, scale_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, transform_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, bias_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, bias_gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, bias_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, bias_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, power_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, power_gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, power_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, power_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, auto_tune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, reset_),
  };
  LabelSpecificAffineParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelSpecificAffineParameter_descriptor_,
      LabelSpecificAffineParameter::default_instance_,
      LabelSpecificAffineParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LabelSpecificAffineParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAffineParameter, _internal_metadata_),
      -1);
  LabelSpecificHardMarginParameter_descriptor_ = file->message_type(102);
  static const int LabelSpecificHardMarginParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificHardMarginParameter, positive_weight_),
  };
  LabelSpecificHardMarginParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelSpecificHardMarginParameter_descriptor_,
      LabelSpecificHardMarginParameter::default_instance_,
      LabelSpecificHardMarginParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificHardMarginParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LabelSpecificHardMarginParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificHardMarginParameter, _internal_metadata_),
      -1);
  LabelSpecificStatisticsParameter_descriptor_ = file->message_type(103);
  static const int LabelSpecificStatisticsParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificStatisticsParameter, scale_for_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificStatisticsParameter, scale_factor_),
  };
  LabelSpecificStatisticsParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelSpecificStatisticsParameter_descriptor_,
      LabelSpecificStatisticsParameter::default_instance_,
      LabelSpecificStatisticsParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificStatisticsParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LabelSpecificStatisticsParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificStatisticsParameter, _internal_metadata_),
      -1);
  LabelSpecificAddParameter_descriptor_ = file->message_type(104);
  static const int LabelSpecificAddParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, transform_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, bias_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, bias_gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, bias_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, bias_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, bias_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, iteration_),
  };
  LabelSpecificAddParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelSpecificAddParameter_descriptor_,
      LabelSpecificAddParameter::default_instance_,
      LabelSpecificAddParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(LabelSpecificAddParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSpecificAddParameter, _internal_metadata_),
      -1);
  Phase_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobShape_descriptor_, &BlobShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobProto_descriptor_, &BlobProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobProtoVector_descriptor_, &BlobProtoVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Datum_descriptor_, &Datum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FillerParameter_descriptor_, &FillerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetParameter_descriptor_, &NetParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SolverParameter_descriptor_, &SolverParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SolverState_descriptor_, &SolverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetState_descriptor_, &NetState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetStateRule_descriptor_, &NetStateRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParamSpec_descriptor_, &ParamSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LayerParameter_descriptor_, &LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformationParameter_descriptor_, &TransformationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LossParameter_descriptor_, &LossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccuracyParameter_descriptor_, &AccuracyParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArgMaxParameter_descriptor_, &ArgMaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConcatParameter_descriptor_, &ConcatParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchNormParameter_descriptor_, &BatchNormParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BiasParameter_descriptor_, &BiasParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContrastiveLossParameter_descriptor_, &ContrastiveLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConvolutionParameter_descriptor_, &ConvolutionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CropParameter_descriptor_, &CropParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataParameter_descriptor_, &DataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DropoutParameter_descriptor_, &DropoutParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DummyDataParameter_descriptor_, &DummyDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EltwiseParameter_descriptor_, &EltwiseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ELUParameter_descriptor_, &ELUParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmbedParameter_descriptor_, &EmbedParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExpParameter_descriptor_, &ExpParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FlattenParameter_descriptor_, &FlattenParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HDF5DataParameter_descriptor_, &HDF5DataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HDF5OutputParameter_descriptor_, &HDF5OutputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HingeLossParameter_descriptor_, &HingeLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageDataParameter_descriptor_, &ImageDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InfogainLossParameter_descriptor_, &InfogainLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnerProductParameter_descriptor_, &InnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnerDistanceParameter_descriptor_, &InnerDistanceParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputParameter_descriptor_, &InputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogParameter_descriptor_, &LogParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LRNParameter_descriptor_, &LRNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryDataParameter_descriptor_, &MemoryDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVNParameter_descriptor_, &MVNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterParameter_descriptor_, &ParameterParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoolingParameter_descriptor_, &PoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PowerParameter_descriptor_, &PowerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PythonParameter_descriptor_, &PythonParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecurrentParameter_descriptor_, &RecurrentParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReductionParameter_descriptor_, &ReductionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReLUParameter_descriptor_, &ReLUParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReshapeParameter_descriptor_, &ReshapeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScaleParameter_descriptor_, &ScaleParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SigmoidParameter_descriptor_, &SigmoidParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SliceParameter_descriptor_, &SliceParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftmaxParameter_descriptor_, &SoftmaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TanHParameter_descriptor_, &TanHParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TileParameter_descriptor_, &TileParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ThresholdParameter_descriptor_, &ThresholdParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MILParameter_descriptor_, &MILParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WindowDataParameter_descriptor_, &WindowDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MILDataParameter_descriptor_, &MILDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SPPParameter_descriptor_, &SPPParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      V1LayerParameter_descriptor_, &V1LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      V0LayerParameter_descriptor_, &V0LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TripletLossParameter_descriptor_, &TripletLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ROIPoolingParameter_descriptor_, &ROIPoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InsanityParameter_descriptor_, &InsanityParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PReLUParameter_descriptor_, &PReLUParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BNParameter_descriptor_, &BNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalParameter_descriptor_, &LocalParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EltwiseAffineParameter_descriptor_, &EltwiseAffineParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubRegionParameter_descriptor_, &SubRegionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NoiseParameter_descriptor_, &NoiseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HotspotParameter_descriptor_, &HotspotParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PredictBoxParameter_descriptor_, &PredictBoxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FCNDataParameter_descriptor_, &FCNDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CenterLossParameter_descriptor_, &CenterLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FlipParameter_descriptor_, &FlipParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NormalizeParameter_descriptor_, &NormalizeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeneralContrastiveParameter_descriptor_, &GeneralContrastiveParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchContrastiveParameter_descriptor_, &BatchContrastiveParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftContrastiveParameter_descriptor_, &SoftContrastiveParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeneralTripletParameter_descriptor_, &GeneralTripletParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftTruncationParameter_descriptor_, &SoftTruncationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TruncationParameter_descriptor_, &TruncationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProposalParameter_descriptor_, &ProposalParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PSROIPoolingParameter_descriptor_, &PSROIPoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PairwiseParameter_descriptor_, &PairwiseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmoothL1Parameter_descriptor_, &SmoothL1Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PermuteParameter_descriptor_, &PermuteParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NCAParameter_descriptor_, &NCAParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LargeMarginInnerProductParameter_descriptor_, &LargeMarginInnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelSpecificRescaleParameter_descriptor_, &LabelSpecificRescaleParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InfimumLossParamter_descriptor_, &InfimumLossParamter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrdinalRegressionParameter_descriptor_, &OrdinalRegressionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResizeParameter_descriptor_, &ResizeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarginInnerProductParameter_descriptor_, &MarginInnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureDecayLossParameter_descriptor_, &FeatureDecayLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfidencePenaltyLossParameter_descriptor_, &ConfidencePenaltyLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FocalLossParameter_descriptor_, &FocalLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelSpecificMarginParameter_descriptor_, &LabelSpecificMarginParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelScaleParameter_descriptor_, &ChannelScaleParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelSpecificAffineParameter_descriptor_, &LabelSpecificAffineParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelSpecificHardMarginParameter_descriptor_, &LabelSpecificHardMarginParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelSpecificStatisticsParameter_descriptor_, &LabelSpecificStatisticsParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelSpecificAddParameter_descriptor_, &LabelSpecificAddParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe_2eproto() {
  delete BlobShape::default_instance_;
  delete BlobShape_reflection_;
  delete BlobProto::default_instance_;
  delete BlobProto_reflection_;
  delete BlobProtoVector::default_instance_;
  delete BlobProtoVector_reflection_;
  delete Datum::default_instance_;
  delete Datum_reflection_;
  delete FillerParameter::default_instance_;
  delete FillerParameter_reflection_;
  delete FillerParameter::_default_type_;
  delete NetParameter::default_instance_;
  delete NetParameter_reflection_;
  delete SolverParameter::default_instance_;
  delete SolverParameter_reflection_;
  delete SolverParameter::_default_regularization_type_;
  delete SolverParameter::_default_type_;
  delete SolverState::default_instance_;
  delete SolverState_reflection_;
  delete NetState::default_instance_;
  delete NetState_reflection_;
  delete NetStateRule::default_instance_;
  delete NetStateRule_reflection_;
  delete ParamSpec::default_instance_;
  delete ParamSpec_reflection_;
  delete LayerParameter::default_instance_;
  delete LayerParameter_reflection_;
  delete TransformationParameter::default_instance_;
  delete TransformationParameter_reflection_;
  delete LossParameter::default_instance_;
  delete LossParameter_reflection_;
  delete AccuracyParameter::default_instance_;
  delete AccuracyParameter_reflection_;
  delete ArgMaxParameter::default_instance_;
  delete ArgMaxParameter_reflection_;
  delete ConcatParameter::default_instance_;
  delete ConcatParameter_reflection_;
  delete BatchNormParameter::default_instance_;
  delete BatchNormParameter_reflection_;
  delete BiasParameter::default_instance_;
  delete BiasParameter_reflection_;
  delete ContrastiveLossParameter::default_instance_;
  delete ContrastiveLossParameter_reflection_;
  delete ConvolutionParameter::default_instance_;
  delete ConvolutionParameter_reflection_;
  delete CropParameter::default_instance_;
  delete CropParameter_reflection_;
  delete DataParameter::default_instance_;
  delete DataParameter_reflection_;
  delete DropoutParameter::default_instance_;
  delete DropoutParameter_reflection_;
  delete DummyDataParameter::default_instance_;
  delete DummyDataParameter_reflection_;
  delete EltwiseParameter::default_instance_;
  delete EltwiseParameter_reflection_;
  delete ELUParameter::default_instance_;
  delete ELUParameter_reflection_;
  delete EmbedParameter::default_instance_;
  delete EmbedParameter_reflection_;
  delete ExpParameter::default_instance_;
  delete ExpParameter_reflection_;
  delete FlattenParameter::default_instance_;
  delete FlattenParameter_reflection_;
  delete HDF5DataParameter::default_instance_;
  delete HDF5DataParameter_reflection_;
  delete HDF5OutputParameter::default_instance_;
  delete HDF5OutputParameter_reflection_;
  delete HingeLossParameter::default_instance_;
  delete HingeLossParameter_reflection_;
  delete ImageDataParameter::default_instance_;
  delete ImageDataParameter_reflection_;
  delete InfogainLossParameter::default_instance_;
  delete InfogainLossParameter_reflection_;
  delete InnerProductParameter::default_instance_;
  delete InnerProductParameter_reflection_;
  delete InnerDistanceParameter::default_instance_;
  delete InnerDistanceParameter_reflection_;
  delete InnerDistanceParameter::_default_distance_type_;
  delete InputParameter::default_instance_;
  delete InputParameter_reflection_;
  delete LogParameter::default_instance_;
  delete LogParameter_reflection_;
  delete LRNParameter::default_instance_;
  delete LRNParameter_reflection_;
  delete MemoryDataParameter::default_instance_;
  delete MemoryDataParameter_reflection_;
  delete MVNParameter::default_instance_;
  delete MVNParameter_reflection_;
  delete ParameterParameter::default_instance_;
  delete ParameterParameter_reflection_;
  delete PoolingParameter::default_instance_;
  delete PoolingParameter_reflection_;
  delete PowerParameter::default_instance_;
  delete PowerParameter_reflection_;
  delete PythonParameter::default_instance_;
  delete PythonParameter_reflection_;
  delete RecurrentParameter::default_instance_;
  delete RecurrentParameter_reflection_;
  delete ReductionParameter::default_instance_;
  delete ReductionParameter_reflection_;
  delete ReLUParameter::default_instance_;
  delete ReLUParameter_reflection_;
  delete ReshapeParameter::default_instance_;
  delete ReshapeParameter_reflection_;
  delete ScaleParameter::default_instance_;
  delete ScaleParameter_reflection_;
  delete SigmoidParameter::default_instance_;
  delete SigmoidParameter_reflection_;
  delete SliceParameter::default_instance_;
  delete SliceParameter_reflection_;
  delete SoftmaxParameter::default_instance_;
  delete SoftmaxParameter_reflection_;
  delete SoftmaxParameter::_default_normalize_type_;
  delete TanHParameter::default_instance_;
  delete TanHParameter_reflection_;
  delete TileParameter::default_instance_;
  delete TileParameter_reflection_;
  delete ThresholdParameter::default_instance_;
  delete ThresholdParameter_reflection_;
  delete MILParameter::default_instance_;
  delete MILParameter_reflection_;
  delete WindowDataParameter::default_instance_;
  delete WindowDataParameter_reflection_;
  delete WindowDataParameter::_default_crop_mode_;
  delete MILDataParameter::default_instance_;
  delete MILDataParameter_reflection_;
  delete SPPParameter::default_instance_;
  delete SPPParameter_reflection_;
  delete V1LayerParameter::default_instance_;
  delete V1LayerParameter_reflection_;
  delete V0LayerParameter::default_instance_;
  delete V0LayerParameter_reflection_;
  delete V0LayerParameter::_default_det_crop_mode_;
  delete TripletLossParameter::default_instance_;
  delete TripletLossParameter_reflection_;
  delete ROIPoolingParameter::default_instance_;
  delete ROIPoolingParameter_reflection_;
  delete InsanityParameter::default_instance_;
  delete InsanityParameter_reflection_;
  delete PReLUParameter::default_instance_;
  delete PReLUParameter_reflection_;
  delete BNParameter::default_instance_;
  delete BNParameter_reflection_;
  delete LocalParameter::default_instance_;
  delete LocalParameter_reflection_;
  delete EltwiseAffineParameter::default_instance_;
  delete EltwiseAffineParameter_reflection_;
  delete SubRegionParameter::default_instance_;
  delete SubRegionParameter_reflection_;
  delete NoiseParameter::default_instance_;
  delete NoiseParameter_reflection_;
  delete HotspotParameter::default_instance_;
  delete HotspotParameter_reflection_;
  delete PredictBoxParameter::default_instance_;
  delete PredictBoxParameter_reflection_;
  delete FCNDataParameter::default_instance_;
  delete FCNDataParameter_reflection_;
  delete CenterLossParameter::default_instance_;
  delete CenterLossParameter_reflection_;
  delete CenterLossParameter::_default_distance_type_;
  delete FlipParameter::default_instance_;
  delete FlipParameter_reflection_;
  delete NormalizeParameter::default_instance_;
  delete NormalizeParameter_reflection_;
  delete NormalizeParameter::_default_normalize_type_;
  delete GeneralContrastiveParameter::default_instance_;
  delete GeneralContrastiveParameter_reflection_;
  delete BatchContrastiveParameter::default_instance_;
  delete BatchContrastiveParameter_reflection_;
  delete SoftContrastiveParameter::default_instance_;
  delete SoftContrastiveParameter_reflection_;
  delete GeneralTripletParameter::default_instance_;
  delete GeneralTripletParameter_reflection_;
  delete SoftTruncationParameter::default_instance_;
  delete SoftTruncationParameter_reflection_;
  delete TruncationParameter::default_instance_;
  delete TruncationParameter_reflection_;
  delete ProposalParameter::default_instance_;
  delete ProposalParameter_reflection_;
  delete PSROIPoolingParameter::default_instance_;
  delete PSROIPoolingParameter_reflection_;
  delete PairwiseParameter::default_instance_;
  delete PairwiseParameter_reflection_;
  delete SmoothL1Parameter::default_instance_;
  delete SmoothL1Parameter_reflection_;
  delete PermuteParameter::default_instance_;
  delete PermuteParameter_reflection_;
  delete NCAParameter::default_instance_;
  delete NCAParameter_reflection_;
  delete LargeMarginInnerProductParameter::default_instance_;
  delete LargeMarginInnerProductParameter_reflection_;
  delete LabelSpecificRescaleParameter::default_instance_;
  delete LabelSpecificRescaleParameter_reflection_;
  delete InfimumLossParamter::default_instance_;
  delete InfimumLossParamter_reflection_;
  delete OrdinalRegressionParameter::default_instance_;
  delete OrdinalRegressionParameter_reflection_;
  delete ResizeParameter::default_instance_;
  delete ResizeParameter_reflection_;
  delete MarginInnerProductParameter::default_instance_;
  delete MarginInnerProductParameter_reflection_;
  delete FeatureDecayLossParameter::default_instance_;
  delete FeatureDecayLossParameter_reflection_;
  delete ConfidencePenaltyLossParameter::default_instance_;
  delete ConfidencePenaltyLossParameter_reflection_;
  delete FocalLossParameter::default_instance_;
  delete FocalLossParameter_reflection_;
  delete LabelSpecificMarginParameter::default_instance_;
  delete LabelSpecificMarginParameter_reflection_;
  delete ChannelScaleParameter::default_instance_;
  delete ChannelScaleParameter_reflection_;
  delete LabelSpecificAffineParameter::default_instance_;
  delete LabelSpecificAffineParameter_reflection_;
  delete LabelSpecificHardMarginParameter::default_instance_;
  delete LabelSpecificHardMarginParameter_reflection_;
  delete LabelSpecificStatisticsParameter::default_instance_;
  delete LabelSpecificStatisticsParameter_reflection_;
  delete LabelSpecificAddParameter::default_instance_;
  delete LabelSpecificAddParameter_reflection_;
}

void protobuf_AddDesc_caffe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013caffe.proto\022\005caffe\"\034\n\tBlobShape\022\017\n\003dim"
    "\030\001 \003(\003B\002\020\001\"\314\001\n\tBlobProto\022\037\n\005shape\030\007 \001(\0132"
    "\020.caffe.BlobShape\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004d"
    "iff\030\006 \003(\002B\002\020\001\022\027\n\013double_data\030\010 \003(\001B\002\020\001\022\027"
    "\n\013double_diff\030\t \003(\001B\002\020\001\022\016\n\003num\030\001 \001(\005:\0010\022"
    "\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006height\030\003 \001(\005:\0010\022"
    "\020\n\005width\030\004 \001(\005:\0010\"2\n\017BlobProtoVector\022\037\n\005"
    "blobs\030\001 \003(\0132\020.caffe.BlobProto\"\201\001\n\005Datum\022"
    "\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r\n\005wid"
    "th\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030\005 \001(\005\022\022\n"
    "\nfloat_data\030\006 \003(\002\022\026\n\007encoded\030\007 \001(\010:\005fals"
    "e\"\234\002\n\017FillerParameter\022\026\n\004type\030\001 \001(\t:\010con"
    "stant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min\030\003 \001(\002:\0010\022"
    "\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:\0010\022\016\n\003std\030"
    "\006 \001(\002:\0011\022\020\n\005alpha\030\t \001(\002:\0010\022\022\n\006sparse\030\007 \001"
    "(\005:\002-1\022B\n\rvariance_norm\030\010 \001(\0162#.caffe.Fi"
    "llerParameter.VarianceNorm:\006FAN_IN\"4\n\014Va"
    "rianceNorm\022\n\n\006FAN_IN\020\000\022\013\n\007FAN_OUT\020\001\022\013\n\007A"
    "VERAGE\020\002\"\216\002\n\014NetParameter\022\014\n\004name\030\001 \001(\t\022"
    "\r\n\005input\030\003 \003(\t\022%\n\013input_shape\030\010 \003(\0132\020.ca"
    "ffe.BlobShape\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016forc"
    "e_backward\030\005 \001(\010:\005false\022\036\n\005state\030\006 \001(\0132\017"
    ".caffe.NetState\022\031\n\ndebug_info\030\007 \001(\010:\005fal"
    "se\022$\n\005layer\030d \003(\0132\025.caffe.LayerParameter"
    "\022\'\n\006layers\030\002 \003(\0132\027.caffe.V1LayerParamete"
    "r\"\256\013\n\017SolverParameter\022\013\n\003net\030\030 \001(\t\022&\n\tne"
    "t_param\030\031 \001(\0132\023.caffe.NetParameter\022\021\n\ttr"
    "ain_net\030\001 \001(\t\022\020\n\010test_net\030\002 \003(\t\022,\n\017train"
    "_net_param\030\025 \001(\0132\023.caffe.NetParameter\022+\n"
    "\016test_net_param\030\026 \003(\0132\023.caffe.NetParamet"
    "er\022$\n\013train_state\030\032 \001(\0132\017.caffe.NetState"
    "\022#\n\ntest_state\030\033 \003(\0132\017.caffe.NetState\022\021\n"
    "\ttest_iter\030\003 \003(\005\022\030\n\rtest_interval\030\004 \001(\005:"
    "\0010\022 \n\021test_compute_loss\030\023 \001(\010:\005false\022!\n\023"
    "test_initialization\030  \001(\010:\004true\022\017\n\007base_"
    "lr\030\005 \001(\002\022\017\n\007display\030\006 \001(\005\022\027\n\014average_los"
    "s\030! \001(\005:\0011\022\020\n\010max_iter\030\007 \001(\005\022\024\n\titer_siz"
    "e\030$ \001(\005:\0011\022\021\n\tlr_policy\030\010 \001(\t\022\r\n\005gamma\030\t"
    " \001(\002\022\r\n\005power\030\n \001(\002\022\020\n\010momentum\030\013 \001(\002\022\024\n"
    "\014weight_decay\030\014 \001(\002\022\037\n\023regularization_ty"
    "pe\030\035 \001(\t:\002L2\022\020\n\010stepsize\030\r \001(\005\022\021\n\tstepva"
    "lue\030\" \003(\005\022\032\n\016clip_gradients\030# \001(\002:\002-1\022\'\n"
    "\023clamp_weights_lower\030* \001(\002:\n-999999.88\022&"
    "\n\023clamp_weights_upper\030+ \001(\002:\t999999.88\022\030"
    "\n\014clip_weights\030, \001(\002:\002-1\022\023\n\010snapshot\030\016 \001"
    "(\005:\0010\022\027\n\017snapshot_prefix\030\017 \001(\t\022\034\n\rsnapsh"
    "ot_diff\030\020 \001(\010:\005false\022K\n\017snapshot_format\030"
    "% \001(\0162%.caffe.SolverParameter.SnapshotFo"
    "rmat:\013BINARYPROTO\022;\n\013solver_mode\030\021 \001(\0162!"
    ".caffe.SolverParameter.SolverMode:\003GPU\022\024"
    "\n\tdevice_id\030\022 \001(\005:\0010\022\027\n\013random_seed\030\024 \001("
    "\003:\002-1\022\021\n\004type\030( \001(\t:\003SGD\022\024\n\005delta\030\037 \001(\002:"
    "\0051e-08\022\030\n\tmomentum2\030\' \001(\002:\0050.999\022\027\n\trms_"
    "decay\030& \001(\002:\0040.99\022\031\n\ndebug_info\030\027 \001(\010:\005f"
    "alse\022\"\n\024snapshot_after_train\030\034 \001(\010:\004true"
    "\022;\n\013solver_type\030\036 \001(\0162!.caffe.SolverPara"
    "meter.SolverType:\003SGD\022\037\n\021layer_wise_redu"
    "ce\030) \001(\010:\004true\"+\n\016SnapshotFormat\022\010\n\004HDF5"
    "\020\000\022\017\n\013BINARYPROTO\020\001\"\036\n\nSolverMode\022\007\n\003CPU"
    "\020\000\022\007\n\003GPU\020\001\"U\n\nSolverType\022\007\n\003SGD\020\000\022\014\n\010NE"
    "STEROV\020\001\022\013\n\007ADAGRAD\020\002\022\013\n\007RMSPROP\020\003\022\014\n\010AD"
    "ADELTA\020\004\022\010\n\004ADAM\020\005\"l\n\013SolverState\022\014\n\004ite"
    "r\030\001 \001(\005\022\023\n\013learned_net\030\002 \001(\t\022!\n\007history\030"
    "\003 \003(\0132\020.caffe.BlobProto\022\027\n\014current_step\030"
    "\004 \001(\005:\0010\"N\n\010NetState\022!\n\005phase\030\001 \001(\0162\014.ca"
    "ffe.Phase:\004TEST\022\020\n\005level\030\002 \001(\005:\0010\022\r\n\005sta"
    "ge\030\003 \003(\t\"s\n\014NetStateRule\022\033\n\005phase\030\001 \001(\0162"
    "\014.caffe.Phase\022\021\n\tmin_level\030\002 \001(\005\022\021\n\tmax_"
    "level\030\003 \001(\005\022\r\n\005stage\030\004 \003(\t\022\021\n\tnot_stage\030"
    "\005 \003(\t\"\243\001\n\tParamSpec\022\014\n\004name\030\001 \001(\t\0221\n\nsha"
    "re_mode\030\002 \001(\0162\035.caffe.ParamSpec.DimCheck"
    "Mode\022\022\n\007lr_mult\030\003 \001(\002:\0011\022\025\n\ndecay_mult\030\004"
    " \001(\002:\0011\"*\n\014DimCheckMode\022\n\n\006STRICT\020\000\022\016\n\nP"
    "ERMISSIVE\020\001\"\205(\n\016LayerParameter\022\014\n\004name\030\001"
    " \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006bottom\030\003 \003(\t\022\013\n\003to"
    "p\030\004 \003(\t\022\033\n\005phase\030\n \001(\0162\014.caffe.Phase\022\023\n\013"
    "loss_weight\030\005 \003(\002\022\037\n\005param\030\006 \003(\0132\020.caffe"
    ".ParamSpec\022\037\n\005blobs\030\007 \003(\0132\020.caffe.BlobPr"
    "oto\022\026\n\016propagate_down\030\013 \003(\010\022$\n\007include\030\010"
    " \003(\0132\023.caffe.NetStateRule\022$\n\007exclude\030\t \003"
    "(\0132\023.caffe.NetStateRule\0227\n\017transform_par"
    "am\030d \001(\0132\036.caffe.TransformationParameter"
    "\022(\n\nloss_param\030e \001(\0132\024.caffe.LossParamet"
    "er\0220\n\016accuracy_param\030f \001(\0132\030.caffe.Accur"
    "acyParameter\022,\n\014argmax_param\030g \001(\0132\026.caf"
    "fe.ArgMaxParameter\0224\n\020batch_norm_param\030\213"
    "\001 \001(\0132\031.caffe.BatchNormParameter\022)\n\nbias"
    "_param\030\215\001 \001(\0132\024.caffe.BiasParameter\022,\n\014c"
    "oncat_param\030h \001(\0132\026.caffe.ConcatParamete"
    "r\022\?\n\026contrastive_loss_param\030i \001(\0132\037.caff"
    "e.ContrastiveLossParameter\0226\n\021convolutio"
    "n_param\030j \001(\0132\033.caffe.ConvolutionParamet"
    "er\022)\n\ncrop_param\030\220\001 \001(\0132\024.caffe.CropPara"
    "meter\022(\n\ndata_param\030k \001(\0132\024.caffe.DataPa"
    "rameter\022.\n\rdropout_param\030l \001(\0132\027.caffe.D"
    "ropoutParameter\0223\n\020dummy_data_param\030m \001("
    "\0132\031.caffe.DummyDataParameter\022.\n\reltwise_"
    "param\030n \001(\0132\027.caffe.EltwiseParameter\022\'\n\t"
    "elu_param\030\214\001 \001(\0132\023.caffe.ELUParameter\022+\n"
    "\013embed_param\030\211\001 \001(\0132\025.caffe.EmbedParamet"
    "er\022&\n\texp_param\030o \001(\0132\023.caffe.ExpParamet"
    "er\022/\n\rflatten_param\030\207\001 \001(\0132\027.caffe.Flatt"
    "enParameter\0221\n\017hdf5_data_param\030p \001(\0132\030.c"
    "affe.HDF5DataParameter\0225\n\021hdf5_output_pa"
    "ram\030q \001(\0132\032.caffe.HDF5OutputParameter\0223\n"
    "\020hinge_loss_param\030r \001(\0132\031.caffe.HingeLos"
    "sParameter\0223\n\020image_data_param\030s \001(\0132\031.c"
    "affe.ImageDataParameter\0229\n\023infogain_loss"
    "_param\030t \001(\0132\034.caffe.InfogainLossParamet"
    "er\0229\n\023inner_product_param\030u \001(\0132\034.caffe."
    "InnerProductParameter\022+\n\013input_param\030\217\001 "
    "\001(\0132\025.caffe.InputParameter\022\'\n\tlog_param\030"
    "\206\001 \001(\0132\023.caffe.LogParameter\022&\n\tlrn_param"
    "\030v \001(\0132\023.caffe.LRNParameter\0225\n\021memory_da"
    "ta_param\030w \001(\0132\032.caffe.MemoryDataParamet"
    "er\022&\n\tmvn_param\030x \001(\0132\023.caffe.MVNParamet"
    "er\0223\n\017parameter_param\030\221\001 \001(\0132\031.caffe.Par"
    "ameterParameter\022.\n\rpooling_param\030y \001(\0132\027"
    ".caffe.PoolingParameter\022*\n\013power_param\030z"
    " \001(\0132\025.caffe.PowerParameter\022+\n\013prelu_par"
    "am\030\203\001 \001(\0132\025.caffe.PReLUParameter\022-\n\014pyth"
    "on_param\030\202\001 \001(\0132\026.caffe.PythonParameter\022"
    "3\n\017recurrent_param\030\222\001 \001(\0132\031.caffe.Recurr"
    "entParameter\0223\n\017reduction_param\030\210\001 \001(\0132\031"
    ".caffe.ReductionParameter\022(\n\nrelu_param\030"
    "{ \001(\0132\024.caffe.ReLUParameter\022/\n\rreshape_p"
    "aram\030\205\001 \001(\0132\027.caffe.ReshapeParameter\022+\n\013"
    "scale_param\030\216\001 \001(\0132\025.caffe.ScaleParamete"
    "r\022.\n\rsigmoid_param\030| \001(\0132\027.caffe.Sigmoid"
    "Parameter\022.\n\rsoftmax_param\030} \001(\0132\027.caffe"
    ".SoftmaxParameter\022\'\n\tspp_param\030\204\001 \001(\0132\023."
    "caffe.SPPParameter\022*\n\013slice_param\030~ \001(\0132"
    "\025.caffe.SliceParameter\022(\n\ntanh_param\030\177 \001"
    "(\0132\024.caffe.TanHParameter\0223\n\017threshold_pa"
    "ram\030\200\001 \001(\0132\031.caffe.ThresholdParameter\022)\n"
    "\ntile_param\030\212\001 \001(\0132\024.caffe.TileParameter"
    "\0226\n\021window_data_param\030\201\001 \001(\0132\032.caffe.Win"
    "dowDataParameter\022%\n\010bn_param\030\310\001 \001(\0132\022.ca"
    "ffe.BNParameter\022+\n\013local_param\030\311\001 \001(\0132\025."
    "caffe.LocalParameter\0221\n\016insanity_param\030\312"
    "\001 \001(\0132\030.caffe.InsanityParameter\0228\n\022tripl"
    "et_loss_param\030\313\001 \001(\0132\033.caffe.TripletLoss"
    "Parameter\0226\n\021roi_pooling_param\030\314\001 \001(\0132\032."
    "caffe.ROIPoolingParameter\022<\n\024eltwise_aff"
    "ine_param\030\315\001 \001(\0132\035.caffe.EltwiseAffinePa"
    "rameter\0224\n\020sub_region_param\030\316\001 \001(\0132\031.caf"
    "fe.SubRegionParameter\022+\n\013noise_param\030\317\001 "
    "\001(\0132\025.caffe.NoiseParameter\022/\n\rhotspot_pa"
    "ram\030\320\001 \001(\0132\027.caffe.HotspotParameter\0226\n\021p"
    "redict_box_param\030\321\001 \001(\0132\032.caffe.PredictB"
    "oxParameter\0222\n\016mil_data_param\030\304\222\265\002 \001(\0132\027"
    ".caffe.MILDataParameter\022)\n\tmil_param\030\314\222\265"
    "\002 \001(\0132\023.caffe.MILParameter\0220\n\016fcn_data_p"
    "aram\030\322\001 \001(\0132\027.caffe.FCNDataParameter\0226\n\021"
    "center_loss_param\030\323\001 \001(\0132\032.caffe.CenterL"
    "ossParameter\022)\n\nflip_param\030\324\001 \001(\0132\024.caff"
    "e.FlipParameter\022<\n\024inner_distance_param\030"
    "\325\001 \001(\0132\035.caffe.InnerDistanceParameter\0223\n"
    "\017normalize_param\030\326\001 \001(\0132\031.caffe.Normaliz"
    "eParameter\022K\n\036general_contrastive_loss_p"
    "aram\030\327\001 \001(\0132\".caffe.GeneralContrastivePa"
    "rameter\022E\n\033soft_contrastive_loss_param\030\330"
    "\001 \001(\0132\037.caffe.SoftContrastiveParameter\022C"
    "\n\032general_triplet_loss_param\030\331\001 \001(\0132\036.ca"
    "ffe.GeneralTripletParameter\022>\n\025soft_trun"
    "cation_param\030\332\001 \001(\0132\036.caffe.SoftTruncati"
    "onParameter\0221\n\016proposal_param\030\333\001 \001(\0132\030.c"
    "affe.ProposalParameter\022:\n\023psroi_pooling_"
    "param\030\334\001 \001(\0132\034.caffe.PSROIPoolingParamet"
    "er\0221\n\016pairwise_param\030\335\001 \001(\0132\030.caffe.Pair"
    "wiseParameter\0221\n\016smoothl1_param\030\336\001 \001(\0132\030"
    ".caffe.SmoothL1Parameter\022G\n\034batch_contra"
    "stive_loss_param\030\337\001 \001(\0132 .caffe.BatchCon"
    "trastiveParameter\022/\n\rpermute_param\030\340\001 \001("
    "\0132\027.caffe.PermuteParameter\0225\n\020truncation"
    "_param\030\341\001 \001(\0132\032.caffe.TruncationParamete"
    "r\022\'\n\tnca_param\030\342\001 \001(\0132\023.caffe.NCAParamet"
    "er\022Q\n\037largemargin_inner_product_param\030\343\001"
    " \001(\0132\'.caffe.LargeMarginInnerProductPara"
    "meter\022K\n\034label_specific_rescale_param\030\344\001"
    " \001(\0132$.caffe.LabelSpecificRescaleParamet"
    "er\0227\n\022infimum_loss_param\030\345\001 \001(\0132\032.caffe."
    "InfimumLossParamter\022I\n\035ordinal_regressio"
    "n_loss_param\030\346\001 \001(\0132!.caffe.OrdinalRegre"
    "ssionParameter\022-\n\014resize_param\030\347\001 \001(\0132\026."
    "caffe.ResizeParameter\022G\n\032margin_inner_pr"
    "oduct_param\030\350\001 \001(\0132\".caffe.MarginInnerPr"
    "oductParameter\022C\n\030feature_decay_loss_par"
    "am\030\351\001 \001(\0132 .caffe.FeatureDecayLossParame"
    "ter\022M\n\035confidence_penalty_loss_param\030\352\001 "
    "\001(\0132%.caffe.ConfidencePenaltyLossParamet"
    "er\0224\n\020focal_loss_param\030\353\001 \001(\0132\031.caffe.Fo"
    "calLossParameter\022I\n\033label_specific_margi"
    "n_param\030\354\001 \001(\0132#.caffe.LabelSpecificMarg"
    "inParameter\022:\n\023channel_scale_param\030\355\001 \001("
    "\0132\034.caffe.ChannelScaleParameter\022I\n\033label"
    "_specific_affine_param\030\356\001 \001(\0132#.caffe.La"
    "belSpecificAffineParameter\022R\n label_spec"
    "ific_hard_margin_param\030\357\001 \001(\0132\'.caffe.La"
    "belSpecificHardMarginParameter\022C\n\030label_"
    "specific_add_param\030\361\001 \001(\0132 .caffe.LabelS"
    "pecificAddParameter\"\362\002\n\027TransformationPa"
    "rameter\022\020\n\005scale\030\001 \001(\002:\0011\022\025\n\006mirror\030\002 \001("
    "\010:\005false\022\024\n\tcrop_size\030\003 \001(\r:\0010\022\021\n\tmean_f"
    "ile\030\004 \001(\t\022\022\n\nmean_value\030\005 \003(\002\022\032\n\013force_c"
    "olor\030\006 \001(\010:\005false\022\031\n\nforce_gray\030\007 \001(\010:\005f"
    "alse\022\021\n\006crop_h\030\010 \001(\r:\0010\022\021\n\006crop_w\030\t \001(\r:"
    "\0010\022\032\n\013center_crop\030\n \001(\010:\005false\022\026\n\013erase_"
    "ratio\030\013 \001(\002:\0010\022\027\n\tscale_min\030\014 \001(\002:\0040.02\022"
    "\026\n\tscale_max\030\r \001(\002:\0030.4\022\030\n\naspect_min\030\016 "
    "\001(\002:\0040.33\022\025\n\naspect_max\030\017 \001(\002:\0013\"\302\001\n\rLos"
    "sParameter\022\024\n\014ignore_label\030\001 \001(\005\022D\n\rnorm"
    "alization\030\003 \001(\0162&.caffe.LossParameter.No"
    "rmalizationMode:\005VALID\022\021\n\tnormalize\030\002 \001("
    "\010\"B\n\021NormalizationMode\022\010\n\004FULL\020\000\022\t\n\005VALI"
    "D\020\001\022\016\n\nBATCH_SIZE\020\002\022\010\n\004NONE\020\003\"j\n\021Accurac"
    "yParameter\022\020\n\005top_k\030\001 \001(\r:\0011\022\017\n\004axis\030\002 \001"
    "(\005:\0011\022\024\n\014ignore_label\030\003 \001(\005\022\034\n\rmin_is_be"
    "tter\030\004 \001(\010:\005false\"M\n\017ArgMaxParameter\022\032\n\013"
    "out_max_val\030\001 \001(\010:\005false\022\020\n\005top_k\030\002 \001(\r:"
    "\0011\022\014\n\004axis\030\003 \001(\005\"9\n\017ConcatParameter\022\017\n\004a"
    "xis\030\002 \001(\005:\0011\022\025\n\nconcat_dim\030\001 \001(\r:\0011\"\352\002\n\022"
    "BatchNormParameter\022\030\n\020use_global_stats\030\001"
    " \001(\010\022%\n\027moving_average_fraction\030\002 \001(\002:\0040"
    ".99\022\022\n\003eps\030\003 \001(\002:\0051e-05\022\033\n\014disable_mean\030"
    "\004 \001(\010:\005false\022\037\n\020disable_variance\030\005 \001(\010:\005"
    "false\022,\n\014scale_filler\030\007 \001(\0132\026.caffe.Fill"
    "erParameter\022+\n\013bias_filler\030\010 \001(\0132\026.caffe"
    ".FillerParameter\0229\n\006engine\030\017 \001(\0162 .caffe"
    ".BatchNormParameter.Engine:\007DEFAULT\"+\n\006E"
    "ngine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002"
    "\"]\n\rBiasParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010nu"
    "m_axes\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001(\0132\026.caffe."
    "FillerParameter\"L\n\030ContrastiveLossParame"
    "ter\022\021\n\006margin\030\001 \001(\002:\0011\022\035\n\016legacy_version"
    "\030\002 \001(\010:\005false\"\266\005\n\024ConvolutionParameter\022\022"
    "\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004t"
    "rue\022\013\n\003pad\030\003 \003(\r\022\023\n\013kernel_size\030\004 \003(\r\022\016\n"
    "\006stride\030\006 \003(\r\022\020\n\010dilation\030\022 \003(\r\022\020\n\005pad_h"
    "\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\020\n\010kernel_h\030"
    "\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\010stride_h\030\r \001("
    "\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005group\030\005 \001(\r:\0011\022-\n"
    "\rweight_filler\030\007 \001(\0132\026.caffe.FillerParam"
    "eter\022+\n\013bias_filler\030\010 \001(\0132\026.caffe.Filler"
    "Parameter\022;\n\006engine\030\017 \001(\0162\".caffe.Convol"
    "utionParameter.Engine:\007DEFAULT\022\017\n\004axis\030\020"
    " \001(\005:\0011\022\036\n\017force_nd_im2col\030\021 \001(\010:\005false\022"
    "j\n\035cudnn_convolution_algo_seeker\030\023 \001(\0162;"
    ".caffe.ConvolutionParameter.CuDNNConvolu"
    "tionAlgorithmSeeker:\006FINDEX\022\024\n\014shape_off"
    "set\030\024 \003(\r\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFF"
    "E\020\001\022\t\n\005CUDNN\020\002\"6\n\037CuDNNConvolutionAlgori"
    "thmSeeker\022\007\n\003GET\020\000\022\n\n\006FINDEX\020\001\"0\n\rCropPa"
    "rameter\022\017\n\004axis\030\001 \001(\005:\0012\022\016\n\006offset\030\002 \003(\r"
    "\"\244\002\n\rDataParameter\022\016\n\006source\030\001 \001(\t\022\022\n\nba"
    "tch_size\030\004 \001(\r\022\024\n\trand_skip\030\007 \001(\r:\0010\0221\n\007"
    "backend\030\010 \001(\0162\027.caffe.DataParameter.DB:\007"
    "LEVELDB\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003"
    " \001(\t\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001"
    "(\010:\005false\022\"\n\023force_encoded_color\030\t \001(\010:\005"
    "false\022\023\n\010prefetch\030\n \001(\r:\0014\"\033\n\002DB\022\013\n\007LEVE"
    "LDB\020\000\022\010\n\004LMDB\020\001\"I\n\020DropoutParameter\022\032\n\rd"
    "ropout_ratio\030\001 \001(\002:\0030.5\022\031\n\nsqrt_scale\030\002 "
    "\001(\010:\005false\"\240\001\n\022DummyDataParameter\022+\n\013dat"
    "a_filler\030\001 \003(\0132\026.caffe.FillerParameter\022\037"
    "\n\005shape\030\006 \003(\0132\020.caffe.BlobShape\022\013\n\003num\030\002"
    " \003(\r\022\020\n\010channels\030\003 \003(\r\022\016\n\006height\030\004 \003(\r\022\r"
    "\n\005width\030\005 \003(\r\"\257\001\n\020EltwiseParameter\0229\n\top"
    "eration\030\001 \001(\0162!.caffe.EltwiseParameter.E"
    "ltwiseOp:\003SUM\022\r\n\005coeff\030\002 \003(\002\022\036\n\020stable_p"
    "rod_grad\030\003 \001(\010:\004true\"1\n\tEltwiseOp\022\010\n\004PRO"
    "D\020\000\022\007\n\003SUM\020\001\022\007\n\003MAX\020\002\022\010\n\004SORT\020\003\" \n\014ELUPa"
    "rameter\022\020\n\005alpha\030\001 \001(\002:\0011\"\254\001\n\016EmbedParam"
    "eter\022\022\n\nnum_output\030\001 \001(\r\022\021\n\tinput_dim\030\002 "
    "\001(\r\022\027\n\tbias_term\030\003 \001(\010:\004true\022-\n\rweight_f"
    "iller\030\004 \001(\0132\026.caffe.FillerParameter\022+\n\013b"
    "ias_filler\030\005 \001(\0132\026.caffe.FillerParameter"
    "\"D\n\014ExpParameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005sc"
    "ale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"9\n\020Flatte"
    "nParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\024\n\010end_axis\030"
    "\002 \001(\005:\002-1\"O\n\021HDF5DataParameter\022\016\n\006source"
    "\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\r\022\026\n\007shuffle\030\003 "
    "\001(\010:\005false\"(\n\023HDF5OutputParameter\022\021\n\tfil"
    "e_name\030\001 \001(\t\"^\n\022HingeLossParameter\0220\n\004no"
    "rm\030\001 \001(\0162\036.caffe.HingeLossParameter.Norm"
    ":\002L1\"\026\n\004Norm\022\006\n\002L1\020\001\022\006\n\002L2\020\002\"\205\005\n\022ImageDa"
    "taParameter\022\016\n\006source\030\001 \001(\t\022\025\n\nbatch_siz"
    "e\030\004 \001(\r:\0011\022\024\n\trand_skip\030\007 \001(\r:\0010\022\026\n\007shuf"
    "fle\030\010 \001(\010:\005false\022\025\n\nnew_height\030\t \001(\r:\0010\022"
    "\024\n\tnew_width\030\n \001(\r:\0010\022\026\n\010is_color\030\013 \001(\010:"
    "\004true\022\035\n\016face_transform\030\r \001(\010:\005false\022\032\n\017"
    "max_shear_ratio\030\016 \001(\002:\0010\022\033\n\020max_aspect_r"
    "atio\030\017 \001(\002:\0010\022\033\n\020max_rotate_angle\030\020 \001(\002:"
    "\0010\022\033\n\020min_random_scale\030\021 \001(\002:\0011\022\033\n\020max_r"
    "andom_scale\030\022 \001(\002:\0011\022\033\n\020max_random_shift"
    "\030\023 \001(\r:\0010\022\032\n\013face_mirror\030\024 \001(\010:\005false\022\031\n"
    "\016face_point_num\030\025 \001(\r:\0010\022\020\n\005scale\030\002 \001(\002:"
    "\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_size\030\005 \001(\r"
    ":\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\025\n\013root_folde"
    "r\030\014 \001(\t:\000\022\034\n\rbalance_class\030\026 \001(\010:\005false\022"
    "\025\n\nbalance_by\030\027 \001(\r:\0010\022\032\n\017label_cut_star"
    "t\030\030 \001(\r:\0010\022\030\n\rlabel_cut_end\030\031 \001(\r:\0010\"8\n\025"
    "InfogainLossParameter\022\016\n\006source\030\001 \001(\t\022\017\n"
    "\004axis\030\002 \001(\005:\0011\"\345\001\n\025InnerProductParameter"
    "\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:"
    "\004true\022-\n\rweight_filler\030\003 \001(\0132\026.caffe.Fil"
    "lerParameter\022+\n\013bias_filler\030\004 \001(\0132\026.caff"
    "e.FillerParameter\022\017\n\004axis\030\005 \001(\005:\0011\022\030\n\ttr"
    "anspose\030\006 \001(\010:\005false\022\030\n\tnormalize\030\007 \001(\010:"
    "\005false\"\244\002\n\026InnerDistanceParameter\022\022\n\nnum"
    "_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022-"
    "\n\rweight_filler\030\003 \001(\0132\026.caffe.FillerPara"
    "meter\022+\n\013bias_filler\030\004 \001(\0132\026.caffe.Fille"
    "rParameter\022\017\n\004axis\030\005 \001(\005:\0011\022\030\n\ttranspose"
    "\030\006 \001(\010:\005false\022\031\n\rdistance_type\030\007 \001(\t:\002L2"
    "\022\030\n\tnormalize\030\010 \001(\010:\005false\022!\n\022update_cen"
    "ter_only\030\t \001(\010:\005false\"1\n\016InputParameter\022"
    "\037\n\005shape\030\001 \003(\0132\020.caffe.BlobShape\"D\n\014LogP"
    "arameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001("
    "\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"\270\002\n\014LRNParameter\022"
    "\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002:\0011"
    "\022\022\n\004beta\030\003 \001(\002:\0040.75\022D\n\013norm_region\030\004 \001("
    "\0162\036.caffe.LRNParameter.NormRegion:\017ACROS"
    "S_CHANNELS\022\014\n\001k\030\005 \001(\002:\0011\0223\n\006engine\030\006 \001(\016"
    "2\032.caffe.LRNParameter.Engine:\007DEFAULT\"5\n"
    "\nNormRegion\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n\016WITH"
    "IN_CHANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005C"
    "AFFE\020\001\022\t\n\005CUDNN\020\002\"t\n\023MemoryDataParameter"
    "\022\022\n\nbatch_size\030\001 \001(\r\022\020\n\010channels\030\002 \001(\r\022\016"
    "\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\022\030\n\ttranspo"
    "se\030\005 \001(\010:\005false\"d\n\014MVNParameter\022 \n\022norma"
    "lize_variance\030\001 \001(\010:\004true\022\036\n\017across_chan"
    "nels\030\002 \001(\010:\005false\022\022\n\003eps\030\003 \001(\002:\0051e-09\"b\n"
    "\022ParameterParameter\022\037\n\005shape\030\001 \001(\0132\020.caf"
    "fe.BlobShape\022+\n\013blob_filler\030\002 \001(\0132\026.caff"
    "e.FillerParameter\"\235\004\n\020PoolingParameter\0225"
    "\n\004pool\030\001 \001(\0162\".caffe.PoolingParameter.Po"
    "olMethod:\003MAX\022\016\n\003pad\030\004 \001(\r:\0010\022\020\n\005pad_h\030\t"
    " \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n\013kernel_size"
    "\030\002 \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010kernel_w\030\006 \001"
    "(\r\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010stride_h\030\007 \001(\r\022"
    "\020\n\010stride_w\030\010 \001(\r\0227\n\006engine\030\013 \001(\0162\036.caff"
    "e.PoolingParameter.Engine:\007DEFAULT\022\035\n\016gl"
    "obal_pooling\030\014 \001(\010:\005false\022\020\n\010blobs_lr\030\r "
    "\001(\002\022\033\n\013blobs_a_min\030\016 \001(\002:\0060.0001\"z\n\nPool"
    "Method\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002"
    "\022\007\n\003DEF\020\003\022\013\n\007DEF_ALL\020\004\022\014\n\010DEF_ALL2\020\005\022\014\n\010"
    "DEF_ALL3\020\006\022\014\n\010DEF_ALL4\020\007\022\n\n\006LOWRES\020\010\"+\n\006"
    "Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020"
    "\002\"F\n\016PowerParameter\022\020\n\005power\030\001 \001(\002:\0011\022\020\n"
    "\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"g\n\017Pyt"
    "honParameter\022\016\n\006module\030\001 \001(\t\022\r\n\005layer\030\002 "
    "\001(\t\022\023\n\tparam_str\030\003 \001(\t:\000\022 \n\021share_in_par"
    "allel\030\004 \001(\010:\005false\"\300\001\n\022RecurrentParamete"
    "r\022\025\n\nnum_output\030\001 \001(\r:\0010\022-\n\rweight_fille"
    "r\030\002 \001(\0132\026.caffe.FillerParameter\022+\n\013bias_"
    "filler\030\003 \001(\0132\026.caffe.FillerParameter\022\031\n\n"
    "debug_info\030\004 \001(\010:\005false\022\034\n\rexpose_hidden"
    "\030\005 \001(\010:\005false\"\255\001\n\022ReductionParameter\022=\n\t"
    "operation\030\001 \001(\0162%.caffe.ReductionParamet"
    "er.ReductionOp:\003SUM\022\017\n\004axis\030\002 \001(\005:\0010\022\020\n\005"
    "coeff\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007\n\003SUM\020\001\022\010"
    "\n\004ASUM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\215\001\n\rReLUPa"
    "rameter\022\031\n\016negative_slope\030\001 \001(\002:\0010\0224\n\006en"
    "gine\030\002 \001(\0162\033.caffe.ReLUParameter.Engine:"
    "\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE"
    "\020\001\022\t\n\005CUDNN\020\002\"Z\n\020ReshapeParameter\022\037\n\005sha"
    "pe\030\001 \001(\0132\020.caffe.BlobShape\022\017\n\004axis\030\002 \001(\005"
    ":\0010\022\024\n\010num_axes\030\003 \001(\005:\002-1\"\313\001\n\016ScaleParam"
    "eter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axes\030\002 \001(\005:"
    "\0011\022&\n\006filler\030\003 \001(\0132\026.caffe.FillerParamet"
    "er\022\030\n\tbias_term\030\004 \001(\010:\005false\022+\n\013bias_fil"
    "ler\030\005 \001(\0132\026.caffe.FillerParameter\022\021\n\tmin"
    "_value\030\006 \001(\002\022\021\n\tmax_value\030\007 \001(\002\"x\n\020Sigmo"
    "idParameter\0227\n\006engine\030\001 \001(\0162\036.caffe.Sigm"
    "oidParameter.Engine:\007DEFAULT\"+\n\006Engine\022\013"
    "\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"L\n\016Sli"
    "ceParameter\022\017\n\004axis\030\003 \001(\005:\0011\022\023\n\013slice_po"
    "int\030\002 \003(\r\022\024\n\tslice_dim\030\001 \001(\r:\0011\"\251\002\n\020Soft"
    "maxParameter\0227\n\006engine\030\001 \001(\0162\036.caffe.Sof"
    "tmaxParameter.Engine:\007DEFAULT\022\017\n\004axis\030\002 "
    "\001(\005:\0011\022\025\n\nhard_ratio\030\003 \001(\002:\0011\022\024\n\014class_w"
    "eight\030\004 \003(\002\022\031\n\021hard_mining_label\030\005 \001(\005\022\025"
    "\n\rcutting_point\030\006 \001(\002\022\037\n\016normalize_type\030"
    "\007 \001(\t:\007Softmax\022\036\n\023label_smooth_factor\030\010 "
    "\001(\002:\0010\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001"
    "\022\t\n\005CUDNN\020\002\"r\n\rTanHParameter\0224\n\006engine\030\001"
    " \001(\0162\033.caffe.TanHParameter.Engine:\007DEFAU"
    "LT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005"
    "CUDNN\020\002\"/\n\rTileParameter\022\017\n\004axis\030\001 \001(\005:\001"
    "1\022\r\n\005tiles\030\002 \001(\005\"*\n\022ThresholdParameter\022\024"
    "\n\tthreshold\030\001 \001(\002:\0010\"[\n\014MILParameter\022.\n\004"
    "type\030\001 \001(\0162\033.caffe.MILParameter.MILType:"
    "\003MAX\"\033\n\007MILType\022\007\n\003MAX\020\000\022\007\n\003NOR\020\001\"\301\002\n\023Wi"
    "ndowDataParameter\022\016\n\006source\030\001 \001(\t\022\020\n\005sca"
    "le\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbatch_"
    "size\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirr"
    "or\030\006 \001(\010:\005false\022\031\n\014fg_threshold\030\007 \001(\002:\0030"
    ".5\022\031\n\014bg_threshold\030\010 \001(\002:\0030.5\022\031\n\013fg_frac"
    "tion\030\t \001(\002:\0040.25\022\026\n\013context_pad\030\n \001(\r:\0010"
    "\022\027\n\tcrop_mode\030\013 \001(\t:\004warp\022\033\n\014cache_image"
    "s\030\014 \001(\010:\005false\022\025\n\013root_folder\030\r \001(\t:\000\"\340\001"
    "\n\020MILDataParameter\022\016\n\006source\030\001 \001(\t\022\025\n\nnu"
    "m_scales\030\002 \001(\r:\0011\022\027\n\014scale_factor\030\006 \001(\002:"
    "\0011\022\023\n\010channels\030\004 \001(\r:\0013\022\030\n\020images_per_ba"
    "tch\030\003 \001(\r\022\021\n\tn_classes\030\005 \001(\r\022\022\n\nlabel_fi"
    "le\030\007 \001(\t\022\020\n\010root_dir\030\013 \001(\t\022\013\n\003ext\030\014 \001(\t\022"
    "\027\n\trandomize\030\r \001(\010:\004true\"\353\001\n\014SPPParamete"
    "r\022\026\n\016pyramid_height\030\001 \001(\r\0221\n\004pool\030\002 \001(\0162"
    "\036.caffe.SPPParameter.PoolMethod:\003MAX\0223\n\006"
    "engine\030\006 \001(\0162\032.caffe.SPPParameter.Engine"
    ":\007DEFAULT\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020"
    "\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
    "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\224\030\n\020V1LayerParame"
    "ter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top\030\003 \003(\t\022\014\n\004name"
    "\030\004 \001(\t\022$\n\007include\030  \003(\0132\023.caffe.NetState"
    "Rule\022$\n\007exclude\030! \003(\0132\023.caffe.NetStateRu"
    "le\022/\n\004type\030\005 \001(\0162!.caffe.V1LayerParamete"
    "r.LayerType\022\037\n\005blobs\030\006 \003(\0132\020.caffe.BlobP"
    "roto\022\016\n\005param\030\351\007 \003(\t\022>\n\017blob_share_mode\030"
    "\352\007 \003(\0162$.caffe.V1LayerParameter.DimCheck"
    "Mode\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014weight_decay\030\010"
    " \003(\002\022\023\n\013loss_weight\030# \003(\002\0220\n\016accuracy_pa"
    "ram\030\033 \001(\0132\030.caffe.AccuracyParameter\022,\n\014a"
    "rgmax_param\030\027 \001(\0132\026.caffe.ArgMaxParamete"
    "r\022,\n\014concat_param\030\t \001(\0132\026.caffe.ConcatPa"
    "rameter\022\?\n\026contrastive_loss_param\030( \001(\0132"
    "\037.caffe.ContrastiveLossParameter\0226\n\021conv"
    "olution_param\030\n \001(\0132\033.caffe.ConvolutionP"
    "arameter\022(\n\ndata_param\030\013 \001(\0132\024.caffe.Dat"
    "aParameter\022.\n\rdropout_param\030\014 \001(\0132\027.caff"
    "e.DropoutParameter\0223\n\020dummy_data_param\030\032"
    " \001(\0132\031.caffe.DummyDataParameter\022.\n\reltwi"
    "se_param\030\030 \001(\0132\027.caffe.EltwiseParameter\022"
    "&\n\texp_param\030) \001(\0132\023.caffe.ExpParameter\022"
    "1\n\017hdf5_data_param\030\r \001(\0132\030.caffe.HDF5Dat"
    "aParameter\0225\n\021hdf5_output_param\030\016 \001(\0132\032."
    "caffe.HDF5OutputParameter\0223\n\020hinge_loss_"
    "param\030\035 \001(\0132\031.caffe.HingeLossParameter\0223"
    "\n\020image_data_param\030\017 \001(\0132\031.caffe.ImageDa"
    "taParameter\0229\n\023infogain_loss_param\030\020 \001(\013"
    "2\034.caffe.InfogainLossParameter\0229\n\023inner_"
    "product_param\030\021 \001(\0132\034.caffe.InnerProduct"
    "Parameter\022&\n\tlrn_param\030\022 \001(\0132\023.caffe.LRN"
    "Parameter\0225\n\021memory_data_param\030\026 \001(\0132\032.c"
    "affe.MemoryDataParameter\022&\n\tmvn_param\030\" "
    "\001(\0132\023.caffe.MVNParameter\022.\n\rpooling_para"
    "m\030\023 \001(\0132\027.caffe.PoolingParameter\022*\n\013powe"
    "r_param\030\025 \001(\0132\025.caffe.PowerParameter\022(\n\n"
    "relu_param\030\036 \001(\0132\024.caffe.ReLUParameter\022."
    "\n\rsigmoid_param\030& \001(\0132\027.caffe.SigmoidPar"
    "ameter\022.\n\rsoftmax_param\030\' \001(\0132\027.caffe.So"
    "ftmaxParameter\022*\n\013slice_param\030\037 \001(\0132\025.ca"
    "ffe.SliceParameter\022(\n\ntanh_param\030% \001(\0132\024"
    ".caffe.TanHParameter\0222\n\017threshold_param\030"
    "\031 \001(\0132\031.caffe.ThresholdParameter\0225\n\021wind"
    "ow_data_param\030\024 \001(\0132\032.caffe.WindowDataPa"
    "rameter\0227\n\017transform_param\030$ \001(\0132\036.caffe"
    ".TransformationParameter\022(\n\nloss_param\030*"
    " \001(\0132\024.caffe.LossParameter\022&\n\005layer\030\001 \001("
    "\0132\027.caffe.V0LayerParameter\022$\n\010bn_param\030+"
    " \001(\0132\022.caffe.BNParameter\022*\n\013local_param\030"
    ", \001(\0132\025.caffe.LocalParameter\022*\n\013prelu_pa"
    "ram\030- \001(\0132\025.caffe.PReLUParameter\0220\n\016insa"
    "nity_param\030. \001(\0132\030.caffe.InsanityParamet"
    "er\0227\n\022triplet_loss_param\030/ \001(\0132\033.caffe.T"
    "ripletLossParameter\0225\n\021roi_pooling_param"
    "\0300 \001(\0132\032.caffe.ROIPoolingParameter\022;\n\024el"
    "twise_affine_param\0301 \001(\0132\035.caffe.Eltwise"
    "AffineParameter\0223\n\020sub_region_param\0302 \001("
    "\0132\031.caffe.SubRegionParameter\022*\n\013noise_pa"
    "ram\0303 \001(\0132\025.caffe.NoiseParameter\"\316\005\n\tLay"
    "erType\022\010\n\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010ACCURACY"
    "\020\001\022\n\n\006ARGMAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONCAT\020\003\022\024\n\020"
    "CONTRASTIVE_LOSS\020%\022\017\n\013CONVOLUTION\020\004\022\010\n\004D"
    "ATA\020\005\022\021\n\rDECONVOLUTION\020\'\022\013\n\007DROPOUT\020\006\022\016\n"
    "\nDUMMY_DATA\020 \022\022\n\016EUCLIDEAN_LOSS\020\007\022\013\n\007ELT"
    "WISE\020\031\022\007\n\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\tHDF5_DAT"
    "A\020\t\022\017\n\013HDF5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020\034\022\n\n\006"
    "IM2COL\020\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAIN_LOS"
    "S\020\r\022\021\n\rINNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013MEMOR"
    "Y_DATA\020\035\022\035\n\031MULTINOMIAL_LOGISTIC_LOSS\020\020\022"
    "\007\n\003MVN\020\"\022\013\n\007POOLING\020\021\022\t\n\005POWER\020\032\022\010\n\004RELU"
    "\020\022\022\013\n\007SIGMOID\020\023\022\036\n\032SIGMOID_CROSS_ENTROPY"
    "_LOSS\020\033\022\013\n\007SILENCE\020$\022\013\n\007SOFTMAX\020\024\022\020\n\014SOF"
    "TMAX_LOSS\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020!\022\010\n\004TAN"
    "H\020\027\022\017\n\013WINDOW_DATA\020\030\022\r\n\tTHRESHOLD\020\037\022\t\n\005L"
    "OCAL\020)\022\006\n\002BN\020*\022\r\n\tNORMALIZE\020+\022\014\n\010INSANIT"
    "Y\020,\022\020\n\014TRIPLET_LOSS\020-\022\016\n\nROIPOOLING\020.\022\016\n"
    "\nBATCH_NORM\020/\022\022\n\016ELTWISE_AFFINE\0200\"*\n\014Dim"
    "CheckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\375\007"
    "\n\020V0LayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type"
    "\030\002 \001(\t\022\022\n\nnum_output\030\003 \001(\r\022\026\n\010biasterm\030\004"
    " \001(\010:\004true\022-\n\rweight_filler\030\005 \001(\0132\026.caff"
    "e.FillerParameter\022+\n\013bias_filler\030\006 \001(\0132\026"
    ".caffe.FillerParameter\022\016\n\003pad\030\007 \001(\r:\0010\022\022"
    "\n\nkernelsize\030\010 \001(\r\022\020\n\005group\030\t \001(\r:\0011\022\021\n\006"
    "stride\030\n \001(\r:\0011\0225\n\004pool\030\013 \001(\0162\".caffe.V0"
    "LayerParameter.PoolMethod:\003MAX\022\032\n\rdropou"
    "t_ratio\030\014 \001(\002:\0030.5\022\025\n\nlocal_size\030\r \001(\r:\001"
    "5\022\020\n\005alpha\030\016 \001(\002:\0011\022\022\n\004beta\030\017 \001(\002:\0040.75\022"
    "\014\n\001k\030\026 \001(\002:\0011\022\016\n\006source\030\020 \001(\t\022\020\n\005scale\030\021"
    " \001(\002:\0011\022\020\n\010meanfile\030\022 \001(\t\022\021\n\tbatchsize\030\023"
    " \001(\r\022\023\n\010cropsize\030\024 \001(\r:\0010\022\025\n\006mirror\030\025 \001("
    "\010:\005false\022\037\n\005blobs\0302 \003(\0132\020.caffe.BlobProt"
    "o\022\020\n\010blobs_lr\0303 \003(\002\022\024\n\014weight_decay\0304 \003("
    "\002\022\024\n\trand_skip\0305 \001(\r:\0010\022\035\n\020det_fg_thresh"
    "old\0306 \001(\002:\0030.5\022\035\n\020det_bg_threshold\0307 \001(\002"
    ":\0030.5\022\035\n\017det_fg_fraction\0308 \001(\002:\0040.25\022\032\n\017"
    "det_context_pad\030: \001(\r:\0010\022\033\n\rdet_crop_mod"
    "e\030; \001(\t:\004warp\022\022\n\007new_num\030< \001(\005:\0010\022\027\n\014new"
    "_channels\030= \001(\005:\0010\022\025\n\nnew_height\030> \001(\005:\001"
    "0\022\024\n\tnew_width\030\? \001(\005:\0010\022\035\n\016shuffle_image"
    "s\030@ \001(\010:\005false\022\025\n\nconcat_dim\030A \001(\r:\0011\0226\n"
    "\021hdf5_output_param\030\351\007 \001(\0132\032.caffe.HDF5Ou"
    "tputParameter\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003"
    "AVE\020\001\022\016\n\nSTOCHASTIC\020\002\")\n\024TripletLossPara"
    "meter\022\021\n\006margin\030\001 \001(\002:\0011\"Y\n\023ROIPoolingPa"
    "rameter\022\023\n\010pooled_h\030\001 \001(\r:\0010\022\023\n\010pooled_w"
    "\030\002 \001(\r:\0010\022\030\n\rspatial_scale\030\003 \001(\002:\0011\"2\n\021I"
    "nsanityParameter\022\r\n\002lb\030\001 \001(\002:\0015\022\016\n\002ub\030\002 "
    "\001(\002:\00210\"W\n\016PReLUParameter\022&\n\006filler\030\001 \001("
    "\0132\026.caffe.FillerParameter\022\035\n\016channel_sha"
    "red\030\002 \001(\010:\005false\"\213\002\n\013BNParameter\022,\n\014slop"
    "e_filler\030\001 \001(\0132\026.caffe.FillerParameter\022+"
    "\n\013bias_filler\030\002 \001(\0132\026.caffe.FillerParame"
    "ter\022\025\n\010momentum\030\003 \001(\002:\0030.9\022\022\n\003eps\030\004 \001(\002:"
    "\0051e-05\022\025\n\006frozen\030\005 \001(\010:\005false\0222\n\006engine\030"
    "\006 \001(\0162\031.caffe.BNParameter.Engine:\007DEFAUL"
    "T\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005C"
    "UDNN\020\002\"\321\001\n\016LocalParameter\022\022\n\nnum_output\030"
    "\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022\016\n\003pad\030\003 "
    "\001(\r:\0010\022\023\n\013kernel_size\030\004 \001(\r\022\021\n\006stride\030\006 "
    "\001(\r:\0011\022-\n\rweight_filler\030\007 \001(\0132\026.caffe.Fi"
    "llerParameter\022+\n\013bias_filler\030\010 \001(\0132\026.caf"
    "fe.FillerParameter\"\222\001\n\026EltwiseAffinePara"
    "meter\022,\n\014slope_filler\030\001 \001(\0132\026.caffe.Fill"
    "erParameter\022+\n\013bias_filler\030\002 \001(\0132\026.caffe"
    ".FillerParameter\022\035\n\016channel_shared\030\003 \001(\010"
    ":\005false\"}\n\022SubRegionParameter\022\025\n\rregion_"
    "height\030\001 \001(\r\022\024\n\014region_width\030\002 \001(\r\022\023\n\013da"
    "ta_height\030\003 \001(\r\022\022\n\ndata_width\030\004 \001(\r\022\021\n\006a"
    "s_dim\030\005 \001(\r:\0011\"T\n\016NoiseParameter\022\027\n\014gaus"
    "sian_std\030\001 \001(\002:\0010\022\030\n\runiform_range\030\002 \001(\002"
    ":\0010\022\017\n\004bias\030\003 \001(\002:\0010\"\251\001\n\020HotspotParamete"
    "r\022\027\n\014gaussian_std\030\001 \001(\002:\0011\022\030\n\routput_hei"
    "ght\030\002 \001(\r:\0010\022\027\n\014output_width\030\003 \001(\r:\0010\022\026\n"
    "\013data_height\030\004 \001(\r:\0010\022\025\n\ndata_width\030\005 \001("
    "\r:\0010\022\032\n\014mean_removed\030\006 \001(\010:\004true\"\254\001\n\023Pre"
    "dictBoxParameter\022\021\n\006stride\030\001 \001(\r:\0012\022\033\n\017r"
    "eceptive_field\030\002 \001(\r:\00212\022\021\n\003nms\030\003 \001(\010:\004t"
    "rue\022\033\n\routput_vector\030\004 \001(\010:\004true\022\034\n\017posi"
    "tive_thresh\030\005 \001(\002:\0030.5\022\027\n\tbbreg_exp\030\006 \001("
    "\010:\004true\"\323\003\n\020FCNDataParameter\022\026\n\ntemplate"
    "_h\030\001 \001(\r:\00248\022\026\n\ntemplate_w\030\002 \001(\r:\00242\022\031\n\013"
    "expand_left\030\003 \001(\002:\0040.25\022\032\n\014expand_right\030"
    "\004 \001(\002:\0040.25\022\027\n\nexpand_top\030\005 \001(\002:\0030.5\022\033\n\r"
    "expand_bottom\030\006 \001(\002:\0040.25\022\031\n\016roi_multipl"
    "y_h\030\007 \001(\002:\0015\022\031\n\016roi_multiply_w\030\010 \001(\002:\0015\022"
    "\027\n\nscale_step\030\t \001(\002:\0031.1\022\031\n\016scale_step_n"
    "um\030\n \001(\005:\0015\022\032\n\017gaussian_size_h\030\013 \001(\005:\0017\022"
    "\032\n\017gaussian_size_w\030\014 \001(\005:\0017\022\033\n\016gaussian_"
    "std_h\030\r \001(\002:\0031.5\022\033\n\016gaussian_std_w\030\016 \001(\002"
    ":\0031.5\022\026\n\007use_hog\030\017 \001(\010:\005false\022\030\n\rhog_cel"
    "l_size\030\020 \001(\005:\0014\022\024\n\007min_iou\030\021 \001(\002:\0030.8\"\204\001"
    "\n\023CenterLossParameter\022\022\n\nnum_output\030\001 \001("
    "\r\022-\n\rcenter_filler\030\002 \001(\0132\026.caffe.FillerP"
    "arameter\022\017\n\004axis\030\003 \001(\005:\0011\022\031\n\rdistance_ty"
    "pe\030\035 \001(\t:\002L2\"E\n\rFlipParameter\022\030\n\nflip_wi"
    "dth\030\001 \001(\010:\004true\022\032\n\013flip_height\030\002 \001(\010:\005fa"
    "lse\"e\n\022NormalizeParameter\022\032\n\016normalize_t"
    "ype\030\001 \001(\t:\002L2\022\033\n\014fix_gradient\030\002 \001(\010:\005fal"
    "se\022\026\n\007bp_norm\030\003 \001(\010:\005false\"\317\003\n\033GeneralCo"
    "ntrastiveParameter\022\032\n\017positive_margin\030\001 "
    "\001(\002:\0010\022\032\n\017negative_margin\030\002 \001(\002:\0011\022\032\n\017po"
    "sitive_weight\030\003 \001(\002:\0011\022\032\n\017negative_weigh"
    "t\030\004 \001(\002:\0011\022\035\n\022normalize_negative\030\005 \001(\002:\001"
    "0\022\"\n\027positive_outlier_thresh\030\006 \001(\002:\0014\022\025\n"
    "\006square\030\007 \001(\010:\005false\022 \n\021max_negative_onl"
    "y\030\010 \001(\010:\005false\022 \n\021max_positive_only\030\t \001("
    "\010:\005false\022\035\n\016positive_first\030\n \001(\010:\005false\022"
    "\037\n\024positive_upper_bound\030\013 \001(\002:\0011\022\"\n\023exp_"
    "negative_weight\030\014 \001(\010:\005false\022\034\n\radd_intr"
    "a_mae\030\r \001(\010:\005false\022 \n\023max_negative_margi"
    "n\030\016 \001(\002:\0031.2\"\244\001\n\031BatchContrastiveParamet"
    "er\022\032\n\017positive_margin\030\001 \001(\002:\0011\022\032\n\017negati"
    "ve_margin\030\002 \001(\002:\0011\022\032\n\017positive_weight\030\003 "
    "\001(\002:\0011\022\032\n\017negative_weight\030\004 \001(\002:\0011\022\027\n\010ma"
    "x_only\030\005 \001(\010:\005false\"\274\001\n\030SoftContrastiveP"
    "arameter\022\032\n\017positive_margin\030\001 \001(\002:\0011\022\032\n\017"
    "negative_margin\030\002 \001(\002:\0011\022\032\n\017positive_wei"
    "ght\030\003 \001(\002:\0011\022\032\n\017negative_weight\030\004 \001(\002:\0011"
    "\022\031\n\016exponent_scale\030\005 \001(\002:\0011\022\025\n\006square\030\006 "
    "\001(\010:\005false\"\342\001\n\027GeneralTripletParameter\022\023"
    "\n\006margin\030\001 \001(\002:\0030.2\022\035\n\017add_center_loss\030\002"
    " \001(\010:\004true\022\033\n\014hardest_only\030\003 \001(\010:\005false\022"
    "\035\n\016positive_first\030\004 \001(\010:\005false\022\037\n\024positi"
    "ve_upper_bound\030\005 \001(\002:\0011\022\032\n\017positive_weig"
    "ht\030\006 \001(\002:\0011\022\032\n\017negative_weight\030\007 \001(\002:\0011\""
    "\'\n\027SoftTruncationParameter\022\014\n\001c\030\001 \001(\002:\0012"
    "\"E\n\023TruncationParameter\022\026\n\013lower_bound\030\001"
    " \001(\002:\0010\022\026\n\013upper_bound\030\002 \001(\002:\0015\"\310\001\n\021Prop"
    "osalParameter\022\027\n\013feat_stride\030\001 \001(\r:\00216\022\025"
    "\n\tbase_size\030\002 \001(\r:\00216\022\024\n\010min_size\030\003 \001(\r:"
    "\00216\022\r\n\005ratio\030\004 \003(\002\022\r\n\005scale\030\005 \003(\002\022\032\n\014pre"
    "_nms_topn\030\006 \001(\r:\0046000\022\032\n\rpost_nms_topn\030\007"
    " \001(\r:\003300\022\027\n\nnms_thresh\030\010 \001(\002:\0030.7\"V\n\025PS"
    "ROIPoolingParameter\022\025\n\rspatial_scale\030\001 \002"
    "(\002\022\022\n\noutput_dim\030\002 \002(\005\022\022\n\ngroup_size\030\003 \002"
    "(\005\"\211\001\n\021PairwiseParameter\022;\n\toperation\030\001 "
    "\001(\0162#.caffe.PairwiseParameter.PairwiseOp"
    ":\003SUM\022\r\n\005coeff\030\002 \003(\002\"(\n\nPairwiseOp\022\007\n\003SU"
    "M\020\001\022\010\n\004PROD\020\002\022\007\n\003MAX\020\003\"*\n\021SmoothL1Parame"
    "ter\022\025\n\nturn_point\030\001 \001(\002:\0011\"!\n\020PermutePar"
    "ameter\022\r\n\005order\030\001 \003(\r\"0\n\014NCAParameter\022 \n"
    "\021min_negative_only\030\001 \001(\010:\005false\"\355\002\n Larg"
    "eMarginInnerProductParameter\022\022\n\nnum_outp"
    "ut\030\001 \001(\r\022M\n\004type\030\002 \001(\01627.caffe.LargeMarg"
    "inInnerProductParameter.LargeMarginType:"
    "\006SINGLE\022-\n\rweight_filler\030\003 \001(\0132\026.caffe.F"
    "illerParameter\022\017\n\004axis\030\004 \001(\005:\0011\022\017\n\004base\030"
    "\005 \001(\002:\0011\022\020\n\005gamma\030\006 \001(\002:\0010\022\020\n\005power\030\007 \001("
    "\002:\0011\022\024\n\titeration\030\010 \001(\005:\0010\022\025\n\nlambda_min"
    "\030\t \001(\002:\0010\"D\n\017LargeMarginType\022\n\n\006SINGLE\020\000"
    "\022\n\n\006DOUBLE\020\001\022\n\n\006TRIPLE\020\002\022\r\n\tQUADRUPLE\020\003\""
    "\243\003\n\035LabelSpecificRescaleParameter\022\032\n\017pos"
    "itive_weight\030\001 \001(\002:\0011\022\032\n\017negative_weight"
    "\030\002 \001(\002:\0011\022\037\n\024positive_lower_bound\030\003 \001(\002:"
    "\0010\022\037\n\024negative_upper_bound\030\004 \001(\002:\0010\022\033\n\014r"
    "escale_test\030\005 \001(\010:\005false\022\025\n\006for_ip\030\006 \001(\010"
    ":\005false\022\037\n\024positive_weight_base\030\007 \001(\002:\0010"
    "\022\020\n\005gamma\030\010 \001(\002:\0010\022\020\n\005power\030\t \001(\002:\0011\022\036\n\023"
    "positive_weight_min\030\n \001(\002:\0010\022\036\n\023positive"
    "_weight_max\030\013 \001(\002:\0010\022\024\n\titeration\030\014 \001(\r:"
    "\0010\022\027\n\010bias_fix\030\r \001(\010:\005false\022 \n\021power_on_"
    "positive\030\016 \001(\010:\005false\",\n\023InfimumLossPara"
    "mter\022\025\n\007infimum\030\001 \001(\002:\0040.25\"<\n\032OrdinalRe"
    "gressionParameter\022\t\n\001k\030\001 \001(\r\022\023\n\013weight_f"
    "ile\030\002 \001(\t\"\203\001\n\017ResizeParameter\022\016\n\006height\030"
    "\001 \001(\r\022\r\n\005width\030\002 \001(\r\022\036\n\017is_pyramid_test\030"
    "\003 \001(\010:\005false\022\030\n\020out_height_scale\030\004 \001(\002\022\027"
    "\n\017out_width_scale\030\005 \001(\002\"\331\002\n\033MarginInnerP"
    "roductParameter\022\022\n\nnum_output\030\001 \001(\r\022C\n\004t"
    "ype\030\002 \001(\0162-.caffe.MarginInnerProductPara"
    "meter.MarginType:\006SINGLE\022-\n\rweight_fille"
    "r\030\003 \001(\0132\026.caffe.FillerParameter\022\017\n\004axis\030"
    "\004 \001(\005:\0011\022\017\n\004base\030\005 \001(\002:\0011\022\020\n\005gamma\030\006 \001(\002"
    ":\0010\022\020\n\005power\030\007 \001(\002:\0011\022\024\n\titeration\030\010 \001(\005"
    ":\0010\022\025\n\nlambda_min\030\t \001(\002:\0010\"\?\n\nMarginType"
    "\022\n\n\006SINGLE\020\000\022\n\n\006DOUBLE\020\001\022\n\n\006TRIPLE\020\002\022\r\n\t"
    "QUADRUPLE\020\003\"T\n\031FeatureDecayLossParameter"
    "\022\033\n\017decay_threshold\030\001 \001(\002:\00220\022\032\n\013force_d"
    "ecay\030\002 \001(\010:\005false\"3\n\036ConfidencePenaltyLo"
    "ssParameter\022\021\n\004beta\030\001 \001(\002:\0030.1\"\254\001\n\022Focal"
    "LossParameter\0224\n\004type\030\001 \001(\0162\036.caffe.Foca"
    "lLossParameter.Type:\006ORIGIN\022\020\n\005gamma\030\002 \001"
    "(\002:\0012\022\020\n\005alpha\030\003 \001(\002:\0011\022\017\n\004beta\030\004 \001(\002:\0011"
    "\"+\n\004Type\022\n\n\006ORIGIN\020\000\022\n\n\006LINEAR\020\001\022\013\n\007ONEA"
    "DDP\020\002\"\304\002\n\034LabelSpecificMarginParameter\022B"
    "\n\004type\030\t \001(\0162..caffe.LabelSpecificMargin"
    "Parameter.MarginType:\004HARD\022\026\n\013margin_bas"
    "e\030\001 \001(\002:\0010\022\026\n\nmargin_max\030\002 \001(\002:\00210\022\020\n\005po"
    "wer\030\003 \001(\002:\0011\022\020\n\005gamma\030\004 \001(\002:\0011\022\024\n\titerat"
    "ion\030\005 \001(\005:\0010\022\033\n\014reset_margin\030\006 \001(\010:\005fals"
    "e\022\035\n\016margin_on_test\030\007 \001(\010:\005false\022\030\n\tauto"
    "_tune\030\010 \001(\010:\005false\" \n\nMarginType\022\010\n\004HARD"
    "\020\000\022\010\n\004SOFT\020\001\"\355\001\n\025ChannelScaleParameter\022\030"
    "\n\ndo_forward\030\001 \001(\010:\004true\022!\n\023do_backward_"
    "feature\030\002 \001(\010:\004true\022\037\n\021do_backward_scale"
    "\030\003 \001(\010:\004true\022\033\n\014global_scale\030\004 \001(\010:\005fals"
    "e\022\036\n\020max_global_scale\030\005 \001(\002:\0041000\022\033\n\020min"
    "_global_scale\030\006 \001(\002:\0010\022\034\n\021init_global_sc"
    "ale\030\007 \001(\002:\0011\"\231\003\n\034LabelSpecificAffinePara"
    "meter\022\025\n\nscale_base\030\001 \001(\002:\0011\022\026\n\013scale_ga"
    "mma\030\002 \001(\002:\0010\022\026\n\013scale_power\030\003 \001(\002:\0011\022\024\n\t"
    "scale_max\030\004 \001(\002:\0011\022\035\n\016transform_test\030\005 \001"
    "(\010:\005false\022\024\n\titeration\030\006 \001(\r:\0010\022\024\n\tbias_"
    "base\030\007 \001(\002:\0010\022\025\n\nbias_gamma\030\010 \001(\002:\0010\022\025\n\n"
    "bias_power\030\t \001(\002:\0011\022\023\n\010bias_max\030\n \001(\002:\0010"
    "\022\025\n\npower_base\030\013 \001(\002:\0011\022\026\n\013power_gamma\030\014"
    " \001(\002:\0010\022\027\n\013power_power\030\r \001(\002:\002-1\022\026\n\tpowe"
    "r_min\030\016 \001(\002:\0030.5\022\030\n\tauto_tune\030\017 \001(\010:\005fal"
    "se\022\024\n\005reset\030\020 \001(\010:\005false\"@\n LabelSpecifi"
    "cHardMarginParameter\022\034\n\017positive_weight\030"
    "\001 \001(\002:\0030.5\"[\n LabelSpecificStatisticsPar"
    "ameter\022\035\n\017scale_for_angle\030\001 \001(\010:\004true\022\030\n"
    "\014scale_factor\030\002 \001(\002:\00230\"\317\001\n\031LabelSpecifi"
    "cAddParameter\022\017\n\004bias\030\001 \001(\002:\0010\022\035\n\016transf"
    "orm_test\030\002 \001(\010:\005false\022\024\n\tbias_base\030\003 \001(\002"
    ":\0010\022\025\n\nbias_gamma\030\004 \001(\002:\0010\022\025\n\nbias_power"
    "\030\005 \001(\002:\0011\022\023\n\010bias_min\030\006 \001(\002:\0010\022\023\n\010bias_m"
    "ax\030\007 \001(\002:\0010\022\024\n\titeration\030\010 \001(\r:\0010*\034\n\005Pha"
    "se\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001", 27703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe.proto", &protobuf_RegisterTypes);
  BlobShape::default_instance_ = new BlobShape();
  BlobProto::default_instance_ = new BlobProto();
  BlobProtoVector::default_instance_ = new BlobProtoVector();
  Datum::default_instance_ = new Datum();
  FillerParameter::_default_type_ =
      new ::std::string("constant", 8);
  FillerParameter::default_instance_ = new FillerParameter();
  NetParameter::default_instance_ = new NetParameter();
  SolverParameter::_default_regularization_type_ =
      new ::std::string("L2", 2);
  SolverParameter::_default_type_ =
      new ::std::string("SGD", 3);
  SolverParameter::default_instance_ = new SolverParameter();
  SolverState::default_instance_ = new SolverState();
  NetState::default_instance_ = new NetState();
  NetStateRule::default_instance_ = new NetStateRule();
  ParamSpec::default_instance_ = new ParamSpec();
  LayerParameter::default_instance_ = new LayerParameter();
  TransformationParameter::default_instance_ = new TransformationParameter();
  LossParameter::default_instance_ = new LossParameter();
  AccuracyParameter::default_instance_ = new AccuracyParameter();
  ArgMaxParameter::default_instance_ = new ArgMaxParameter();
  ConcatParameter::default_instance_ = new ConcatParameter();
  BatchNormParameter::default_instance_ = new BatchNormParameter();
  BiasParameter::default_instance_ = new BiasParameter();
  ContrastiveLossParameter::default_instance_ = new ContrastiveLossParameter();
  ConvolutionParameter::default_instance_ = new ConvolutionParameter();
  CropParameter::default_instance_ = new CropParameter();
  DataParameter::default_instance_ = new DataParameter();
  DropoutParameter::default_instance_ = new DropoutParameter();
  DummyDataParameter::default_instance_ = new DummyDataParameter();
  EltwiseParameter::default_instance_ = new EltwiseParameter();
  ELUParameter::default_instance_ = new ELUParameter();
  EmbedParameter::default_instance_ = new EmbedParameter();
  ExpParameter::default_instance_ = new ExpParameter();
  FlattenParameter::default_instance_ = new FlattenParameter();
  HDF5DataParameter::default_instance_ = new HDF5DataParameter();
  HDF5OutputParameter::default_instance_ = new HDF5OutputParameter();
  HingeLossParameter::default_instance_ = new HingeLossParameter();
  ImageDataParameter::default_instance_ = new ImageDataParameter();
  InfogainLossParameter::default_instance_ = new InfogainLossParameter();
  InnerProductParameter::default_instance_ = new InnerProductParameter();
  InnerDistanceParameter::_default_distance_type_ =
      new ::std::string("L2", 2);
  InnerDistanceParameter::default_instance_ = new InnerDistanceParameter();
  InputParameter::default_instance_ = new InputParameter();
  LogParameter::default_instance_ = new LogParameter();
  LRNParameter::default_instance_ = new LRNParameter();
  MemoryDataParameter::default_instance_ = new MemoryDataParameter();
  MVNParameter::default_instance_ = new MVNParameter();
  ParameterParameter::default_instance_ = new ParameterParameter();
  PoolingParameter::default_instance_ = new PoolingParameter();
  PowerParameter::default_instance_ = new PowerParameter();
  PythonParameter::default_instance_ = new PythonParameter();
  RecurrentParameter::default_instance_ = new RecurrentParameter();
  ReductionParameter::default_instance_ = new ReductionParameter();
  ReLUParameter::default_instance_ = new ReLUParameter();
  ReshapeParameter::default_instance_ = new ReshapeParameter();
  ScaleParameter::default_instance_ = new ScaleParameter();
  SigmoidParameter::default_instance_ = new SigmoidParameter();
  SliceParameter::default_instance_ = new SliceParameter();
  SoftmaxParameter::_default_normalize_type_ =
      new ::std::string("Softmax", 7);
  SoftmaxParameter::default_instance_ = new SoftmaxParameter();
  TanHParameter::default_instance_ = new TanHParameter();
  TileParameter::default_instance_ = new TileParameter();
  ThresholdParameter::default_instance_ = new ThresholdParameter();
  MILParameter::default_instance_ = new MILParameter();
  WindowDataParameter::_default_crop_mode_ =
      new ::std::string("warp", 4);
  WindowDataParameter::default_instance_ = new WindowDataParameter();
  MILDataParameter::default_instance_ = new MILDataParameter();
  SPPParameter::default_instance_ = new SPPParameter();
  V1LayerParameter::default_instance_ = new V1LayerParameter();
  V0LayerParameter::_default_det_crop_mode_ =
      new ::std::string("warp", 4);
  V0LayerParameter::default_instance_ = new V0LayerParameter();
  TripletLossParameter::default_instance_ = new TripletLossParameter();
  ROIPoolingParameter::default_instance_ = new ROIPoolingParameter();
  InsanityParameter::default_instance_ = new InsanityParameter();
  PReLUParameter::default_instance_ = new PReLUParameter();
  BNParameter::default_instance_ = new BNParameter();
  LocalParameter::default_instance_ = new LocalParameter();
  EltwiseAffineParameter::default_instance_ = new EltwiseAffineParameter();
  SubRegionParameter::default_instance_ = new SubRegionParameter();
  NoiseParameter::default_instance_ = new NoiseParameter();
  HotspotParameter::default_instance_ = new HotspotParameter();
  PredictBoxParameter::default_instance_ = new PredictBoxParameter();
  FCNDataParameter::default_instance_ = new FCNDataParameter();
  CenterLossParameter::_default_distance_type_ =
      new ::std::string("L2", 2);
  CenterLossParameter::default_instance_ = new CenterLossParameter();
  FlipParameter::default_instance_ = new FlipParameter();
  NormalizeParameter::_default_normalize_type_ =
      new ::std::string("L2", 2);
  NormalizeParameter::default_instance_ = new NormalizeParameter();
  GeneralContrastiveParameter::default_instance_ = new GeneralContrastiveParameter();
  BatchContrastiveParameter::default_instance_ = new BatchContrastiveParameter();
  SoftContrastiveParameter::default_instance_ = new SoftContrastiveParameter();
  GeneralTripletParameter::default_instance_ = new GeneralTripletParameter();
  SoftTruncationParameter::default_instance_ = new SoftTruncationParameter();
  TruncationParameter::default_instance_ = new TruncationParameter();
  ProposalParameter::default_instance_ = new ProposalParameter();
  PSROIPoolingParameter::default_instance_ = new PSROIPoolingParameter();
  PairwiseParameter::default_instance_ = new PairwiseParameter();
  SmoothL1Parameter::default_instance_ = new SmoothL1Parameter();
  PermuteParameter::default_instance_ = new PermuteParameter();
  NCAParameter::default_instance_ = new NCAParameter();
  LargeMarginInnerProductParameter::default_instance_ = new LargeMarginInnerProductParameter();
  LabelSpecificRescaleParameter::default_instance_ = new LabelSpecificRescaleParameter();
  InfimumLossParamter::default_instance_ = new InfimumLossParamter();
  OrdinalRegressionParameter::default_instance_ = new OrdinalRegressionParameter();
  ResizeParameter::default_instance_ = new ResizeParameter();
  MarginInnerProductParameter::default_instance_ = new MarginInnerProductParameter();
  FeatureDecayLossParameter::default_instance_ = new FeatureDecayLossParameter();
  ConfidencePenaltyLossParameter::default_instance_ = new ConfidencePenaltyLossParameter();
  FocalLossParameter::default_instance_ = new FocalLossParameter();
  LabelSpecificMarginParameter::default_instance_ = new LabelSpecificMarginParameter();
  ChannelScaleParameter::default_instance_ = new ChannelScaleParameter();
  LabelSpecificAffineParameter::default_instance_ = new LabelSpecificAffineParameter();
  LabelSpecificHardMarginParameter::default_instance_ = new LabelSpecificHardMarginParameter();
  LabelSpecificStatisticsParameter::default_instance_ = new LabelSpecificStatisticsParameter();
  LabelSpecificAddParameter::default_instance_ = new LabelSpecificAddParameter();
  BlobShape::default_instance_->InitAsDefaultInstance();
  BlobProto::default_instance_->InitAsDefaultInstance();
  BlobProtoVector::default_instance_->InitAsDefaultInstance();
  Datum::default_instance_->InitAsDefaultInstance();
  FillerParameter::default_instance_->InitAsDefaultInstance();
  NetParameter::default_instance_->InitAsDefaultInstance();
  SolverParameter::default_instance_->InitAsDefaultInstance();
  SolverState::default_instance_->InitAsDefaultInstance();
  NetState::default_instance_->InitAsDefaultInstance();
  NetStateRule::default_instance_->InitAsDefaultInstance();
  ParamSpec::default_instance_->InitAsDefaultInstance();
  LayerParameter::default_instance_->InitAsDefaultInstance();
  TransformationParameter::default_instance_->InitAsDefaultInstance();
  LossParameter::default_instance_->InitAsDefaultInstance();
  AccuracyParameter::default_instance_->InitAsDefaultInstance();
  ArgMaxParameter::default_instance_->InitAsDefaultInstance();
  ConcatParameter::default_instance_->InitAsDefaultInstance();
  BatchNormParameter::default_instance_->InitAsDefaultInstance();
  BiasParameter::default_instance_->InitAsDefaultInstance();
  ContrastiveLossParameter::default_instance_->InitAsDefaultInstance();
  ConvolutionParameter::default_instance_->InitAsDefaultInstance();
  CropParameter::default_instance_->InitAsDefaultInstance();
  DataParameter::default_instance_->InitAsDefaultInstance();
  DropoutParameter::default_instance_->InitAsDefaultInstance();
  DummyDataParameter::default_instance_->InitAsDefaultInstance();
  EltwiseParameter::default_instance_->InitAsDefaultInstance();
  ELUParameter::default_instance_->InitAsDefaultInstance();
  EmbedParameter::default_instance_->InitAsDefaultInstance();
  ExpParameter::default_instance_->InitAsDefaultInstance();
  FlattenParameter::default_instance_->InitAsDefaultInstance();
  HDF5DataParameter::default_instance_->InitAsDefaultInstance();
  HDF5OutputParameter::default_instance_->InitAsDefaultInstance();
  HingeLossParameter::default_instance_->InitAsDefaultInstance();
  ImageDataParameter::default_instance_->InitAsDefaultInstance();
  InfogainLossParameter::default_instance_->InitAsDefaultInstance();
  InnerProductParameter::default_instance_->InitAsDefaultInstance();
  InnerDistanceParameter::default_instance_->InitAsDefaultInstance();
  InputParameter::default_instance_->InitAsDefaultInstance();
  LogParameter::default_instance_->InitAsDefaultInstance();
  LRNParameter::default_instance_->InitAsDefaultInstance();
  MemoryDataParameter::default_instance_->InitAsDefaultInstance();
  MVNParameter::default_instance_->InitAsDefaultInstance();
  ParameterParameter::default_instance_->InitAsDefaultInstance();
  PoolingParameter::default_instance_->InitAsDefaultInstance();
  PowerParameter::default_instance_->InitAsDefaultInstance();
  PythonParameter::default_instance_->InitAsDefaultInstance();
  RecurrentParameter::default_instance_->InitAsDefaultInstance();
  ReductionParameter::default_instance_->InitAsDefaultInstance();
  ReLUParameter::default_instance_->InitAsDefaultInstance();
  ReshapeParameter::default_instance_->InitAsDefaultInstance();
  ScaleParameter::default_instance_->InitAsDefaultInstance();
  SigmoidParameter::default_instance_->InitAsDefaultInstance();
  SliceParameter::default_instance_->InitAsDefaultInstance();
  SoftmaxParameter::default_instance_->InitAsDefaultInstance();
  TanHParameter::default_instance_->InitAsDefaultInstance();
  TileParameter::default_instance_->InitAsDefaultInstance();
  ThresholdParameter::default_instance_->InitAsDefaultInstance();
  MILParameter::default_instance_->InitAsDefaultInstance();
  WindowDataParameter::default_instance_->InitAsDefaultInstance();
  MILDataParameter::default_instance_->InitAsDefaultInstance();
  SPPParameter::default_instance_->InitAsDefaultInstance();
  V1LayerParameter::default_instance_->InitAsDefaultInstance();
  V0LayerParameter::default_instance_->InitAsDefaultInstance();
  TripletLossParameter::default_instance_->InitAsDefaultInstance();
  ROIPoolingParameter::default_instance_->InitAsDefaultInstance();
  InsanityParameter::default_instance_->InitAsDefaultInstance();
  PReLUParameter::default_instance_->InitAsDefaultInstance();
  BNParameter::default_instance_->InitAsDefaultInstance();
  LocalParameter::default_instance_->InitAsDefaultInstance();
  EltwiseAffineParameter::default_instance_->InitAsDefaultInstance();
  SubRegionParameter::default_instance_->InitAsDefaultInstance();
  NoiseParameter::default_instance_->InitAsDefaultInstance();
  HotspotParameter::default_instance_->InitAsDefaultInstance();
  PredictBoxParameter::default_instance_->InitAsDefaultInstance();
  FCNDataParameter::default_instance_->InitAsDefaultInstance();
  CenterLossParameter::default_instance_->InitAsDefaultInstance();
  FlipParameter::default_instance_->InitAsDefaultInstance();
  NormalizeParameter::default_instance_->InitAsDefaultInstance();
  GeneralContrastiveParameter::default_instance_->InitAsDefaultInstance();
  BatchContrastiveParameter::default_instance_->InitAsDefaultInstance();
  SoftContrastiveParameter::default_instance_->InitAsDefaultInstance();
  GeneralTripletParameter::default_instance_->InitAsDefaultInstance();
  SoftTruncationParameter::default_instance_->InitAsDefaultInstance();
  TruncationParameter::default_instance_->InitAsDefaultInstance();
  ProposalParameter::default_instance_->InitAsDefaultInstance();
  PSROIPoolingParameter::default_instance_->InitAsDefaultInstance();
  PairwiseParameter::default_instance_->InitAsDefaultInstance();
  SmoothL1Parameter::default_instance_->InitAsDefaultInstance();
  PermuteParameter::default_instance_->InitAsDefaultInstance();
  NCAParameter::default_instance_->InitAsDefaultInstance();
  LargeMarginInnerProductParameter::default_instance_->InitAsDefaultInstance();
  LabelSpecificRescaleParameter::default_instance_->InitAsDefaultInstance();
  InfimumLossParamter::default_instance_->InitAsDefaultInstance();
  OrdinalRegressionParameter::default_instance_->InitAsDefaultInstance();
  ResizeParameter::default_instance_->InitAsDefaultInstance();
  MarginInnerProductParameter::default_instance_->InitAsDefaultInstance();
  FeatureDecayLossParameter::default_instance_->InitAsDefaultInstance();
  ConfidencePenaltyLossParameter::default_instance_->InitAsDefaultInstance();
  FocalLossParameter::default_instance_->InitAsDefaultInstance();
  LabelSpecificMarginParameter::default_instance_->InitAsDefaultInstance();
  ChannelScaleParameter::default_instance_->InitAsDefaultInstance();
  LabelSpecificAffineParameter::default_instance_->InitAsDefaultInstance();
  LabelSpecificHardMarginParameter::default_instance_->InitAsDefaultInstance();
  LabelSpecificStatisticsParameter::default_instance_->InitAsDefaultInstance();
  LabelSpecificAddParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe_2eproto {
  StaticDescriptorInitializer_caffe_2eproto() {
    protobuf_AddDesc_caffe_2eproto();
  }
} static_descriptor_initializer_caffe_2eproto_;
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phase_descriptor_;
}
bool Phase_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobShape::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobShape::BlobShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobShape)
}

void BlobShape::InitAsDefaultInstance() {
}

BlobShape::BlobShape(const BlobShape& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:caffe.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShape_descriptor_;
}

const BlobShape& BlobShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BlobShape* BlobShape::default_instance_ = NULL;

BlobShape* BlobShape::New(::google::protobuf::Arena* arena) const {
  BlobShape* n = new BlobShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobShape)
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dim = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobShape)
  return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dim(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dim(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
  return target;
}

int BlobShape::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobShape)
  int total_size = 0;

  // repeated int64 dim = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobShape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlobShape* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobShape)
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobShape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  dim_.MergeFrom(from.dim_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {

  return true;
}

void BlobShape::Swap(BlobShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobShape::InternalSwap(BlobShape* other) {
  dim_.UnsafeArenaSwap(&other->dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShape_descriptor_;
  metadata.reflection = BlobShape_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
int BlobShape::dim_size() const {
  return dim_.size();
}
void BlobShape::clear_dim() {
  dim_.Clear();
}
 ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
 void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
 void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kDoubleDiffFieldNumber;
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProto)
}

void BlobProto::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(&::caffe::BlobShape::default_instance());
}

BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProto_descriptor_;
}

const BlobProto& BlobProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BlobProto* BlobProto::default_instance_ = NULL;

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
  BlobProto* n = new BlobProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BlobProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlobProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 225u) {
    ZR_(num_, height_);
    if (has_shape()) {
      if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
    }
  }
  width_ = 0;

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_shape;
        break;
      }

      // optional .caffe.BlobShape shape = 7;
      case 7: {
        if (tag == 58) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_double_data;
        break;
      }

      // repeated double double_data = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (tag == 65) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_double_diff;
        break;
      }

      // repeated double double_diff = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_double_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_diff())));
        } else if (tag == 73) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74, input, this->mutable_double_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->diff(i), output);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->shape_, output);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_data(i), output);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_diff(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->shape_, target);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data(i), target);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_diff(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
  return target;
}

int BlobProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 225u) {
    // optional .caffe.BlobShape shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // repeated float data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_data = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_diff = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlobProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProto)
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  double_data_.MergeFrom(from.double_data_);
  double_diff_.MergeFrom(from.double_diff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {

  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
  std::swap(shape_, other->shape_);
  data_.UnsafeArenaSwap(&other->data_);
  diff_.UnsafeArenaSwap(&other->diff_);
  double_data_.UnsafeArenaSwap(&other->double_data_);
  double_diff_.UnsafeArenaSwap(&other->double_diff_);
  std::swap(num_, other->num_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProto_descriptor_;
  metadata.reflection = BlobProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// optional .caffe.BlobShape shape = 7;
bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
int BlobProto::data_size() const {
  return data_.size();
}
void BlobProto::clear_data() {
  data_.Clear();
}
 float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
 void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
 void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
 const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
 ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
int BlobProto::diff_size() const {
  return diff_.size();
}
void BlobProto::clear_diff() {
  diff_.Clear();
}
 float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
 void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
 void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
 const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
 ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
int BlobProto::double_data_size() const {
  return double_data_.size();
}
void BlobProto::clear_double_data() {
  double_data_.Clear();
}
 double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
 void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
 void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
 const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
 ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
 double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
 void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
 void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
 const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
 ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
 void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
 ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
 void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
 void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
 void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProtoVector::kBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProtoVector::BlobProtoVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::InitAsDefaultInstance() {
}

BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProtoVector::~BlobProtoVector() {
  // @@protoc_insertion_point(destructor:caffe.BlobProtoVector)
  SharedDtor();
}

void BlobProtoVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobProtoVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProtoVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProtoVector_descriptor_;
}

const BlobProtoVector& BlobProtoVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BlobProtoVector* BlobProtoVector::default_instance_ = NULL;

BlobProtoVector* BlobProtoVector::New(::google::protobuf::Arena* arena) const {
  BlobProtoVector* n = new BlobProtoVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProtoVector::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProtoVector)
  blobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobProtoVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProtoVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobProto blobs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProtoVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProtoVector)
  return false;
#undef DO_
}

void BlobProtoVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProtoVector)
  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProtoVector)
}

::google::protobuf::uint8* BlobProtoVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProtoVector)
  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blobs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProtoVector)
  return target;
}

int BlobProtoVector::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProtoVector)
  int total_size = 0;

  // repeated .caffe.BlobProto blobs = 1;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProtoVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProtoVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlobProtoVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProtoVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProtoVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProtoVector)
    MergeFrom(*source);
  }
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProtoVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  blobs_.MergeFrom(from.blobs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BlobProtoVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {

  return true;
}

void BlobProtoVector::Swap(BlobProtoVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProtoVector::InternalSwap(BlobProtoVector* other) {
  blobs_.UnsafeArenaSwap(&other->blobs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProtoVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProtoVector_descriptor_;
  metadata.reflection = BlobProtoVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Datum)
}

void Datum::InitAsDefaultInstance() {
}

Datum::Datum(const Datum& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Datum)
}

void Datum::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
  encoded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:caffe.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datum_descriptor_;
}

const Datum& Datum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

Datum* Datum::default_instance_ = NULL;

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Datum)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Datum, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Datum*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 95u) {
    ZR_(channels_, height_);
    ZR_(width_, label_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    encoded_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  float_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_label;
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (tag == 40) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (tag == 53) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_float_data())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        if (input->ExpectTag(56)) goto parse_encoded;
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_encoded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
          set_has_encoded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Datum)
}

::google::protobuf::uint8* Datum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->float_data(i), target);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Datum)
  return target;
}

int Datum::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Datum)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 95u) {
    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  // repeated float float_data = 6;
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    total_size += 1 * this->float_data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Datum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Datum* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Datum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Datum)
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Datum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  float_data_.MergeFrom(from.float_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_encoded()) {
      set_encoded(from.encoded());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {

  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  data_.Swap(&other->data_);
  std::swap(label_, other->label_);
  float_data_.UnsafeArenaSwap(&other->float_data_);
  std::swap(encoded_, other->encoded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datum_descriptor_;
  metadata.reflection = Datum_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// optional int32 channels = 1;
bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
 ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
 void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
 void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
 void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
 void Datum::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
 void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
 ::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
 ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
 void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
int Datum::float_data_size() const {
  return float_data_.size();
}
void Datum::clear_float_data() {
  float_data_.Clear();
}
 float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
 void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
 void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
 const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
 ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
 bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
 void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerParameter_VarianceNorm_descriptor_;
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FillerParameter_VarianceNorm FillerParameter::FAN_IN;
const FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
const FillerParameter_VarianceNorm FillerParameter::AVERAGE;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
const int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* FillerParameter::_default_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
const int FillerParameter::kAlphaFieldNumber;
const int FillerParameter::kSparseFieldNumber;
const int FillerParameter::kVarianceNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillerParameter::FillerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FillerParameter)
}

void FillerParameter::InitAsDefaultInstance() {
}

FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(_default_type_);
  value_ = 0;
  min_ = 0;
  max_ = 1;
  mean_ = 0;
  std_ = 1;
  alpha_ = 0;
  sparse_ = -1;
  variance_norm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:caffe.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  type_.DestroyNoArena(_default_type_);
  if (this != default_instance_) {
  }
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerParameter_descriptor_;
}

const FillerParameter& FillerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FillerParameter* FillerParameter::default_instance_ = NULL;

FillerParameter* FillerParameter::New(::google::protobuf::Arena* arena) const {
  FillerParameter* n = new FillerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FillerParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FillerParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FillerParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(value_, min_);
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    max_ = 1;
    mean_ = 0;
    std_ = 1;
    alpha_ = 0;
    sparse_ = -1;
  }
  variance_norm_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FillerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "constant"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FillerParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_min;
        break;
      }

      // optional float min = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max;
        break;
      }

      // optional float max = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean;
        break;
      }

      // optional float mean = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_std;
        break;
      }

      // optional float std = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sparse;
        break;
      }

      // optional int32 sparse = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_sparse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sparse_)));
          set_has_sparse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_variance_norm;
        break;
      }

      // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      case 8: {
        if (tag == 64) {
         parse_variance_norm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::FillerParameter_VarianceNorm_IsValid(value)) {
            set_variance_norm(static_cast< ::caffe::FillerParameter_VarianceNorm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_alpha;
        break;
      }

      // optional float alpha = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FillerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
  return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sparse(), output);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (has_variance_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->variance_norm(), output);
  }

  // optional float alpha = 9 [default = 0];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sparse(), target);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (has_variance_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->variance_norm(), target);
  }

  // optional float alpha = 9 [default = 0];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
  return target;
}

int FillerParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FillerParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 1 [default = "constant"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float max = 4 [default = 1];
    if (has_max()) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 6 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }

    // optional float alpha = 9 [default = 0];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional int32 sparse = 7 [default = -1];
    if (has_sparse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sparse());
    }

  }
  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (has_variance_norm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->variance_norm());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FillerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FillerParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FillerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FillerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FillerParameter)
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FillerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_sparse()) {
      set_sparse(from.sparse());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_variance_norm()) {
      set_variance_norm(from.variance_norm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {

  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillerParameter::InternalSwap(FillerParameter* other) {
  type_.Swap(&other->type_);
  std::swap(value_, other->value_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(mean_, other->mean_);
  std::swap(std_, other->std_);
  std::swap(alpha_, other->alpha_);
  std::swap(sparse_, other->sparse_);
  std::swap(variance_norm_, other->variance_norm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillerParameter_descriptor_;
  metadata.reflection = FillerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillerParameter

// optional string type = 1 [default = "constant"];
bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
 const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena(_default_type_);
}
 void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
 void FillerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
 void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
 ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(_default_type_);
}
 ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
 void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
 void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
 float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
 void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
 float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
 void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
 float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
 void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
 float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
 void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional float alpha = 9 [default = 0];
bool FillerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FillerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000040u;
}
void FillerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000040u;
}
void FillerParameter::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
 float FillerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.alpha)
  return alpha_;
}
 void FillerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.alpha)
}

// optional int32 sparse = 7 [default = -1];
bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000080u;
}
void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000080u;
}
void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
 ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
 void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000100u;
}
void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000100u;
}
void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
 ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
 void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kNameFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputShapeFieldNumber;
const int NetParameter::kInputDimFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kStateFieldNumber;
const int NetParameter::kDebugInfoFieldNumber;
const int NetParameter::kLayerFieldNumber;
const int NetParameter::kLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameter)
}

void NetParameter::InitAsDefaultInstance() {
  state_ = const_cast< ::caffe::NetState*>(&::caffe::NetState::default_instance());
}

NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  force_backward_ = false;
  state_ = NULL;
  debug_info_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:caffe.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete state_;
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParameter_descriptor_;
}

const NetParameter& NetParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NetParameter* NetParameter::default_instance_ = NULL;

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
  NetParameter* n = new NetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 113u) {
    ZR_(force_backward_, debug_info_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_state()) {
      if (state_ != NULL) state_->::caffe::NetState::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  input_.Clear();
  input_shape_.Clear();
  input_dim_.Clear();
  layer_.Clear();
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .caffe.V1LayerParameter layers = 2;
      case 2: {
        if (tag == 18) {
         parse_layers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_layers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (tag == 26) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input;
        if (input->ExpectTag(32)) goto parse_input_dim;
        break;
      }

      // repeated int32 input_dim = 4;
      case 4: {
        if (tag == 32) {
         parse_input_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_input_dim())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_input_dim;
        if (input->ExpectTag(40)) goto parse_force_backward;
        break;
      }

      // optional bool force_backward = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_force_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_backward_)));
          set_has_force_backward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_state;
        break;
      }

      // optional .caffe.NetState state = 6;
      case 6: {
        if (tag == 50) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_debug_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
          set_has_debug_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_input_shape;
        break;
      }

      // repeated .caffe.BlobShape input_shape = 8;
      case 8: {
        if (tag == 66) {
         parse_input_shape:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_input_shape;
        if (input->ExpectTag(802)) goto parse_loop_layer;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.LayerParameter layer = 100;
      case 100: {
        if (tag == 802) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_loop_layer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->input_dim(i), output);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->state_, output);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_info(), output);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->input_shape(i), output);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->input_dim(i), target);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->state_, target);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_info(), target);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->input_shape(i), target);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->layer(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
  return target;
}

int NetParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 113u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool force_backward = 5 [default = false];
    if (has_force_backward()) {
      total_size += 1 + 1;
    }

    // optional .caffe.NetState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_);
    }

    // optional bool debug_info = 7 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

  }
  // repeated string input = 3;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated .caffe.BlobShape input_shape = 8;
  total_size += 1 * this->input_shape_size();
  for (int i = 0; i < this->input_shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_shape(i));
  }

  // repeated int32 input_dim = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->input_dim(i));
    }
    total_size += 1 * this->input_dim_size() + data_size;
  }

  // repeated .caffe.LayerParameter layer = 100;
  total_size += 2 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  input_.MergeFrom(from.input_);
  input_shape_.MergeFrom(from.input_shape_);
  input_dim_.MergeFrom(from.input_dim_);
  layer_.MergeFrom(from.layer_);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_force_backward()) {
      set_force_backward(from.force_backward());
    }
    if (from.has_state()) {
      mutable_state()->::caffe::NetState::MergeFrom(from.state());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
  name_.Swap(&other->name_);
  input_.UnsafeArenaSwap(&other->input_);
  input_shape_.UnsafeArenaSwap(&other->input_shape_);
  input_dim_.UnsafeArenaSwap(&other->input_dim_);
  std::swap(force_backward_, other->force_backward_);
  std::swap(state_, other->state_);
  std::swap(debug_info_, other->debug_info_);
  layer_.UnsafeArenaSwap(&other->layer_);
  layers_.UnsafeArenaSwap(&other->layers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParameter_descriptor_;
  metadata.reflection = NetParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// optional string name = 1;
bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
 void NetParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
 void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
 ::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
int NetParameter::input_size() const {
  return input_.size();
}
void NetParameter::clear_input() {
  input_.Clear();
}
 const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
 ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
 void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
 void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
 void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
 ::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
 void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
 void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
 void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
 ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
 void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
 void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000010u;
}
void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
 bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
 void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
 bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
 void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
int NetParameter::layer_size() const {
  return layer_.size();
}
void NetParameter::clear_layer() {
  layer_.Clear();
}
const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
int NetParameter::layers_size() const {
  return layers_.size();
}
void NetParameter::clear_layers() {
  layers_.Clear();
}
const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SnapshotFormat_descriptor_;
}
bool SolverParameter_SnapshotFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SnapshotFormat SolverParameter::HDF5;
const SolverParameter_SnapshotFormat SolverParameter::BINARYPROTO;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MIN;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MAX;
const int SolverParameter::SnapshotFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SolverMode_descriptor_;
}
bool SolverParameter_SolverMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverMode SolverParameter::CPU;
const SolverParameter_SolverMode SolverParameter::GPU;
const SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
const SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
const int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SolverType_descriptor_;
}
bool SolverParameter_SolverType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverType SolverParameter::SGD;
const SolverParameter_SolverType SolverParameter::NESTEROV;
const SolverParameter_SolverType SolverParameter::ADAGRAD;
const SolverParameter_SolverType SolverParameter::RMSPROP;
const SolverParameter_SolverType SolverParameter::ADADELTA;
const SolverParameter_SolverType SolverParameter::ADAM;
const SolverParameter_SolverType SolverParameter::SolverType_MIN;
const SolverParameter_SolverType SolverParameter::SolverType_MAX;
const int SolverParameter::SolverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* SolverParameter::_default_regularization_type_ = NULL;
::std::string* SolverParameter::_default_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetParamFieldNumber;
const int SolverParameter::kTrainNetFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kTrainNetParamFieldNumber;
const int SolverParameter::kTestNetParamFieldNumber;
const int SolverParameter::kTrainStateFieldNumber;
const int SolverParameter::kTestStateFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kTestComputeLossFieldNumber;
const int SolverParameter::kTestInitializationFieldNumber;
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kAverageLossFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kLrPolicyFieldNumber;
const int SolverParameter::kGammaFieldNumber;
const int SolverParameter::kPowerFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kRegularizationTypeFieldNumber;
const int SolverParameter::kStepsizeFieldNumber;
const int SolverParameter::kStepvalueFieldNumber;
const int SolverParameter::kClipGradientsFieldNumber;
const int SolverParameter::kClampWeightsLowerFieldNumber;
const int SolverParameter::kClampWeightsUpperFieldNumber;
const int SolverParameter::kClipWeightsFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSnapshotDiffFieldNumber;
const int SolverParameter::kSnapshotFormatFieldNumber;
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kDeviceIdFieldNumber;
const int SolverParameter::kRandomSeedFieldNumber;
const int SolverParameter::kTypeFieldNumber;
const int SolverParameter::kDeltaFieldNumber;
const int SolverParameter::kMomentum2FieldNumber;
const int SolverParameter::kRmsDecayFieldNumber;
const int SolverParameter::kDebugInfoFieldNumber;
const int SolverParameter::kSnapshotAfterTrainFieldNumber;
const int SolverParameter::kSolverTypeFieldNumber;
const int SolverParameter::kLayerWiseReduceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParameter::SolverParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverParameter)
}

void SolverParameter::InitAsDefaultInstance() {
  net_param_ = const_cast< ::caffe::NetParameter*>(&::caffe::NetParameter::default_instance());
  train_net_param_ = const_cast< ::caffe::NetParameter*>(&::caffe::NetParameter::default_instance());
  train_state_ = const_cast< ::caffe::NetState*>(&::caffe::NetState::default_instance());
}

SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SolverParameter)
}

void SolverParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_param_ = NULL;
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_net_param_ = NULL;
  train_state_ = NULL;
  test_interval_ = 0;
  test_compute_loss_ = false;
  test_initialization_ = true;
  base_lr_ = 0;
  display_ = 0;
  average_loss_ = 1;
  max_iter_ = 0;
  iter_size_ = 1;
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamma_ = 0;
  power_ = 0;
  momentum_ = 0;
  weight_decay_ = 0;
  regularization_type_.UnsafeSetDefault(_default_regularization_type_);
  stepsize_ = 0;
  clip_gradients_ = -1;
  clamp_weights_lower_ = -999999.88f;
  clamp_weights_upper_ = 999999.88f;
  clip_weights_ = -1;
  snapshot_ = 0;
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_diff_ = false;
  snapshot_format_ = 1;
  solver_mode_ = 1;
  device_id_ = 0;
  random_seed_ = GOOGLE_LONGLONG(-1);
  type_.UnsafeSetDefault(_default_type_);
  delta_ = 1e-08f;
  momentum2_ = 0.999f;
  rms_decay_ = 0.99f;
  debug_info_ = false;
  snapshot_after_train_ = true;
  solver_type_ = 0;
  layer_wise_reduce_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:caffe.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(_default_regularization_type_);
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(_default_type_);
  if (this != default_instance_) {
    delete net_param_;
    delete train_net_param_;
    delete train_state_;
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_descriptor_;
}

const SolverParameter& SolverParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SolverParameter* SolverParameter::default_instance_ = NULL;

SolverParameter* SolverParameter::New(::google::protobuf::Arena* arena) const {
  SolverParameter* n = new SolverParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SolverParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SolverParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 87u) {
    if (has_net()) {
      net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
    }
    if (has_train_net()) {
      train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_train_net_param()) {
      if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
    }
    if (has_train_state()) {
      if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65024u) {
    ZR_(test_interval_, display_);
    test_compute_loss_ = false;
    test_initialization_ = true;
    average_loss_ = 1;
    max_iter_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(gamma_, weight_decay_);
    iter_size_ = 1;
    if (has_lr_policy()) {
      lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_regularization_type()) {
      regularization_type_.ClearToDefaultNoArena(_default_regularization_type_);
    }
    stepsize_ = 0;
  }
  if (_has_bits_[24 / 32] & 4261412864u) {
    clip_gradients_ = -1;
    clamp_weights_lower_ = -999999.88f;
    clamp_weights_upper_ = 999999.88f;
    clip_weights_ = -1;
    snapshot_ = 0;
    if (has_snapshot_prefix()) {
      snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    snapshot_diff_ = false;
  }
  if (_has_bits_[32 / 32] & 255u) {
    snapshot_format_ = 1;
    solver_mode_ = 1;
    device_id_ = 0;
    random_seed_ = GOOGLE_LONGLONG(-1);
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    delta_ = 1e-08f;
    momentum2_ = 0.999f;
    rms_decay_ = 0.99f;
  }
  if (_has_bits_[40 / 32] & 3840u) {
    debug_info_ = false;
    snapshot_after_train_ = true;
    solver_type_ = 0;
    layer_wise_reduce_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  test_net_.Clear();
  test_net_param_.Clear();
  test_state_.Clear();
  test_iter_.Clear();
  stepvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_net = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_net().data(), this->train_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.train_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_net;
        break;
      }

      // repeated string test_net = 2;
      case 2: {
        if (tag == 18) {
         parse_test_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_net(this->test_net_size() - 1).data(),
            this->test_net(this->test_net_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.test_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_net;
        if (input->ExpectTag(24)) goto parse_test_iter;
        break;
      }

      // repeated int32 test_iter = 3;
      case 3: {
        if (tag == 24) {
         parse_test_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_test_iter())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_test_iter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_test_iter;
        if (input->ExpectTag(32)) goto parse_test_interval;
        break;
      }

      // optional int32 test_interval = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_test_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
          set_has_test_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_base_lr;
        break;
      }

      // optional float base_lr = 5;
      case 5: {
        if (tag == 45) {
         parse_base_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
          set_has_base_lr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_display;
        break;
      }

      // optional int32 display = 6;
      case 6: {
        if (tag == 48) {
         parse_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_iter;
        break;
      }

      // optional int32 max_iter = 7;
      case 7: {
        if (tag == 56) {
         parse_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lr_policy;
        break;
      }

      // optional string lr_policy = 8;
      case 8: {
        if (tag == 66) {
         parse_lr_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lr_policy().data(), this->lr_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.lr_policy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_gamma;
        break;
      }

      // optional float gamma = 9;
      case 9: {
        if (tag == 77) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_power;
        break;
      }

      // optional float power = 10;
      case 10: {
        if (tag == 85) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_momentum;
        break;
      }

      // optional float momentum = 11;
      case 11: {
        if (tag == 93) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_weight_decay;
        break;
      }

      // optional float weight_decay = 12;
      case 12: {
        if (tag == 101) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
          set_has_weight_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stepsize;
        break;
      }

      // optional int32 stepsize = 13;
      case 13: {
        if (tag == 104) {
         parse_stepsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
          set_has_stepsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_snapshot;
        break;
      }

      // optional int32 snapshot = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_snapshot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
          set_has_snapshot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_snapshot_prefix;
        break;
      }

      // optional string snapshot_prefix = 15;
      case 15: {
        if (tag == 122) {
         parse_snapshot_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.snapshot_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_snapshot_diff;
        break;
      }

      // optional bool snapshot_diff = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_snapshot_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_diff_)));
          set_has_snapshot_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_solver_mode;
        break;
      }

      // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
      case 17: {
        if (tag == 136) {
         parse_solver_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverMode_IsValid(value)) {
            set_solver_mode(static_cast< ::caffe::SolverParameter_SolverMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_device_id;
        break;
      }

      // optional int32 device_id = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_test_compute_loss;
        break;
      }

      // optional bool test_compute_loss = 19 [default = false];
      case 19: {
        if (tag == 152) {
         parse_test_compute_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_compute_loss_)));
          set_has_test_compute_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_random_seed;
        break;
      }

      // optional int64 random_seed = 20 [default = -1];
      case 20: {
        if (tag == 160) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_train_net_param;
        break;
      }

      // optional .caffe.NetParameter train_net_param = 21;
      case 21: {
        if (tag == 170) {
         parse_train_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_test_net_param;
        break;
      }

      // repeated .caffe.NetParameter test_net_param = 22;
      case 22: {
        if (tag == 178) {
         parse_test_net_param:
          DO_(input->IncrementRecursionDepth());
         parse_loop_test_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_test_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_test_net_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(184)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 23 [default = false];
      case 23: {
        if (tag == 184) {
         parse_debug_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
          set_has_debug_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_net;
        break;
      }

      // optional string net = 24;
      case 24: {
        if (tag == 194) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net().data(), this->net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_net_param;
        break;
      }

      // optional .caffe.NetParameter net_param = 25;
      case 25: {
        if (tag == 202) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_train_state;
        break;
      }

      // optional .caffe.NetState train_state = 26;
      case 26: {
        if (tag == 210) {
         parse_train_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_test_state;
        break;
      }

      // repeated .caffe.NetState test_state = 27;
      case 27: {
        if (tag == 218) {
         parse_test_state:
          DO_(input->IncrementRecursionDepth());
         parse_loop_test_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_test_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_test_state;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(224)) goto parse_snapshot_after_train;
        break;
      }

      // optional bool snapshot_after_train = 28 [default = true];
      case 28: {
        if (tag == 224) {
         parse_snapshot_after_train:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_after_train_)));
          set_has_snapshot_after_train();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_regularization_type;
        break;
      }

      // optional string regularization_type = 29 [default = "L2"];
      case 29: {
        if (tag == 234) {
         parse_regularization_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularization_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regularization_type().data(), this->regularization_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.regularization_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_solver_type;
        break;
      }

      // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
      case 30: {
        if (tag == 240) {
         parse_solver_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverType_IsValid(value)) {
            set_solver_type(static_cast< ::caffe::SolverParameter_SolverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_delta;
        break;
      }

      // optional float delta = 31 [default = 1e-08];
      case 31: {
        if (tag == 253) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_test_initialization;
        break;
      }

      // optional bool test_initialization = 32 [default = true];
      case 32: {
        if (tag == 256) {
         parse_test_initialization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_initialization_)));
          set_has_test_initialization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_average_loss;
        break;
      }

      // optional int32 average_loss = 33 [default = 1];
      case 33: {
        if (tag == 264) {
         parse_average_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_loss_)));
          set_has_average_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_stepvalue;
        break;
      }

      // repeated int32 stepvalue = 34;
      case 34: {
        if (tag == 272) {
         parse_stepvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_stepvalue())));
        } else if (tag == 274) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stepvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_stepvalue;
        if (input->ExpectTag(285)) goto parse_clip_gradients;
        break;
      }

      // optional float clip_gradients = 35 [default = -1];
      case 35: {
        if (tag == 285) {
         parse_clip_gradients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_gradients_)));
          set_has_clip_gradients();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_iter_size;
        break;
      }

      // optional int32 iter_size = 36 [default = 1];
      case 36: {
        if (tag == 288) {
         parse_iter_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_size_)));
          set_has_iter_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_snapshot_format;
        break;
      }

      // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
      case 37: {
        if (tag == 296) {
         parse_snapshot_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SnapshotFormat_IsValid(value)) {
            set_snapshot_format(static_cast< ::caffe::SolverParameter_SnapshotFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_rms_decay;
        break;
      }

      // optional float rms_decay = 38 [default = 0.99];
      case 38: {
        if (tag == 309) {
         parse_rms_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rms_decay_)));
          set_has_rms_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_momentum2;
        break;
      }

      // optional float momentum2 = 39 [default = 0.999];
      case 39: {
        if (tag == 317) {
         parse_momentum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum2_)));
          set_has_momentum2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_type;
        break;
      }

      // optional string type = 40 [default = "SGD"];
      case 40: {
        if (tag == 322) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_layer_wise_reduce;
        break;
      }

      // optional bool layer_wise_reduce = 41 [default = true];
      case 41: {
        if (tag == 328) {
         parse_layer_wise_reduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layer_wise_reduce_)));
          set_has_layer_wise_reduce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_clamp_weights_lower;
        break;
      }

      // optional float clamp_weights_lower = 42 [default = -999999.88];
      case 42: {
        if (tag == 341) {
         parse_clamp_weights_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clamp_weights_lower_)));
          set_has_clamp_weights_lower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(349)) goto parse_clamp_weights_upper;
        break;
      }

      // optional float clamp_weights_upper = 43 [default = 999999.88];
      case 43: {
        if (tag == 349) {
         parse_clamp_weights_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clamp_weights_upper_)));
          set_has_clamp_weights_upper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(357)) goto parse_clip_weights;
        break;
      }

      // optional float clip_weights = 44 [default = -1];
      case 44: {
        if (tag == 357) {
         parse_clip_weights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_weights_)));
          set_has_clip_weights();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverParameter)
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_net(), output);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_net(i), output);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0; i < this->test_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->test_iter(i), output);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_interval(), output);
  }

  // optional float base_lr = 5;
  if (has_base_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base_lr(), output);
  }

  // optional int32 display = 6;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display(), output);
  }

  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_iter(), output);
  }

  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lr_policy(), output);
  }

  // optional float gamma = 9;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma(), output);
  }

  // optional float power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->power(), output);
  }

  // optional float momentum = 11;
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->momentum(), output);
  }

  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_decay(), output);
  }

  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stepsize(), output);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->snapshot(), output);
  }

  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->snapshot_prefix(), output);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->snapshot_diff(), output);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (has_solver_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->solver_mode(), output);
  }

  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->device_id(), output);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (has_test_compute_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->test_compute_loss(), output);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->random_seed(), output);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (has_train_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->train_net_param_, output);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0, n = this->test_net_param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->test_net_param(i), output);
  }

  // optional bool debug_info = 23 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->debug_info(), output);
  }

  // optional string net = 24;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->net(), output);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->net_param_, output);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->train_state_, output);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->test_state(i), output);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (has_snapshot_after_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->snapshot_after_train(), output);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->regularization_type(), output);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->solver_type(), output);
  }

  // optional float delta = 31 [default = 1e-08];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->delta(), output);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->test_initialization(), output);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (has_average_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->average_loss(), output);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->stepvalue(i), output);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (has_clip_gradients()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->clip_gradients(), output);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (has_iter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->iter_size(), output);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (has_snapshot_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->snapshot_format(), output);
  }

  // optional float rms_decay = 38 [default = 0.99];
  if (has_rms_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->rms_decay(), output);
  }

  // optional float momentum2 = 39 [default = 0.999];
  if (has_momentum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->momentum2(), output);
  }

  // optional string type = 40 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->type(), output);
  }

  // optional bool layer_wise_reduce = 41 [default = true];
  if (has_layer_wise_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->layer_wise_reduce(), output);
  }

  // optional float clamp_weights_lower = 42 [default = -999999.88];
  if (has_clamp_weights_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->clamp_weights_lower(), output);
  }

  // optional float clamp_weights_upper = 43 [default = 999999.88];
  if (has_clamp_weights_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->clamp_weights_upper(), output);
  }

  // optional float clip_weights = 44 [default = -1];
  if (has_clip_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->clip_weights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverParameter)
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_net(i), target);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0; i < this->test_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->test_iter(i), target);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_interval(), target);
  }

  // optional float base_lr = 5;
  if (has_base_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base_lr(), target);
  }

  // optional int32 display = 6;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display(), target);
  }

  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_iter(), target);
  }

  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lr_policy(), target);
  }

  // optional float gamma = 9;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma(), target);
  }

  // optional float power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->power(), target);
  }

  // optional float momentum = 11;
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->momentum(), target);
  }

  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_decay(), target);
  }

  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stepsize(), target);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->snapshot(), target);
  }

  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->snapshot_prefix(), target);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->snapshot_diff(), target);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (has_solver_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->solver_mode(), target);
  }

  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->device_id(), target);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (has_test_compute_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->test_compute_loss(), target);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->random_seed(), target);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (has_train_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->train_net_param_, target);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0, n = this->test_net_param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->test_net_param(i), target);
  }

  // optional bool debug_info = 23 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->debug_info(), target);
  }

  // optional string net = 24;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->net(), target);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, *this->net_param_, target);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, *this->train_state_, target);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->test_state(i), target);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (has_snapshot_after_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->snapshot_after_train(), target);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->regularization_type(), target);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (has_solver_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->solver_type(), target);
  }

  // optional float delta = 31 [default = 1e-08];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->delta(), target);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->test_initialization(), target);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (has_average_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->average_loss(), target);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->stepvalue(i), target);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (has_clip_gradients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->clip_gradients(), target);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (has_iter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->iter_size(), target);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (has_snapshot_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->snapshot_format(), target);
  }

  // optional float rms_decay = 38 [default = 0.99];
  if (has_rms_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->rms_decay(), target);
  }

  // optional float momentum2 = 39 [default = 0.999];
  if (has_momentum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->momentum2(), target);
  }

  // optional string type = 40 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->type(), target);
  }

  // optional bool layer_wise_reduce = 41 [default = true];
  if (has_layer_wise_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->layer_wise_reduce(), target);
  }

  // optional float clamp_weights_lower = 42 [default = -999999.88];
  if (has_clamp_weights_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->clamp_weights_lower(), target);
  }

  // optional float clamp_weights_upper = 43 [default = 999999.88];
  if (has_clamp_weights_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->clamp_weights_upper(), target);
  }

  // optional float clip_weights = 44 [default = -1];
  if (has_clip_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->clip_weights(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverParameter)
  return target;
}

int SolverParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 87u) {
    // optional string net = 24;
    if (has_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional .caffe.NetParameter net_param = 25;
    if (has_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_param_);
    }

    // optional string train_net = 1;
    if (has_train_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_net());
    }

    // optional .caffe.NetParameter train_net_param = 21;
    if (has_train_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_net_param_);
    }

    // optional .caffe.NetState train_state = 26;
    if (has_train_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_state_);
    }

  }
  if (_has_bits_[9 / 32] & 65024u) {
    // optional int32 test_interval = 4 [default = 0];
    if (has_test_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }

    // optional bool test_compute_loss = 19 [default = false];
    if (has_test_compute_loss()) {
      total_size += 2 + 1;
    }

    // optional bool test_initialization = 32 [default = true];
    if (has_test_initialization()) {
      total_size += 2 + 1;
    }

    // optional float base_lr = 5;
    if (has_base_lr()) {
      total_size += 1 + 4;
    }

    // optional int32 display = 6;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 average_loss = 33 [default = 1];
    if (has_average_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_loss());
    }

    // optional int32 max_iter = 7;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 iter_size = 36 [default = 1];
    if (has_iter_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter_size());
    }

    // optional string lr_policy = 8;
    if (has_lr_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }

    // optional float gamma = 9;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power = 10;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float momentum = 11;
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 12;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional string regularization_type = 29 [default = "L2"];
    if (has_regularization_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularization_type());
    }

    // optional int32 stepsize = 13;
    if (has_stepsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }

  }
  if (_has_bits_[25 / 32] & 4261412864u) {
    // optional float clip_gradients = 35 [default = -1];
    if (has_clip_gradients()) {
      total_size += 2 + 4;
    }

    // optional float clamp_weights_lower = 42 [default = -999999.88];
    if (has_clamp_weights_lower()) {
      total_size += 2 + 4;
    }

    // optional float clamp_weights_upper = 43 [default = 999999.88];
    if (has_clamp_weights_upper()) {
      total_size += 2 + 4;
    }

    // optional float clip_weights = 44 [default = -1];
    if (has_clip_weights()) {
      total_size += 2 + 4;
    }

    // optional int32 snapshot = 14 [default = 0];
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }

    // optional string snapshot_prefix = 15;
    if (has_snapshot_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }

    // optional bool snapshot_diff = 16 [default = false];
    if (has_snapshot_diff()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    if (has_snapshot_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->snapshot_format());
    }

    // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    if (has_solver_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_mode());
    }

    // optional int32 device_id = 18 [default = 0];
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }

    // optional int64 random_seed = 20 [default = -1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->random_seed());
    }

    // optional string type = 40 [default = "SGD"];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float delta = 31 [default = 1e-08];
    if (has_delta()) {
      total_size += 2 + 4;
    }

    // optional float momentum2 = 39 [default = 0.999];
    if (has_momentum2()) {
      total_size += 2 + 4;
    }

    // optional float rms_decay = 38 [default = 0.99];
    if (has_rms_decay()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & 3840u) {
    // optional bool debug_info = 23 [default = false];
    if (has_debug_info()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_after_train = 28 [default = true];
    if (has_snapshot_after_train()) {
      total_size += 2 + 1;
    }

    // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
    if (has_solver_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
    }

    // optional bool layer_wise_reduce = 41 [default = true];
    if (has_layer_wise_reduce()) {
      total_size += 2 + 1;
    }

  }
  // repeated string test_net = 2;
  total_size += 1 * this->test_net_size();
  for (int i = 0; i < this->test_net_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_net(i));
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  total_size += 2 * this->test_net_param_size();
  for (int i = 0; i < this->test_net_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test_net_param(i));
  }

  // repeated .caffe.NetState test_state = 27;
  total_size += 2 * this->test_state_size();
  for (int i = 0; i < this->test_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test_state(i));
  }

  // repeated int32 test_iter = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_iter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->test_iter(i));
    }
    total_size += 1 * this->test_iter_size() + data_size;
  }

  // repeated int32 stepvalue = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->stepvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stepvalue(i));
    }
    total_size += 2 * this->stepvalue_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SolverParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverParameter)
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  test_net_.MergeFrom(from.test_net_);
  test_net_param_.MergeFrom(from.test_net_param_);
  test_state_.MergeFrom(from.test_state_);
  test_iter_.MergeFrom(from.test_iter_);
  stepvalue_.MergeFrom(from.stepvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net()) {
      set_has_net();
      net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
    }
    if (from.has_net_param()) {
      mutable_net_param()->::caffe::NetParameter::MergeFrom(from.net_param());
    }
    if (from.has_train_net()) {
      set_has_train_net();
      train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
    }
    if (from.has_train_net_param()) {
      mutable_train_net_param()->::caffe::NetParameter::MergeFrom(from.train_net_param());
    }
    if (from.has_train_state()) {
      mutable_train_state()->::caffe::NetState::MergeFrom(from.train_state());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_test_interval()) {
      set_test_interval(from.test_interval());
    }
    if (from.has_test_compute_loss()) {
      set_test_compute_loss(from.test_compute_loss());
    }
    if (from.has_test_initialization()) {
      set_test_initialization(from.test_initialization());
    }
    if (from.has_base_lr()) {
      set_base_lr(from.base_lr());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_average_loss()) {
      set_average_loss(from.average_loss());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iter_size()) {
      set_iter_size(from.iter_size());
    }
    if (from.has_lr_policy()) {
      set_has_lr_policy();
      lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_regularization_type()) {
      set_has_regularization_type();
      regularization_type_.AssignWithDefault(_default_regularization_type_, from.regularization_type_);
    }
    if (from.has_stepsize()) {
      set_stepsize(from.stepsize());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_clip_gradients()) {
      set_clip_gradients(from.clip_gradients());
    }
    if (from.has_clamp_weights_lower()) {
      set_clamp_weights_lower(from.clamp_weights_lower());
    }
    if (from.has_clamp_weights_upper()) {
      set_clamp_weights_upper(from.clamp_weights_upper());
    }
    if (from.has_clip_weights()) {
      set_clip_weights(from.clip_weights());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_snapshot_prefix()) {
      set_has_snapshot_prefix();
      snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
    }
    if (from.has_snapshot_diff()) {
      set_snapshot_diff(from.snapshot_diff());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_snapshot_format()) {
      set_snapshot_format(from.snapshot_format());
    }
    if (from.has_solver_mode()) {
      set_solver_mode(from.solver_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_momentum2()) {
      set_momentum2(from.momentum2());
    }
    if (from.has_rms_decay()) {
      set_rms_decay(from.rms_decay());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_snapshot_after_train()) {
      set_snapshot_after_train(from.snapshot_after_train());
    }
    if (from.has_solver_type()) {
      set_solver_type(from.solver_type());
    }
    if (from.has_layer_wise_reduce()) {
      set_layer_wise_reduce(from.layer_wise_reduce());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {

  if (has_net_param()) {
    if (!this->net_param_->IsInitialized()) return false;
  }
  if (has_train_net_param()) {
    if (!this->train_net_param_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->test_net_param())) return false;
  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParameter::InternalSwap(SolverParameter* other) {
  net_.Swap(&other->net_);
  std::swap(net_param_, other->net_param_);
  train_net_.Swap(&other->train_net_);
  test_net_.UnsafeArenaSwap(&other->test_net_);
  std::swap(train_net_param_, other->train_net_param_);
  test_net_param_.UnsafeArenaSwap(&other->test_net_param_);
  std::swap(train_state_, other->train_state_);
  test_state_.UnsafeArenaSwap(&other->test_state_);
  test_iter_.UnsafeArenaSwap(&other->test_iter_);
  std::swap(test_interval_, other->test_interval_);
  std::swap(test_compute_loss_, other->test_compute_loss_);
  std::swap(test_initialization_, other->test_initialization_);
  std::swap(base_lr_, other->base_lr_);
  std::swap(display_, other->display_);
  std::swap(average_loss_, other->average_loss_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(iter_size_, other->iter_size_);
  lr_policy_.Swap(&other->lr_policy_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(momentum_, other->momentum_);
  std::swap(weight_decay_, other->weight_decay_);
  regularization_type_.Swap(&other->regularization_type_);
  std::swap(stepsize_, other->stepsize_);
  stepvalue_.UnsafeArenaSwap(&other->stepvalue_);
  std::swap(clip_gradients_, other->clip_gradients_);
  std::swap(clamp_weights_lower_, other->clamp_weights_lower_);
  std::swap(clamp_weights_upper_, other->clamp_weights_upper_);
  std::swap(clip_weights_, other->clip_weights_);
  std::swap(snapshot_, other->snapshot_);
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  std::swap(snapshot_diff_, other->snapshot_diff_);
  std::swap(snapshot_format_, other->snapshot_format_);
  std::swap(solver_mode_, other->solver_mode_);
  std::swap(device_id_, other->device_id_);
  std::swap(random_seed_, other->random_seed_);
  type_.Swap(&other->type_);
  std::swap(delta_, other->delta_);
  std::swap(momentum2_, other->momentum2_);
  std::swap(rms_decay_, other->rms_decay_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(snapshot_after_train_, other->snapshot_after_train_);
  std::swap(solver_type_, other->solver_type_);
  std::swap(layer_wise_reduce_, other->layer_wise_reduce_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParameter_descriptor_;
  metadata.reflection = SolverParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParameter

// optional string net = 24;
bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
 const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
 void SolverParameter::set_net(const char* value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
 void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
 ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
 const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
 void SolverParameter::set_train_net(const char* value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
 void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
 ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
int SolverParameter::test_net_size() const {
  return test_net_.size();
}
void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
 const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
 ::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
 void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
 void SolverParameter::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
 void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
 ::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
 void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
 void SolverParameter::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
 void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000010u;
}
void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_ : *default_instance_->train_net_param_;
}
::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
const ::caffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_ : *default_instance_->train_state_;
}
::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
int SolverParameter::test_state_size() const {
  return test_state_.size();
}
void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
 ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
 void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
 void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000200u;
}
void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
 ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
 void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00000400u;
}
void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00000400u;
}
void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
 bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
 void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x00000800u;
}
void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x00000800u;
}
void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
 bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
 void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00001000u;
}
void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
 float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
 void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00002000u;
}
void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00002000u;
}
void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
 ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
 void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x00004000u;
}
void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00004000u;
}
void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
 ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
 void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00008000u;
}
void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00008000u;
}
void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
 ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
 void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x00010000u;
}
void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x00010000u;
}
void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
 ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
 void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00020000u;
}
void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00020000u;
}
void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
 const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
 void SolverParameter::set_lr_policy(const char* value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
 void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
 ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00040000u;
}
void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00040000u;
}
void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
 void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00080000u;
}
void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00080000u;
}
void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
 float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
 void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00100000u;
}
void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00100000u;
}
void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
 float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
 void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00200000u;
}
void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00200000u;
}
void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
 float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
 void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00400000u;
}
void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00400000u;
}
void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(_default_regularization_type_);
  clear_has_regularization_type();
}
 const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena(_default_regularization_type_);
}
 void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
 void SolverParameter::set_regularization_type(const char* value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
 void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
 ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(_default_regularization_type_);
}
 ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(_default_regularization_type_);
}
 void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(_default_regularization_type_, regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00800000u;
}
void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00800000u;
}
void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
 ::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
 void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
 ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
 void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
 void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SolverParameter::set_has_clip_gradients() {
  _has_bits_[0] |= 0x02000000u;
}
void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x02000000u;
}
void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
 float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
 void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional float clamp_weights_lower = 42 [default = -999999.88];
bool SolverParameter::has_clamp_weights_lower() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SolverParameter::set_has_clamp_weights_lower() {
  _has_bits_[0] |= 0x04000000u;
}
void SolverParameter::clear_has_clamp_weights_lower() {
  _has_bits_[0] &= ~0x04000000u;
}
void SolverParameter::clear_clamp_weights_lower() {
  clamp_weights_lower_ = -999999.88f;
  clear_has_clamp_weights_lower();
}
 float SolverParameter::clamp_weights_lower() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clamp_weights_lower)
  return clamp_weights_lower_;
}
 void SolverParameter::set_clamp_weights_lower(float value) {
  set_has_clamp_weights_lower();
  clamp_weights_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clamp_weights_lower)
}

// optional float clamp_weights_upper = 43 [default = 999999.88];
bool SolverParameter::has_clamp_weights_upper() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SolverParameter::set_has_clamp_weights_upper() {
  _has_bits_[0] |= 0x08000000u;
}
void SolverParameter::clear_has_clamp_weights_upper() {
  _has_bits_[0] &= ~0x08000000u;
}
void SolverParameter::clear_clamp_weights_upper() {
  clamp_weights_upper_ = 999999.88f;
  clear_has_clamp_weights_upper();
}
 float SolverParameter::clamp_weights_upper() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clamp_weights_upper)
  return clamp_weights_upper_;
}
 void SolverParameter::set_clamp_weights_upper(float value) {
  set_has_clamp_weights_upper();
  clamp_weights_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clamp_weights_upper)
}

// optional float clip_weights = 44 [default = -1];
bool SolverParameter::has_clip_weights() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SolverParameter::set_has_clip_weights() {
  _has_bits_[0] |= 0x10000000u;
}
void SolverParameter::clear_has_clip_weights() {
  _has_bits_[0] &= ~0x10000000u;
}
void SolverParameter::clear_clip_weights() {
  clip_weights_ = -1;
  clear_has_clip_weights();
}
 float SolverParameter::clip_weights() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_weights)
  return clip_weights_;
}
 void SolverParameter::set_clip_weights(float value) {
  set_has_clip_weights();
  clip_weights_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_weights)
}

// optional int32 snapshot = 14 [default = 0];
bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x20000000u;
}
void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x20000000u;
}
void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
 ::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
 void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x40000000u;
}
void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x40000000u;
}
void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
 const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
 void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
 void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
 ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x80000000u;
}
void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x80000000u;
}
void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
 bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
 void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void SolverParameter::set_has_snapshot_format() {
  _has_bits_[1] |= 0x00000001u;
}
void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[1] &= ~0x00000001u;
}
void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
 ::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
 void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void SolverParameter::set_has_solver_mode() {
  _has_bits_[1] |= 0x00000002u;
}
void SolverParameter::clear_has_solver_mode() {
  _has_bits_[1] &= ~0x00000002u;
}
void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
 ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
 void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
bool SolverParameter::has_device_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void SolverParameter::set_has_device_id() {
  _has_bits_[1] |= 0x00000004u;
}
void SolverParameter::clear_has_device_id() {
  _has_bits_[1] &= ~0x00000004u;
}
void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
 ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
 void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
bool SolverParameter::has_random_seed() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void SolverParameter::set_has_random_seed() {
  _has_bits_[1] |= 0x00000008u;
}
void SolverParameter::clear_has_random_seed() {
  _has_bits_[1] &= ~0x00000008u;
}
void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
 ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
 void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
bool SolverParameter::has_type() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void SolverParameter::set_has_type() {
  _has_bits_[1] |= 0x00000010u;
}
void SolverParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000010u;
}
void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
 const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena(_default_type_);
}
 void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
 void SolverParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
 void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
 ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(_default_type_);
}
 ::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
 void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000020u;
}
void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000020u;
}
void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
 float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
 void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000040u;
}
void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000040u;
}
void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
 float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
 void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38 [default = 0.99];
bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00000080u;
}
void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00000080u;
}
void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0.99f;
  clear_has_rms_decay();
}
 float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
 void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
bool SolverParameter::has_debug_info() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void SolverParameter::set_has_debug_info() {
  _has_bits_[1] |= 0x00000100u;
}
void SolverParameter::clear_has_debug_info() {
  _has_bits_[1] &= ~0x00000100u;
}
void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
 bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
 void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[1] |= 0x00000200u;
}
void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[1] &= ~0x00000200u;
}
void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
 bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
 void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
bool SolverParameter::has_solver_type() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void SolverParameter::set_has_solver_type() {
  _has_bits_[1] |= 0x00000400u;
}
void SolverParameter::clear_has_solver_type() {
  _has_bits_[1] &= ~0x00000400u;
}
void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
 ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
 void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional bool layer_wise_reduce = 41 [default = true];
bool SolverParameter::has_layer_wise_reduce() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void SolverParameter::set_has_layer_wise_reduce() {
  _has_bits_[1] |= 0x00000800u;
}
void SolverParameter::clear_has_layer_wise_reduce() {
  _has_bits_[1] &= ~0x00000800u;
}
void SolverParameter::clear_layer_wise_reduce() {
  layer_wise_reduce_ = true;
  clear_has_layer_wise_reduce();
}
 bool SolverParameter::layer_wise_reduce() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.layer_wise_reduce)
  return layer_wise_reduce_;
}
 void SolverParameter::set_layer_wise_reduce(bool value) {
  set_has_layer_wise_reduce();
  layer_wise_reduce_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.layer_wise_reduce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kHistoryFieldNumber;
const int SolverState::kCurrentStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverState::SolverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverState)
}

void SolverState::InitAsDefaultInstance() {
}

SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iter_ = 0;
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:caffe.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  learned_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverState_descriptor_;
}

const SolverState& SolverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SolverState* SolverState::default_instance_ = NULL;

SolverState* SolverState::New(::google::protobuf::Arena* arena) const {
  SolverState* n = new SolverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SolverState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SolverState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(iter_, current_step_);
    if (has_learned_net()) {
      learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
          set_has_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_learned_net;
        break;
      }

      // optional string learned_net = 2;
      case 2: {
        if (tag == 18) {
         parse_learned_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->learned_net().data(), this->learned_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.learned_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_history;
        break;
      }

      // repeated .caffe.BlobProto history = 3;
      case 3: {
        if (tag == 26) {
         parse_history:
          DO_(input->IncrementRecursionDepth());
         parse_loop_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_history;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_current_step;
        break;
      }

      // optional int32 current_step = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_current_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_step_)));
          set_has_current_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->learned_net(), output);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0, n = this->history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(i), output);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0, n = this->history_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->history(i), target);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_step(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
  return target;
}

int SolverState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }

    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }

    // optional int32 current_step = 4 [default = 0];
    if (has_current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_step());
    }

  }
  // repeated .caffe.BlobProto history = 3;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SolverState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverState)
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iter()) {
      set_iter(from.iter());
    }
    if (from.has_learned_net()) {
      set_has_learned_net();
      learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
    }
    if (from.has_current_step()) {
      set_current_step(from.current_step());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {

  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverState::InternalSwap(SolverState* other) {
  std::swap(iter_, other->iter_);
  learned_net_.Swap(&other->learned_net_);
  history_.UnsafeArenaSwap(&other->history_);
  std::swap(current_step_, other->current_step_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverState_descriptor_;
  metadata.reflection = SolverState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverState

// optional int32 iter = 1;
bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
 ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
 void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
 const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
 void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
 void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
 ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
int SolverState::history_size() const {
  return history_.size();
}
void SolverState::clear_history() {
  history_.Clear();
}
const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
 ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
 void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetState::kPhaseFieldNumber;
const int NetState::kLevelFieldNumber;
const int NetState::kStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetState::NetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetState)
}

void NetState::InitAsDefaultInstance() {
}

NetState::NetState(const NetState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phase_ = 1;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:caffe.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetState_descriptor_;
}

const NetState& NetState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NetState* NetState::default_instance_ = NULL;

NetState* NetState::New(::google::protobuf::Arena* arena) const {
  NetState* n = new NetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetState)
  if (_has_bits_[0 / 32] & 3u) {
    phase_ = 1;
    level_ = 0;
  }
  stage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1 [default = TEST];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stage;
        break;
      }

      // repeated string stage = 3;
      case 3: {
        if (tag == 26) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetState.stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetState)
  return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
  return target;
}

int NetState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.Phase phase = 1 [default = TEST];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated string stage = 3;
  total_size += 1 * this->stage_size();
  for (int i = 0; i < this->stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetState)
    MergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stage_.MergeFrom(from.stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {

  return true;
}

void NetState::Swap(NetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetState::InternalSwap(NetState* other) {
  std::swap(phase_, other->phase_);
  std::swap(level_, other->level_);
  stage_.UnsafeArenaSwap(&other->stage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetState_descriptor_;
  metadata.reflection = NetState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
 ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
 void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
 void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
int NetState::stage_size() const {
  return stage_.size();
}
void NetState::clear_stage() {
  stage_.Clear();
}
 const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
 ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
 void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
 void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
 void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
 ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
 void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
 void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
 void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetStateRule::kPhaseFieldNumber;
const int NetStateRule::kMinLevelFieldNumber;
const int NetStateRule::kMaxLevelFieldNumber;
const int NetStateRule::kStageFieldNumber;
const int NetStateRule::kNotStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetStateRule::NetStateRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetStateRule)
}

void NetStateRule::InitAsDefaultInstance() {
}

NetStateRule::NetStateRule(const NetStateRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetStateRule)
}

void NetStateRule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phase_ = 0;
  min_level_ = 0;
  max_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetStateRule::~NetStateRule() {
  // @@protoc_insertion_point(destructor:caffe.NetStateRule)
  SharedDtor();
}

void NetStateRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetStateRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStateRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetStateRule_descriptor_;
}

const NetStateRule& NetStateRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NetStateRule* NetStateRule::default_instance_ = NULL;

NetStateRule* NetStateRule::New(::google::protobuf::Arena* arena) const {
  NetStateRule* n = new NetStateRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetStateRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetStateRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetStateRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(phase_, min_level_);
    max_level_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  stage_.Clear();
  not_stage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetStateRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetStateRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // optional int32 min_level = 2;
      case 2: {
        if (tag == 16) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 3;
      case 3: {
        if (tag == 24) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage;
        break;
      }

      // repeated string stage = 4;
      case 4: {
        if (tag == 34) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage;
        if (input->ExpectTag(42)) goto parse_not_stage;
        break;
      }

      // repeated string not_stage = 5;
      case 5: {
        if (tag == 42) {
         parse_not_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_stage(this->not_stage_size() - 1).data(),
            this->not_stage(this->not_stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.not_stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_not_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetStateRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetStateRule)
  return false;
#undef DO_
}

void NetStateRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetStateRule)
  // optional .caffe.Phase phase = 1;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // repeated string stage = 4;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stage(i), output);
  }

  // repeated string not_stage = 5;
  for (int i = 0; i < this->not_stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), this->not_stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->not_stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetStateRule)
}

::google::protobuf::uint8* NetStateRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetStateRule)
  // optional .caffe.Phase phase = 1;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // repeated string stage = 4;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->stage(i), target);
  }

  // repeated string not_stage = 5;
  for (int i = 0; i < this->not_stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), this->not_stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->not_stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetStateRule)
  return target;
}

int NetStateRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetStateRule)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.Phase phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  // repeated string stage = 4;
  total_size += 1 * this->stage_size();
  for (int i = 0; i < this->stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 * this->not_stage_size();
  for (int i = 0; i < this->not_stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_stage(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStateRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetStateRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetStateRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetStateRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetStateRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetStateRule)
    MergeFrom(*source);
  }
}

void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetStateRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stage_.MergeFrom(from.stage_);
  not_stage_.MergeFrom(from.not_stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetStateRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStateRule::IsInitialized() const {

  return true;
}

void NetStateRule::Swap(NetStateRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetStateRule::InternalSwap(NetStateRule* other) {
  std::swap(phase_, other->phase_);
  std::swap(min_level_, other->min_level_);
  std::swap(max_level_, other->max_level_);
  stage_.UnsafeArenaSwap(&other->stage_);
  not_stage_.UnsafeArenaSwap(&other->not_stage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetStateRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetStateRule_descriptor_;
  metadata.reflection = NetStateRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetStateRule

// optional .caffe.Phase phase = 1;
bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
 ::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
 void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
 ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
 void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
 ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
 void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
int NetStateRule::stage_size() const {
  return stage_.size();
}
void NetStateRule::clear_stage() {
  stage_.Clear();
}
 const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
 ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
 void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
 void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
 void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
 ::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
 void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
 void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
 void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
 const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
 ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
 void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
 void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
 void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
 ::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
 void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
 void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
 void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamSpec_DimCheckMode_descriptor_;
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParamSpec_DimCheckMode ParamSpec::STRICT;
const ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
const int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kShareModeFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParamSpec)
}

void ParamSpec::InitAsDefaultInstance() {
}

ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_mode_ = 0;
  lr_mult_ = 1;
  decay_mult_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:caffe.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamSpec_descriptor_;
}

const ParamSpec& ParamSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ParamSpec* ParamSpec::default_instance_ = NULL;

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
  ParamSpec* n = new ParamSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParamSpec)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ParamSpec.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_share_mode;
        break;
      }

      // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_share_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ParamSpec_DimCheckMode_IsValid(value)) {
            set_share_mode(static_cast< ::caffe::ParamSpec_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lr_mult;
        break;
      }

      // optional float lr_mult = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_lr_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));
          set_has_lr_mult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_decay_mult;
        break;
      }

      // optional float decay_mult = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_decay_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));
          set_has_decay_mult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->share_mode(), output);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lr_mult(), output);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->decay_mult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->decay_mult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
  return target;
}

int ParamSpec::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParamSpec)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    if (has_share_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (has_lr_mult()) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (has_decay_mult()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParamSpec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ParamSpec* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParamSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParamSpec)
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParamSpec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_share_mode()) {
      set_share_mode(from.share_mode());
    }
    if (from.has_lr_mult()) {
      set_lr_mult(from.lr_mult());
    }
    if (from.has_decay_mult()) {
      set_decay_mult(from.decay_mult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {

  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
  name_.Swap(&other->name_);
  std::swap(share_mode_, other->share_mode_);
  std::swap(lr_mult_, other->lr_mult_);
  std::swap(decay_mult_, other->decay_mult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamSpec_descriptor_;
  metadata.reflection = ParamSpec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamSpec

// optional string name = 1;
bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
 void ParamSpec::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
 void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
 ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
 ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
 void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
 float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
 void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
 float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
 void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kLossWeightFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kPropagateDownFieldNumber;
const int LayerParameter::kIncludeFieldNumber;
const int LayerParameter::kExcludeFieldNumber;
const int LayerParameter::kTransformParamFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kAccuracyParamFieldNumber;
const int LayerParameter::kArgmaxParamFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kBiasParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kContrastiveLossParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kDummyDataParamFieldNumber;
const int LayerParameter::kEltwiseParamFieldNumber;
const int LayerParameter::kEluParamFieldNumber;
const int LayerParameter::kEmbedParamFieldNumber;
const int LayerParameter::kExpParamFieldNumber;
const int LayerParameter::kFlattenParamFieldNumber;
const int LayerParameter::kHdf5DataParamFieldNumber;
const int LayerParameter::kHdf5OutputParamFieldNumber;
const int LayerParameter::kHingeLossParamFieldNumber;
const int LayerParameter::kImageDataParamFieldNumber;
const int LayerParameter::kInfogainLossParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kInputParamFieldNumber;
const int LayerParameter::kLogParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kMemoryDataParamFieldNumber;
const int LayerParameter::kMvnParamFieldNumber;
const int LayerParameter::kParameterParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kPowerParamFieldNumber;
const int LayerParameter::kPreluParamFieldNumber;
const int LayerParameter::kPythonParamFieldNumber;
const int LayerParameter::kRecurrentParamFieldNumber;
const int LayerParameter::kReductionParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kReshapeParamFieldNumber;
const int LayerParameter::kScaleParamFieldNumber;
const int LayerParameter::kSigmoidParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kSppParamFieldNumber;
const int LayerParameter::kSliceParamFieldNumber;
const int LayerParameter::kTanhParamFieldNumber;
const int LayerParameter::kThresholdParamFieldNumber;
const int LayerParameter::kTileParamFieldNumber;
const int LayerParameter::kWindowDataParamFieldNumber;
const int LayerParameter::kBnParamFieldNumber;
const int LayerParameter::kLocalParamFieldNumber;
const int LayerParameter::kInsanityParamFieldNumber;
const int LayerParameter::kTripletLossParamFieldNumber;
const int LayerParameter::kRoiPoolingParamFieldNumber;
const int LayerParameter::kEltwiseAffineParamFieldNumber;
const int LayerParameter::kSubRegionParamFieldNumber;
const int LayerParameter::kNoiseParamFieldNumber;
const int LayerParameter::kHotspotParamFieldNumber;
const int LayerParameter::kPredictBoxParamFieldNumber;
const int LayerParameter::kMilDataParamFieldNumber;
const int LayerParameter::kMilParamFieldNumber;
const int LayerParameter::kFcnDataParamFieldNumber;
const int LayerParameter::kCenterLossParamFieldNumber;
const int LayerParameter::kFlipParamFieldNumber;
const int LayerParameter::kInnerDistanceParamFieldNumber;
const int LayerParameter::kNormalizeParamFieldNumber;
const int LayerParameter::kGeneralContrastiveLossParamFieldNumber;
const int LayerParameter::kSoftContrastiveLossParamFieldNumber;
const int LayerParameter::kGeneralTripletLossParamFieldNumber;
const int LayerParameter::kSoftTruncationParamFieldNumber;
const int LayerParameter::kProposalParamFieldNumber;
const int LayerParameter::kPsroiPoolingParamFieldNumber;
const int LayerParameter::kPairwiseParamFieldNumber;
const int LayerParameter::kSmoothl1ParamFieldNumber;
const int LayerParameter::kBatchContrastiveLossParamFieldNumber;
const int LayerParameter::kPermuteParamFieldNumber;
const int LayerParameter::kTruncationParamFieldNumber;
const int LayerParameter::kNcaParamFieldNumber;
const int LayerParameter::kLargemarginInnerProductParamFieldNumber;
const int LayerParameter::kLabelSpecificRescaleParamFieldNumber;
const int LayerParameter::kInfimumLossParamFieldNumber;
const int LayerParameter::kOrdinalRegressionLossParamFieldNumber;
const int LayerParameter::kResizeParamFieldNumber;
const int LayerParameter::kMarginInnerProductParamFieldNumber;
const int LayerParameter::kFeatureDecayLossParamFieldNumber;
const int LayerParameter::kConfidencePenaltyLossParamFieldNumber;
const int LayerParameter::kFocalLossParamFieldNumber;
const int LayerParameter::kLabelSpecificMarginParamFieldNumber;
const int LayerParameter::kChannelScaleParamFieldNumber;
const int LayerParameter::kLabelSpecificAffineParamFieldNumber;
const int LayerParameter::kLabelSpecificHardMarginParamFieldNumber;
const int LayerParameter::kLabelSpecificAddParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerParameter)
}

void LayerParameter::InitAsDefaultInstance() {
  transform_param_ = const_cast< ::caffe::TransformationParameter*>(&::caffe::TransformationParameter::default_instance());
  loss_param_ = const_cast< ::caffe::LossParameter*>(&::caffe::LossParameter::default_instance());
  accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(&::caffe::AccuracyParameter::default_instance());
  argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(&::caffe::ArgMaxParameter::default_instance());
  batch_norm_param_ = const_cast< ::caffe::BatchNormParameter*>(&::caffe::BatchNormParameter::default_instance());
  bias_param_ = const_cast< ::caffe::BiasParameter*>(&::caffe::BiasParameter::default_instance());
  concat_param_ = const_cast< ::caffe::ConcatParameter*>(&::caffe::ConcatParameter::default_instance());
  contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(&::caffe::ContrastiveLossParameter::default_instance());
  convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(&::caffe::ConvolutionParameter::default_instance());
  crop_param_ = const_cast< ::caffe::CropParameter*>(&::caffe::CropParameter::default_instance());
  data_param_ = const_cast< ::caffe::DataParameter*>(&::caffe::DataParameter::default_instance());
  dropout_param_ = const_cast< ::caffe::DropoutParameter*>(&::caffe::DropoutParameter::default_instance());
  dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(&::caffe::DummyDataParameter::default_instance());
  eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(&::caffe::EltwiseParameter::default_instance());
  elu_param_ = const_cast< ::caffe::ELUParameter*>(&::caffe::ELUParameter::default_instance());
  embed_param_ = const_cast< ::caffe::EmbedParameter*>(&::caffe::EmbedParameter::default_instance());
  exp_param_ = const_cast< ::caffe::ExpParameter*>(&::caffe::ExpParameter::default_instance());
  flatten_param_ = const_cast< ::caffe::FlattenParameter*>(&::caffe::FlattenParameter::default_instance());
  hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(&::caffe::HDF5DataParameter::default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(&::caffe::HDF5OutputParameter::default_instance());
  hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(&::caffe::HingeLossParameter::default_instance());
  image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(&::caffe::ImageDataParameter::default_instance());
  infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(&::caffe::InfogainLossParameter::default_instance());
  inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(&::caffe::InnerProductParameter::default_instance());
  input_param_ = const_cast< ::caffe::InputParameter*>(&::caffe::InputParameter::default_instance());
  log_param_ = const_cast< ::caffe::LogParameter*>(&::caffe::LogParameter::default_instance());
  lrn_param_ = const_cast< ::caffe::LRNParameter*>(&::caffe::LRNParameter::default_instance());
  memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(&::caffe::MemoryDataParameter::default_instance());
  mvn_param_ = const_cast< ::caffe::MVNParameter*>(&::caffe::MVNParameter::default_instance());
  parameter_param_ = const_cast< ::caffe::ParameterParameter*>(&::caffe::ParameterParameter::default_instance());
  pooling_param_ = const_cast< ::caffe::PoolingParameter*>(&::caffe::PoolingParameter::default_instance());
  power_param_ = const_cast< ::caffe::PowerParameter*>(&::caffe::PowerParameter::default_instance());
  prelu_param_ = const_cast< ::caffe::PReLUParameter*>(&::caffe::PReLUParameter::default_instance());
  python_param_ = const_cast< ::caffe::PythonParameter*>(&::caffe::PythonParameter::default_instance());
  recurrent_param_ = const_cast< ::caffe::RecurrentParameter*>(&::caffe::RecurrentParameter::default_instance());
  reduction_param_ = const_cast< ::caffe::ReductionParameter*>(&::caffe::ReductionParameter::default_instance());
  relu_param_ = const_cast< ::caffe::ReLUParameter*>(&::caffe::ReLUParameter::default_instance());
  reshape_param_ = const_cast< ::caffe::ReshapeParameter*>(&::caffe::ReshapeParameter::default_instance());
  scale_param_ = const_cast< ::caffe::ScaleParameter*>(&::caffe::ScaleParameter::default_instance());
  sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(&::caffe::SigmoidParameter::default_instance());
  softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(&::caffe::SoftmaxParameter::default_instance());
  spp_param_ = const_cast< ::caffe::SPPParameter*>(&::caffe::SPPParameter::default_instance());
  slice_param_ = const_cast< ::caffe::SliceParameter*>(&::caffe::SliceParameter::default_instance());
  tanh_param_ = const_cast< ::caffe::TanHParameter*>(&::caffe::TanHParameter::default_instance());
  threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(&::caffe::ThresholdParameter::default_instance());
  tile_param_ = const_cast< ::caffe::TileParameter*>(&::caffe::TileParameter::default_instance());
  window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(&::caffe::WindowDataParameter::default_instance());
  bn_param_ = const_cast< ::caffe::BNParameter*>(&::caffe::BNParameter::default_instance());
  local_param_ = const_cast< ::caffe::LocalParameter*>(&::caffe::LocalParameter::default_instance());
  insanity_param_ = const_cast< ::caffe::InsanityParameter*>(&::caffe::InsanityParameter::default_instance());
  triplet_loss_param_ = const_cast< ::caffe::TripletLossParameter*>(&::caffe::TripletLossParameter::default_instance());
  roi_pooling_param_ = const_cast< ::caffe::ROIPoolingParameter*>(&::caffe::ROIPoolingParameter::default_instance());
  eltwise_affine_param_ = const_cast< ::caffe::EltwiseAffineParameter*>(&::caffe::EltwiseAffineParameter::default_instance());
  sub_region_param_ = const_cast< ::caffe::SubRegionParameter*>(&::caffe::SubRegionParameter::default_instance());
  noise_param_ = const_cast< ::caffe::NoiseParameter*>(&::caffe::NoiseParameter::default_instance());
  hotspot_param_ = const_cast< ::caffe::HotspotParameter*>(&::caffe::HotspotParameter::default_instance());
  predict_box_param_ = const_cast< ::caffe::PredictBoxParameter*>(&::caffe::PredictBoxParameter::default_instance());
  mil_data_param_ = const_cast< ::caffe::MILDataParameter*>(&::caffe::MILDataParameter::default_instance());
  mil_param_ = const_cast< ::caffe::MILParameter*>(&::caffe::MILParameter::default_instance());
  fcn_data_param_ = const_cast< ::caffe::FCNDataParameter*>(&::caffe::FCNDataParameter::default_instance());
  center_loss_param_ = const_cast< ::caffe::CenterLossParameter*>(&::caffe::CenterLossParameter::default_instance());
  flip_param_ = const_cast< ::caffe::FlipParameter*>(&::caffe::FlipParameter::default_instance());
  inner_distance_param_ = const_cast< ::caffe::InnerDistanceParameter*>(&::caffe::InnerDistanceParameter::default_instance());
  normalize_param_ = const_cast< ::caffe::NormalizeParameter*>(&::caffe::NormalizeParameter::default_instance());
  general_contrastive_loss_param_ = const_cast< ::caffe::GeneralContrastiveParameter*>(&::caffe::GeneralContrastiveParameter::default_instance());
  soft_contrastive_loss_param_ = const_cast< ::caffe::SoftContrastiveParameter*>(&::caffe::SoftContrastiveParameter::default_instance());
  general_triplet_loss_param_ = const_cast< ::caffe::GeneralTripletParameter*>(&::caffe::GeneralTripletParameter::default_instance());
  soft_truncation_param_ = const_cast< ::caffe::SoftTruncationParameter*>(&::caffe::SoftTruncationParameter::default_instance());
  proposal_param_ = const_cast< ::caffe::ProposalParameter*>(&::caffe::ProposalParameter::default_instance());
  psroi_pooling_param_ = const_cast< ::caffe::PSROIPoolingParameter*>(&::caffe::PSROIPoolingParameter::default_instance());
  pairwise_param_ = const_cast< ::caffe::PairwiseParameter*>(&::caffe::PairwiseParameter::default_instance());
  smoothl1_param_ = const_cast< ::caffe::SmoothL1Parameter*>(&::caffe::SmoothL1Parameter::default_instance());
  batch_contrastive_loss_param_ = const_cast< ::caffe::BatchContrastiveParameter*>(&::caffe::BatchContrastiveParameter::default_instance());
  permute_param_ = const_cast< ::caffe::PermuteParameter*>(&::caffe::PermuteParameter::default_instance());
  truncation_param_ = const_cast< ::caffe::TruncationParameter*>(&::caffe::TruncationParameter::default_instance());
  nca_param_ = const_cast< ::caffe::NCAParameter*>(&::caffe::NCAParameter::default_instance());
  largemargin_inner_product_param_ = const_cast< ::caffe::LargeMarginInnerProductParameter*>(&::caffe::LargeMarginInnerProductParameter::default_instance());
  label_specific_rescale_param_ = const_cast< ::caffe::LabelSpecificRescaleParameter*>(&::caffe::LabelSpecificRescaleParameter::default_instance());
  infimum_loss_param_ = const_cast< ::caffe::InfimumLossParamter*>(&::caffe::InfimumLossParamter::default_instance());
  ordinal_regression_loss_param_ = const_cast< ::caffe::OrdinalRegressionParameter*>(&::caffe::OrdinalRegressionParameter::default_instance());
  resize_param_ = const_cast< ::caffe::ResizeParameter*>(&::caffe::ResizeParameter::default_instance());
  margin_inner_product_param_ = const_cast< ::caffe::MarginInnerProductParameter*>(&::caffe::MarginInnerProductParameter::default_instance());
  feature_decay_loss_param_ = const_cast< ::caffe::FeatureDecayLossParameter*>(&::caffe::FeatureDecayLossParameter::default_instance());
  confidence_penalty_loss_param_ = const_cast< ::caffe::ConfidencePenaltyLossParameter*>(&::caffe::ConfidencePenaltyLossParameter::default_instance());
  focal_loss_param_ = const_cast< ::caffe::FocalLossParameter*>(&::caffe::FocalLossParameter::default_instance());
  label_specific_margin_param_ = const_cast< ::caffe::LabelSpecificMarginParameter*>(&::caffe::LabelSpecificMarginParameter::default_instance());
  channel_scale_param_ = const_cast< ::caffe::ChannelScaleParameter*>(&::caffe::ChannelScaleParameter::default_instance());
  label_specific_affine_param_ = const_cast< ::caffe::LabelSpecificAffineParameter*>(&::caffe::LabelSpecificAffineParameter::default_instance());
  label_specific_hard_margin_param_ = const_cast< ::caffe::LabelSpecificHardMarginParameter*>(&::caffe::LabelSpecificHardMarginParameter::default_instance());
  label_specific_add_param_ = const_cast< ::caffe::LabelSpecificAddParameter*>(&::caffe::LabelSpecificAddParameter::default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LayerParameter)
}

void LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_ = 0;
  transform_param_ = NULL;
  loss_param_ = NULL;
  accuracy_param_ = NULL;
  argmax_param_ = NULL;
  batch_norm_param_ = NULL;
  bias_param_ = NULL;
  concat_param_ = NULL;
  contrastive_loss_param_ = NULL;
  convolution_param_ = NULL;
  crop_param_ = NULL;
  data_param_ = NULL;
  dropout_param_ = NULL;
  dummy_data_param_ = NULL;
  eltwise_param_ = NULL;
  elu_param_ = NULL;
  embed_param_ = NULL;
  exp_param_ = NULL;
  flatten_param_ = NULL;
  hdf5_data_param_ = NULL;
  hdf5_output_param_ = NULL;
  hinge_loss_param_ = NULL;
  image_data_param_ = NULL;
  infogain_loss_param_ = NULL;
  inner_product_param_ = NULL;
  input_param_ = NULL;
  log_param_ = NULL;
  lrn_param_ = NULL;
  memory_data_param_ = NULL;
  mvn_param_ = NULL;
  parameter_param_ = NULL;
  pooling_param_ = NULL;
  power_param_ = NULL;
  prelu_param_ = NULL;
  python_param_ = NULL;
  recurrent_param_ = NULL;
  reduction_param_ = NULL;
  relu_param_ = NULL;
  reshape_param_ = NULL;
  scale_param_ = NULL;
  sigmoid_param_ = NULL;
  softmax_param_ = NULL;
  spp_param_ = NULL;
  slice_param_ = NULL;
  tanh_param_ = NULL;
  threshold_param_ = NULL;
  tile_param_ = NULL;
  window_data_param_ = NULL;
  bn_param_ = NULL;
  local_param_ = NULL;
  insanity_param_ = NULL;
  triplet_loss_param_ = NULL;
  roi_pooling_param_ = NULL;
  eltwise_affine_param_ = NULL;
  sub_region_param_ = NULL;
  noise_param_ = NULL;
  hotspot_param_ = NULL;
  predict_box_param_ = NULL;
  mil_data_param_ = NULL;
  mil_param_ = NULL;
  fcn_data_param_ = NULL;
  center_loss_param_ = NULL;
  flip_param_ = NULL;
  inner_distance_param_ = NULL;
  normalize_param_ = NULL;
  general_contrastive_loss_param_ = NULL;
  soft_contrastive_loss_param_ = NULL;
  general_triplet_loss_param_ = NULL;
  soft_truncation_param_ = NULL;
  proposal_param_ = NULL;
  psroi_pooling_param_ = NULL;
  pairwise_param_ = NULL;
  smoothl1_param_ = NULL;
  batch_contrastive_loss_param_ = NULL;
  permute_param_ = NULL;
  truncation_param_ = NULL;
  nca_param_ = NULL;
  largemargin_inner_product_param_ = NULL;
  label_specific_rescale_param_ = NULL;
  infimum_loss_param_ = NULL;
  ordinal_regression_loss_param_ = NULL;
  resize_param_ = NULL;
  margin_inner_product_param_ = NULL;
  feature_decay_loss_param_ = NULL;
  confidence_penalty_loss_param_ = NULL;
  focal_loss_param_ = NULL;
  label_specific_margin_param_ = NULL;
  channel_scale_param_ = NULL;
  label_specific_affine_param_ = NULL;
  label_specific_hard_margin_param_ = NULL;
  label_specific_add_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete transform_param_;
    delete loss_param_;
    delete accuracy_param_;
    delete argmax_param_;
    delete batch_norm_param_;
    delete bias_param_;
    delete concat_param_;
    delete contrastive_loss_param_;
    delete convolution_param_;
    delete crop_param_;
    delete data_param_;
    delete dropout_param_;
    delete dummy_data_param_;
    delete eltwise_param_;
    delete elu_param_;
    delete embed_param_;
    delete exp_param_;
    delete flatten_param_;
    delete hdf5_data_param_;
    delete hdf5_output_param_;
    delete hinge_loss_param_;
    delete image_data_param_;
    delete infogain_loss_param_;
    delete inner_product_param_;
    delete input_param_;
    delete log_param_;
    delete lrn_param_;
    delete memory_data_param_;
    delete mvn_param_;
    delete parameter_param_;
    delete pooling_param_;
    delete power_param_;
    delete prelu_param_;
    delete python_param_;
    delete recurrent_param_;
    delete reduction_param_;
    delete relu_param_;
    delete reshape_param_;
    delete scale_param_;
    delete sigmoid_param_;
    delete softmax_param_;
    delete spp_param_;
    delete slice_param_;
    delete tanh_param_;
    delete threshold_param_;
    delete tile_param_;
    delete window_data_param_;
    delete bn_param_;
    delete local_param_;
    delete insanity_param_;
    delete triplet_loss_param_;
    delete roi_pooling_param_;
    delete eltwise_affine_param_;
    delete sub_region_param_;
    delete noise_param_;
    delete hotspot_param_;
    delete predict_box_param_;
    delete mil_data_param_;
    delete mil_param_;
    delete fcn_data_param_;
    delete center_loss_param_;
    delete flip_param_;
    delete inner_distance_param_;
    delete normalize_param_;
    delete general_contrastive_loss_param_;
    delete soft_contrastive_loss_param_;
    delete general_triplet_loss_param_;
    delete soft_truncation_param_;
    delete proposal_param_;
    delete psroi_pooling_param_;
    delete pairwise_param_;
    delete smoothl1_param_;
    delete batch_contrastive_loss_param_;
    delete permute_param_;
    delete truncation_param_;
    delete nca_param_;
    delete largemargin_inner_product_param_;
    delete label_specific_rescale_param_;
    delete infimum_loss_param_;
    delete ordinal_regression_loss_param_;
    delete resize_param_;
    delete margin_inner_product_param_;
    delete feature_decay_loss_param_;
    delete confidence_penalty_loss_param_;
    delete focal_loss_param_;
    delete label_specific_margin_param_;
    delete channel_scale_param_;
    delete label_specific_affine_param_;
    delete label_specific_hard_margin_param_;
    delete label_specific_add_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LayerParameter* LayerParameter::default_instance_ = NULL;

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
  LayerParameter* n = new LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerParameter)
  if (_has_bits_[0 / 32] & 19u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    phase_ = 0;
  }
  if (_has_bits_[8 / 32] & 63488u) {
    if (has_transform_param()) {
      if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_loss_param()) {
      if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_accuracy_param()) {
      if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_argmax_param()) {
      if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_batch_norm_param()) {
      if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_bias_param()) {
      if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
    if (has_convolution_param()) {
      if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_crop_param()) {
      if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
    }
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_dummy_data_param()) {
      if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_eltwise_param()) {
      if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_elu_param()) {
      if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
    }
    if (has_embed_param()) {
      if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_flatten_param()) {
      if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
    if (has_hinge_loss_param()) {
      if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_image_data_param()) {
      if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_input_param()) {
      if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
    }
    if (has_log_param()) {
      if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (has_mvn_param()) {
      if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280u) {
    if (has_parameter_param()) {
      if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
    }
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_prelu_param()) {
      if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
    }
    if (has_python_param()) {
      if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
    }
    if (has_recurrent_param()) {
      if (recurrent_param_ != NULL) recurrent_param_->::caffe::RecurrentParameter::Clear();
    }
    if (has_reduction_param()) {
      if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    if (has_reshape_param()) {
      if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
    }
    if (has_scale_param()) {
      if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_spp_param()) {
      if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
    }
    if (has_slice_param()) {
      if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
    }
    if (has_tanh_param()) {
      if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_threshold_param()) {
      if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    if (has_tile_param()) {
      if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
    }
    if (has_window_data_param()) {
      if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
    }
    if (has_bn_param()) {
      if (bn_param_ != NULL) bn_param_->::caffe::BNParameter::Clear();
    }
    if (has_local_param()) {
      if (local_param_ != NULL) local_param_->::caffe::LocalParameter::Clear();
    }
    if (has_insanity_param()) {
      if (insanity_param_ != NULL) insanity_param_->::caffe::InsanityParameter::Clear();
    }
    if (has_triplet_loss_param()) {
      if (triplet_loss_param_ != NULL) triplet_loss_param_->::caffe::TripletLossParameter::Clear();
    }
    if (has_roi_pooling_param()) {
      if (roi_pooling_param_ != NULL) roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
    }
    if (has_eltwise_affine_param()) {
      if (eltwise_affine_param_ != NULL) eltwise_affine_param_->::caffe::EltwiseAffineParameter::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255u) {
    if (has_sub_region_param()) {
      if (sub_region_param_ != NULL) sub_region_param_->::caffe::SubRegionParameter::Clear();
    }
    if (has_noise_param()) {
      if (noise_param_ != NULL) noise_param_->::caffe::NoiseParameter::Clear();
    }
    if (has_hotspot_param()) {
      if (hotspot_param_ != NULL) hotspot_param_->::caffe::HotspotParameter::Clear();
    }
    if (has_predict_box_param()) {
      if (predict_box_param_ != NULL) predict_box_param_->::caffe::PredictBoxParameter::Clear();
    }
    if (has_mil_data_param()) {
      if (mil_data_param_ != NULL) mil_data_param_->::caffe::MILDataParameter::Clear();
    }
    if (has_mil_param()) {
      if (mil_param_ != NULL) mil_param_->::caffe::MILParameter::Clear();
    }
    if (has_fcn_data_param()) {
      if (fcn_data_param_ != NULL) fcn_data_param_->::caffe::FCNDataParameter::Clear();
    }
    if (has_center_loss_param()) {
      if (center_loss_param_ != NULL) center_loss_param_->::caffe::CenterLossParameter::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280u) {
    if (has_flip_param()) {
      if (flip_param_ != NULL) flip_param_->::caffe::FlipParameter::Clear();
    }
    if (has_inner_distance_param()) {
      if (inner_distance_param_ != NULL) inner_distance_param_->::caffe::InnerDistanceParameter::Clear();
    }
    if (has_normalize_param()) {
      if (normalize_param_ != NULL) normalize_param_->::caffe::NormalizeParameter::Clear();
    }
    if (has_general_contrastive_loss_param()) {
      if (general_contrastive_loss_param_ != NULL) general_contrastive_loss_param_->::caffe::GeneralContrastiveParameter::Clear();
    }
    if (has_soft_contrastive_loss_param()) {
      if (soft_contrastive_loss_param_ != NULL) soft_contrastive_loss_param_->::caffe::SoftContrastiveParameter::Clear();
    }
    if (has_general_triplet_loss_param()) {
      if (general_triplet_loss_param_ != NULL) general_triplet_loss_param_->::caffe::GeneralTripletParameter::Clear();
    }
    if (has_soft_truncation_param()) {
      if (soft_truncation_param_ != NULL) soft_truncation_param_->::caffe::SoftTruncationParameter::Clear();
    }
    if (has_proposal_param()) {
      if (proposal_param_ != NULL) proposal_param_->::caffe::ProposalParameter::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680u) {
    if (has_psroi_pooling_param()) {
      if (psroi_pooling_param_ != NULL) psroi_pooling_param_->::caffe::PSROIPoolingParameter::Clear();
    }
    if (has_pairwise_param()) {
      if (pairwise_param_ != NULL) pairwise_param_->::caffe::PairwiseParameter::Clear();
    }
    if (has_smoothl1_param()) {
      if (smoothl1_param_ != NULL) smoothl1_param_->::caffe::SmoothL1Parameter::Clear();
    }
    if (has_batch_contrastive_loss_param()) {
      if (batch_contrastive_loss_param_ != NULL) batch_contrastive_loss_param_->::caffe::BatchContrastiveParameter::Clear();
    }
    if (has_permute_param()) {
      if (permute_param_ != NULL) permute_param_->::caffe::PermuteParameter::Clear();
    }
    if (has_truncation_param()) {
      if (truncation_param_ != NULL) truncation_param_->::caffe::TruncationParameter::Clear();
    }
    if (has_nca_param()) {
      if (nca_param_ != NULL) nca_param_->::caffe::NCAParameter::Clear();
    }
    if (has_largemargin_inner_product_param()) {
      if (largemargin_inner_product_param_ != NULL) largemargin_inner_product_param_->::caffe::LargeMarginInnerProductParameter::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 4278190080u) {
    if (has_label_specific_rescale_param()) {
      if (label_specific_rescale_param_ != NULL) label_specific_rescale_param_->::caffe::LabelSpecificRescaleParameter::Clear();
    }
    if (has_infimum_loss_param()) {
      if (infimum_loss_param_ != NULL) infimum_loss_param_->::caffe::InfimumLossParamter::Clear();
    }
    if (has_ordinal_regression_loss_param()) {
      if (ordinal_regression_loss_param_ != NULL) ordinal_regression_loss_param_->::caffe::OrdinalRegressionParameter::Clear();
    }
    if (has_resize_param()) {
      if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
    }
    if (has_margin_inner_product_param()) {
      if (margin_inner_product_param_ != NULL) margin_inner_product_param_->::caffe::MarginInnerProductParameter::Clear();
    }
    if (has_feature_decay_loss_param()) {
      if (feature_decay_loss_param_ != NULL) feature_decay_loss_param_->::caffe::FeatureDecayLossParameter::Clear();
    }
    if (has_confidence_penalty_loss_param()) {
      if (confidence_penalty_loss_param_ != NULL) confidence_penalty_loss_param_->::caffe::ConfidencePenaltyLossParameter::Clear();
    }
    if (has_focal_loss_param()) {
      if (focal_loss_param_ != NULL) focal_loss_param_->::caffe::FocalLossParameter::Clear();
    }
  }
  if (_has_bits_[96 / 32] & 31u) {
    if (has_label_specific_margin_param()) {
      if (label_specific_margin_param_ != NULL) label_specific_margin_param_->::caffe::LabelSpecificMarginParameter::Clear();
    }
    if (has_channel_scale_param()) {
      if (channel_scale_param_ != NULL) channel_scale_param_->::caffe::ChannelScaleParameter::Clear();
    }
    if (has_label_specific_affine_param()) {
      if (label_specific_affine_param_ != NULL) label_specific_affine_param_->::caffe::LabelSpecificAffineParameter::Clear();
    }
    if (has_label_specific_hard_margin_param()) {
      if (label_specific_hard_margin_param_ != NULL) label_specific_hard_margin_param_->::caffe::LabelSpecificHardMarginParameter::Clear();
    }
    if (has_label_specific_add_param()) {
      if (label_specific_add_param_ != NULL) label_specific_add_param_->::caffe::LabelSpecificAddParameter::Clear();
    }
  }
  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blobs_.Clear();
  propagate_down_.Clear();
  include_.Clear();
  exclude_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(40520290);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        if (input->ExpectTag(34)) goto parse_top;
        break;
      }

      // repeated string top = 4;
      case 4: {
        if (tag == 34) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_top;
        if (input->ExpectTag(45)) goto parse_loss_weight;
        break;
      }

      // repeated float loss_weight = 5;
      case 5: {
        if (tag == 45) {
         parse_loss_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_loss_weight())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_loss_weight;
        if (input->ExpectTag(50)) goto parse_param;
        break;
      }

      // repeated .caffe.ParamSpec param = 6;
      case 6: {
        if (tag == 50) {
         parse_param:
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_param;
        if (input->ExpectTag(58)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.BlobProto blobs = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_blobs;
        if (input->ExpectTag(66)) goto parse_loop_include;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.NetStateRule include = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_include:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_include;
        if (input->ExpectTag(74)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.NetStateRule exclude = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exclude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_phase;
        break;
      }

      // optional .caffe.Phase phase = 10;
      case 10: {
        if (tag == 80) {
         parse_phase:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_propagate_down;
        break;
      }

      // repeated bool propagate_down = 11;
      case 11: {
        if (tag == 88) {
         parse_propagate_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88, input, this->mutable_propagate_down())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_propagate_down())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_propagate_down;
        if (input->ExpectTag(802)) goto parse_transform_param;
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 100;
      case 100: {
        if (tag == 802) {
         parse_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_loss_param;
        break;
      }

      // optional .caffe.LossParameter loss_param = 101;
      case 101: {
        if (tag == 810) {
         parse_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_accuracy_param;
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 102;
      case 102: {
        if (tag == 818) {
         parse_accuracy_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_argmax_param;
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 103;
      case 103: {
        if (tag == 826) {
         parse_argmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_concat_param;
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 104;
      case 104: {
        if (tag == 834) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_contrastive_loss_param;
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
      case 105: {
        if (tag == 842) {
         parse_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_convolution_param;
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 106;
      case 106: {
        if (tag == 850) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_data_param;
        break;
      }

      // optional .caffe.DataParameter data_param = 107;
      case 107: {
        if (tag == 858) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_dropout_param;
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 108;
      case 108: {
        if (tag == 866) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_dummy_data_param;
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 109;
      case 109: {
        if (tag == 874) {
         parse_dummy_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_eltwise_param;
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 110;
      case 110: {
        if (tag == 882) {
         parse_eltwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_exp_param;
        break;
      }

      // optional .caffe.ExpParameter exp_param = 111;
      case 111: {
        if (tag == 890) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_hdf5_data_param;
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
      case 112: {
        if (tag == 898) {
         parse_hdf5_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(906)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
      case 113: {
        if (tag == 906) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_hinge_loss_param;
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 114;
      case 114: {
        if (tag == 914) {
         parse_hinge_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_image_data_param;
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 115;
      case 115: {
        if (tag == 922) {
         parse_image_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_infogain_loss_param;
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
      case 116: {
        if (tag == 930) {
         parse_infogain_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(938)) goto parse_inner_product_param;
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 117;
      case 117: {
        if (tag == 938) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(946)) goto parse_lrn_param;
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 118;
      case 118: {
        if (tag == 946) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(954)) goto parse_memory_data_param;
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 119;
      case 119: {
        if (tag == 954) {
         parse_memory_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_mvn_param;
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 120;
      case 120: {
        if (tag == 962) {
         parse_mvn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_pooling_param;
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 121;
      case 121: {
        if (tag == 970) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(978)) goto parse_power_param;
        break;
      }

      // optional .caffe.PowerParameter power_param = 122;
      case 122: {
        if (tag == 978) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(986)) goto parse_relu_param;
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 123;
      case 123: {
        if (tag == 986) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(994)) goto parse_sigmoid_param;
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 124;
      case 124: {
        if (tag == 994) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1002)) goto parse_softmax_param;
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 125;
      case 125: {
        if (tag == 1002) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1010)) goto parse_slice_param;
        break;
      }

      // optional .caffe.SliceParameter slice_param = 126;
      case 126: {
        if (tag == 1010) {
         parse_slice_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1018)) goto parse_tanh_param;
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 127;
      case 127: {
        if (tag == 1018) {
         parse_tanh_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1026)) goto parse_threshold_param;
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 128;
      case 128: {
        if (tag == 1026) {
         parse_threshold_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_window_data_param;
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 129;
      case 129: {
        if (tag == 1034) {
         parse_window_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_python_param;
        break;
      }

      // optional .caffe.PythonParameter python_param = 130;
      case 130: {
        if (tag == 1042) {
         parse_python_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_python_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_prelu_param;
        break;
      }

      // optional .caffe.PReLUParameter prelu_param = 131;
      case 131: {
        if (tag == 1050) {
         parse_prelu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_spp_param;
        break;
      }

      // optional .caffe.SPPParameter spp_param = 132;
      case 132: {
        if (tag == 1058) {
         parse_spp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1066)) goto parse_reshape_param;
        break;
      }

      // optional .caffe.ReshapeParameter reshape_param = 133;
      case 133: {
        if (tag == 1066) {
         parse_reshape_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1074)) goto parse_log_param;
        break;
      }

      // optional .caffe.LogParameter log_param = 134;
      case 134: {
        if (tag == 1074) {
         parse_log_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1082)) goto parse_flatten_param;
        break;
      }

      // optional .caffe.FlattenParameter flatten_param = 135;
      case 135: {
        if (tag == 1082) {
         parse_flatten_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flatten_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1090)) goto parse_reduction_param;
        break;
      }

      // optional .caffe.ReductionParameter reduction_param = 136;
      case 136: {
        if (tag == 1090) {
         parse_reduction_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduction_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1098)) goto parse_embed_param;
        break;
      }

      // optional .caffe.EmbedParameter embed_param = 137;
      case 137: {
        if (tag == 1098) {
         parse_embed_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embed_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1106)) goto parse_tile_param;
        break;
      }

      // optional .caffe.TileParameter tile_param = 138;
      case 138: {
        if (tag == 1106) {
         parse_tile_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1114)) goto parse_batch_norm_param;
        break;
      }

      // optional .caffe.BatchNormParameter batch_norm_param = 139;
      case 139: {
        if (tag == 1114) {
         parse_batch_norm_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_norm_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_elu_param;
        break;
      }

      // optional .caffe.ELUParameter elu_param = 140;
      case 140: {
        if (tag == 1122) {
         parse_elu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_bias_param;
        break;
      }

      // optional .caffe.BiasParameter bias_param = 141;
      case 141: {
        if (tag == 1130) {
         parse_bias_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1138)) goto parse_scale_param;
        break;
      }

      // optional .caffe.ScaleParameter scale_param = 142;
      case 142: {
        if (tag == 1138) {
         parse_scale_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1146)) goto parse_input_param;
        break;
      }

      // optional .caffe.InputParameter input_param = 143;
      case 143: {
        if (tag == 1146) {
         parse_input_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1154)) goto parse_crop_param;
        break;
      }

      // optional .caffe.CropParameter crop_param = 144;
      case 144: {
        if (tag == 1154) {
         parse_crop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1162)) goto parse_parameter_param;
        break;
      }

      // optional .caffe.ParameterParameter parameter_param = 145;
      case 145: {
        if (tag == 1162) {
         parse_parameter_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameter_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1170)) goto parse_recurrent_param;
        break;
      }

      // optional .caffe.RecurrentParameter recurrent_param = 146;
      case 146: {
        if (tag == 1170) {
         parse_recurrent_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recurrent_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_bn_param;
        break;
      }

      // optional .caffe.BNParameter bn_param = 200;
      case 200: {
        if (tag == 1602) {
         parse_bn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_local_param;
        break;
      }

      // optional .caffe.LocalParameter local_param = 201;
      case 201: {
        if (tag == 1610) {
         parse_local_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_insanity_param;
        break;
      }

      // optional .caffe.InsanityParameter insanity_param = 202;
      case 202: {
        if (tag == 1618) {
         parse_insanity_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insanity_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_triplet_loss_param;
        break;
      }

      // optional .caffe.TripletLossParameter triplet_loss_param = 203;
      case 203: {
        if (tag == 1626) {
         parse_triplet_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triplet_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1634)) goto parse_roi_pooling_param;
        break;
      }

      // optional .caffe.ROIPoolingParameter roi_pooling_param = 204;
      case 204: {
        if (tag == 1634) {
         parse_roi_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1642)) goto parse_eltwise_affine_param;
        break;
      }

      // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 205;
      case 205: {
        if (tag == 1642) {
         parse_eltwise_affine_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_affine_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1650)) goto parse_sub_region_param;
        break;
      }

      // optional .caffe.SubRegionParameter sub_region_param = 206;
      case 206: {
        if (tag == 1650) {
         parse_sub_region_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_region_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1658)) goto parse_noise_param;
        break;
      }

      // optional .caffe.NoiseParameter noise_param = 207;
      case 207: {
        if (tag == 1658) {
         parse_noise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1666)) goto parse_hotspot_param;
        break;
      }

      // optional .caffe.HotspotParameter hotspot_param = 208;
      case 208: {
        if (tag == 1666) {
         parse_hotspot_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotspot_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1674)) goto parse_predict_box_param;
        break;
      }

      // optional .caffe.PredictBoxParameter predict_box_param = 209;
      case 209: {
        if (tag == 1674) {
         parse_predict_box_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predict_box_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1682)) goto parse_fcn_data_param;
        break;
      }

      // optional .caffe.FCNDataParameter fcn_data_param = 210;
      case 210: {
        if (tag == 1682) {
         parse_fcn_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1690)) goto parse_center_loss_param;
        break;
      }

      // optional .caffe.CenterLossParameter center_loss_param = 211;
      case 211: {
        if (tag == 1690) {
         parse_center_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1698)) goto parse_flip_param;
        break;
      }

      // optional .caffe.FlipParameter flip_param = 212;
      case 212: {
        if (tag == 1698) {
         parse_flip_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flip_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1706)) goto parse_inner_distance_param;
        break;
      }

      // optional .caffe.InnerDistanceParameter inner_distance_param = 213;
      case 213: {
        if (tag == 1706) {
         parse_inner_distance_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_distance_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1714)) goto parse_normalize_param;
        break;
      }

      // optional .caffe.NormalizeParameter normalize_param = 214;
      case 214: {
        if (tag == 1714) {
         parse_normalize_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalize_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1722)) goto parse_general_contrastive_loss_param;
        break;
      }

      // optional .caffe.GeneralContrastiveParameter general_contrastive_loss_param = 215;
      case 215: {
        if (tag == 1722) {
         parse_general_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1730)) goto parse_soft_contrastive_loss_param;
        break;
      }

      // optional .caffe.SoftContrastiveParameter soft_contrastive_loss_param = 216;
      case 216: {
        if (tag == 1730) {
         parse_soft_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soft_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1738)) goto parse_general_triplet_loss_param;
        break;
      }

      // optional .caffe.GeneralTripletParameter general_triplet_loss_param = 217;
      case 217: {
        if (tag == 1738) {
         parse_general_triplet_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_triplet_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1746)) goto parse_soft_truncation_param;
        break;
      }

      // optional .caffe.SoftTruncationParameter soft_truncation_param = 218;
      case 218: {
        if (tag == 1746) {
         parse_soft_truncation_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soft_truncation_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1754)) goto parse_proposal_param;
        break;
      }

      // optional .caffe.ProposalParameter proposal_param = 219;
      case 219: {
        if (tag == 1754) {
         parse_proposal_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposal_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1762)) goto parse_psroi_pooling_param;
        break;
      }

      // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 220;
      case 220: {
        if (tag == 1762) {
         parse_psroi_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psroi_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1770)) goto parse_pairwise_param;
        break;
      }

      // optional .caffe.PairwiseParameter pairwise_param = 221;
      case 221: {
        if (tag == 1770) {
         parse_pairwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pairwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1778)) goto parse_smoothl1_param;
        break;
      }

      // optional .caffe.SmoothL1Parameter smoothl1_param = 222;
      case 222: {
        if (tag == 1778) {
         parse_smoothl1_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smoothl1_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1786)) goto parse_batch_contrastive_loss_param;
        break;
      }

      // optional .caffe.BatchContrastiveParameter batch_contrastive_loss_param = 223;
      case 223: {
        if (tag == 1786) {
         parse_batch_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1794)) goto parse_permute_param;
        break;
      }

      // optional .caffe.PermuteParameter permute_param = 224;
      case 224: {
        if (tag == 1794) {
         parse_permute_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permute_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1802)) goto parse_truncation_param;
        break;
      }

      // optional .caffe.TruncationParameter truncation_param = 225;
      case 225: {
        if (tag == 1802) {
         parse_truncation_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncation_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1810)) goto parse_nca_param;
        break;
      }

      // optional .caffe.NCAParameter nca_param = 226;
      case 226: {
        if (tag == 1810) {
         parse_nca_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nca_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1818)) goto parse_largemargin_inner_product_param;
        break;
      }

      // optional .caffe.LargeMarginInnerProductParameter largemargin_inner_product_param = 227;
      case 227: {
        if (tag == 1818) {
         parse_largemargin_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_largemargin_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1826)) goto parse_label_specific_rescale_param;
        break;
      }

      // optional .caffe.LabelSpecificRescaleParameter label_specific_rescale_param = 228;
      case 228: {
        if (tag == 1826) {
         parse_label_specific_rescale_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_specific_rescale_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1834)) goto parse_infimum_loss_param;
        break;
      }

      // optional .caffe.InfimumLossParamter infimum_loss_param = 229;
      case 229: {
        if (tag == 1834) {
         parse_infimum_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infimum_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1842)) goto parse_ordinal_regression_loss_param;
        break;
      }

      // optional .caffe.OrdinalRegressionParameter ordinal_regression_loss_param = 230;
      case 230: {
        if (tag == 1842) {
         parse_ordinal_regression_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ordinal_regression_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1850)) goto parse_resize_param;
        break;
      }

      // optional .caffe.ResizeParameter resize_param = 231;
      case 231: {
        if (tag == 1850) {
         parse_resize_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resize_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1858)) goto parse_margin_inner_product_param;
        break;
      }

      // optional .caffe.MarginInnerProductParameter margin_inner_product_param = 232;
      case 232: {
        if (tag == 1858) {
         parse_margin_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_margin_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1866)) goto parse_feature_decay_loss_param;
        break;
      }

      // optional .caffe.FeatureDecayLossParameter feature_decay_loss_param = 233;
      case 233: {
        if (tag == 1866) {
         parse_feature_decay_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_decay_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1874)) goto parse_confidence_penalty_loss_param;
        break;
      }

      // optional .caffe.ConfidencePenaltyLossParameter confidence_penalty_loss_param = 234;
      case 234: {
        if (tag == 1874) {
         parse_confidence_penalty_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confidence_penalty_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1882)) goto parse_focal_loss_param;
        break;
      }

      // optional .caffe.FocalLossParameter focal_loss_param = 235;
      case 235: {
        if (tag == 1882) {
         parse_focal_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_focal_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1890)) goto parse_label_specific_margin_param;
        break;
      }

      // optional .caffe.LabelSpecificMarginParameter label_specific_margin_param = 236;
      case 236: {
        if (tag == 1890) {
         parse_label_specific_margin_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_specific_margin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1898)) goto parse_channel_scale_param;
        break;
      }

      // optional .caffe.ChannelScaleParameter channel_scale_param = 237;
      case 237: {
        if (tag == 1898) {
         parse_channel_scale_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_scale_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1906)) goto parse_label_specific_affine_param;
        break;
      }

      // optional .caffe.LabelSpecificAffineParameter label_specific_affine_param = 238;
      case 238: {
        if (tag == 1906) {
         parse_label_specific_affine_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_specific_affine_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1914)) goto parse_label_specific_hard_margin_param;
        break;
      }

      // optional .caffe.LabelSpecificHardMarginParameter label_specific_hard_margin_param = 239;
      case 239: {
        if (tag == 1914) {
         parse_label_specific_hard_margin_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_specific_hard_margin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1930)) goto parse_label_specific_add_param;
        break;
      }

      // optional .caffe.LabelSpecificAddParameter label_specific_add_param = 241;
      case 241: {
        if (tag == 1930) {
         parse_label_specific_add_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_specific_add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40520226)) goto parse_mil_data_param;
        break;
      }

      // optional .caffe.MILDataParameter mil_data_param = 5065028;
      case 5065028: {
        if (tag == 40520226) {
         parse_mil_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mil_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40520290)) goto parse_mil_param;
        break;
      }

      // optional .caffe.MILParameter mil_param = 5065036;
      case 5065036: {
        if (tag == 40520290) {
         parse_mil_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mil_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(i), output);
  }

  // repeated float loss_weight = 5;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->loss_weight(i), output);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(i), output);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blobs(i), output);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->exclude(i), output);
  }

  // optional .caffe.Phase phase = 10;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->phase(), output);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0; i < this->propagate_down_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->propagate_down(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 100;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->transform_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->loss_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (has_accuracy_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->accuracy_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (has_argmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->argmax_param_, output);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->concat_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (has_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, *this->dropout_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (has_dummy_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, *this->dummy_data_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->eltwise_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, *this->exp_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (has_hdf5_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->hdf5_output_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (has_hinge_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (has_image_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (has_infogain_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->lrn_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (has_memory_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, *this->memory_data_param_, output);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (has_mvn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, *this->mvn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, *this->pooling_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, *this->power_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, *this->relu_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, *this->softmax_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (has_slice_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, *this->slice_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (has_tanh_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, *this->tanh_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (has_threshold_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, *this->threshold_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (has_window_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, *this->window_data_param_, output);
  }

  // optional .caffe.PythonParameter python_param = 130;
  if (has_python_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, *this->python_param_, output);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (has_prelu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, *this->prelu_param_, output);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (has_spp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, *this->spp_param_, output);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (has_reshape_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, *this->reshape_param_, output);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (has_log_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, *this->log_param_, output);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (has_flatten_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, *this->flatten_param_, output);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (has_reduction_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, *this->reduction_param_, output);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (has_embed_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, *this->embed_param_, output);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (has_tile_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      138, *this->tile_param_, output);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (has_batch_norm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139, *this->batch_norm_param_, output);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (has_elu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, *this->elu_param_, output);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (has_bias_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, *this->bias_param_, output);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (has_scale_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, *this->scale_param_, output);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (has_input_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, *this->input_param_, output);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (has_crop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144, *this->crop_param_, output);
  }

  // optional .caffe.ParameterParameter parameter_param = 145;
  if (has_parameter_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      145, *this->parameter_param_, output);
  }

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  if (has_recurrent_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      146, *this->recurrent_param_, output);
  }

  // optional .caffe.BNParameter bn_param = 200;
  if (has_bn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, *this->bn_param_, output);
  }

  // optional .caffe.LocalParameter local_param = 201;
  if (has_local_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, *this->local_param_, output);
  }

  // optional .caffe.InsanityParameter insanity_param = 202;
  if (has_insanity_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, *this->insanity_param_, output);
  }

  // optional .caffe.TripletLossParameter triplet_loss_param = 203;
  if (has_triplet_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203, *this->triplet_loss_param_, output);
  }

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 204;
  if (has_roi_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      204, *this->roi_pooling_param_, output);
  }

  // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 205;
  if (has_eltwise_affine_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      205, *this->eltwise_affine_param_, output);
  }

  // optional .caffe.SubRegionParameter sub_region_param = 206;
  if (has_sub_region_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      206, *this->sub_region_param_, output);
  }

  // optional .caffe.NoiseParameter noise_param = 207;
  if (has_noise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      207, *this->noise_param_, output);
  }

  // optional .caffe.HotspotParameter hotspot_param = 208;
  if (has_hotspot_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      208, *this->hotspot_param_, output);
  }

  // optional .caffe.PredictBoxParameter predict_box_param = 209;
  if (has_predict_box_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      209, *this->predict_box_param_, output);
  }

  // optional .caffe.FCNDataParameter fcn_data_param = 210;
  if (has_fcn_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      210, *this->fcn_data_param_, output);
  }

  // optional .caffe.CenterLossParameter center_loss_param = 211;
  if (has_center_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      211, *this->center_loss_param_, output);
  }

  // optional .caffe.FlipParameter flip_param = 212;
  if (has_flip_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      212, *this->flip_param_, output);
  }

  // optional .caffe.InnerDistanceParameter inner_distance_param = 213;
  if (has_inner_distance_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      213, *this->inner_distance_param_, output);
  }

  // optional .caffe.NormalizeParameter normalize_param = 214;
  if (has_normalize_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      214, *this->normalize_param_, output);
  }

  // optional .caffe.GeneralContrastiveParameter general_contrastive_loss_param = 215;
  if (has_general_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      215, *this->general_contrastive_loss_param_, output);
  }

  // optional .caffe.SoftContrastiveParameter soft_contrastive_loss_param = 216;
  if (has_soft_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      216, *this->soft_contrastive_loss_param_, output);
  }

  // optional .caffe.GeneralTripletParameter general_triplet_loss_param = 217;
  if (has_general_triplet_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      217, *this->general_triplet_loss_param_, output);
  }

  // optional .caffe.SoftTruncationParameter soft_truncation_param = 218;
  if (has_soft_truncation_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      218, *this->soft_truncation_param_, output);
  }

  // optional .caffe.ProposalParameter proposal_param = 219;
  if (has_proposal_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      219, *this->proposal_param_, output);
  }

  // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 220;
  if (has_psroi_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      220, *this->psroi_pooling_param_, output);
  }

  // optional .caffe.PairwiseParameter pairwise_param = 221;
  if (has_pairwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      221, *this->pairwise_param_, output);
  }

  // optional .caffe.SmoothL1Parameter smoothl1_param = 222;
  if (has_smoothl1_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      222, *this->smoothl1_param_, output);
  }

  // optional .caffe.BatchContrastiveParameter batch_contrastive_loss_param = 223;
  if (has_batch_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      223, *this->batch_contrastive_loss_param_, output);
  }

  // optional .caffe.PermuteParameter permute_param = 224;
  if (has_permute_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224, *this->permute_param_, output);
  }

  // optional .caffe.TruncationParameter truncation_param = 225;
  if (has_truncation_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      225, *this->truncation_param_, output);
  }

  // optional .caffe.NCAParameter nca_param = 226;
  if (has_nca_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      226, *this->nca_param_, output);
  }

  // optional .caffe.LargeMarginInnerProductParameter largemargin_inner_product_param = 227;
  if (has_largemargin_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      227, *this->largemargin_inner_product_param_, output);
  }

  // optional .caffe.LabelSpecificRescaleParameter label_specific_rescale_param = 228;
  if (has_label_specific_rescale_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      228, *this->label_specific_rescale_param_, output);
  }

  // optional .caffe.InfimumLossParamter infimum_loss_param = 229;
  if (has_infimum_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      229, *this->infimum_loss_param_, output);
  }

  // optional .caffe.OrdinalRegressionParameter ordinal_regression_loss_param = 230;
  if (has_ordinal_regression_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      230, *this->ordinal_regression_loss_param_, output);
  }

  // optional .caffe.ResizeParameter resize_param = 231;
  if (has_resize_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      231, *this->resize_param_, output);
  }

  // optional .caffe.MarginInnerProductParameter margin_inner_product_param = 232;
  if (has_margin_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      232, *this->margin_inner_product_param_, output);
  }

  // optional .caffe.FeatureDecayLossParameter feature_decay_loss_param = 233;
  if (has_feature_decay_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      233, *this->feature_decay_loss_param_, output);
  }

  // optional .caffe.ConfidencePenaltyLossParameter confidence_penalty_loss_param = 234;
  if (has_confidence_penalty_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      234, *this->confidence_penalty_loss_param_, output);
  }

  // optional .caffe.FocalLossParameter focal_loss_param = 235;
  if (has_focal_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      235, *this->focal_loss_param_, output);
  }

  // optional .caffe.LabelSpecificMarginParameter label_specific_margin_param = 236;
  if (has_label_specific_margin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      236, *this->label_specific_margin_param_, output);
  }

  // optional .caffe.ChannelScaleParameter channel_scale_param = 237;
  if (has_channel_scale_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      237, *this->channel_scale_param_, output);
  }

  // optional .caffe.LabelSpecificAffineParameter label_specific_affine_param = 238;
  if (has_label_specific_affine_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      238, *this->label_specific_affine_param_, output);
  }

  // optional .caffe.LabelSpecificHardMarginParameter label_specific_hard_margin_param = 239;
  if (has_label_specific_hard_margin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      239, *this->label_specific_hard_margin_param_, output);
  }

  // optional .caffe.LabelSpecificAddParameter label_specific_add_param = 241;
  if (has_label_specific_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      241, *this->label_specific_add_param_, output);
  }

  // optional .caffe.MILDataParameter mil_data_param = 5065028;
  if (has_mil_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5065028, *this->mil_data_param_, output);
  }

  // optional .caffe.MILParameter mil_param = 5065036;
  if (has_mil_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5065036, *this->mil_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->top(i), target);
  }

  // repeated float loss_weight = 5;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->loss_weight(i), target);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->param(i), target);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blobs(i), target);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->include(i), target);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->exclude(i), target);
  }

  // optional .caffe.Phase phase = 10;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->phase(), target);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0; i < this->propagate_down_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(11, this->propagate_down(i), target);
  }

  // optional .caffe.TransformationParameter transform_param = 100;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, *this->transform_param_, target);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, *this->loss_param_, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (has_accuracy_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, *this->accuracy_param_, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (has_argmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, *this->argmax_param_, target);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, *this->concat_param_, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (has_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, *this->contrastive_loss_param_, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, *this->convolution_param_, target);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, *this->data_param_, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, *this->dropout_param_, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (has_dummy_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, *this->dummy_data_param_, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, *this->eltwise_param_, target);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, *this->exp_param_, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (has_hdf5_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, *this->hdf5_data_param_, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        113, *this->hdf5_output_param_, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (has_hinge_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        114, *this->hinge_loss_param_, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (has_image_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        115, *this->image_data_param_, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (has_infogain_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, *this->infogain_loss_param_, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, *this->inner_product_param_, target);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, *this->lrn_param_, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (has_memory_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        119, *this->memory_data_param_, target);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (has_mvn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, *this->mvn_param_, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        121, *this->pooling_param_, target);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        122, *this->power_param_, target);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        123, *this->relu_param_, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        124, *this->sigmoid_param_, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        125, *this->softmax_param_, target);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (has_slice_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        126, *this->slice_param_, target);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (has_tanh_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        127, *this->tanh_param_, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (has_threshold_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        128, *this->threshold_param_, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (has_window_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        129, *this->window_data_param_, target);
  }

  // optional .caffe.PythonParameter python_param = 130;
  if (has_python_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, *this->python_param_, target);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (has_prelu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        131, *this->prelu_param_, target);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (has_spp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        132, *this->spp_param_, target);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (has_reshape_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        133, *this->reshape_param_, target);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (has_log_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        134, *this->log_param_, target);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (has_flatten_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        135, *this->flatten_param_, target);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (has_reduction_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        136, *this->reduction_param_, target);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (has_embed_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        137, *this->embed_param_, target);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (has_tile_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        138, *this->tile_param_, target);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (has_batch_norm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        139, *this->batch_norm_param_, target);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (has_elu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        140, *this->elu_param_, target);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (has_bias_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        141, *this->bias_param_, target);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (has_scale_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        142, *this->scale_param_, target);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (has_input_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        143, *this->input_param_, target);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (has_crop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        144, *this->crop_param_, target);
  }

  // optional .caffe.ParameterParameter parameter_param = 145;
  if (has_parameter_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        145, *this->parameter_param_, target);
  }

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  if (has_recurrent_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        146, *this->recurrent_param_, target);
  }

  // optional .caffe.BNParameter bn_param = 200;
  if (has_bn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, *this->bn_param_, target);
  }

  // optional .caffe.LocalParameter local_param = 201;
  if (has_local_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, *this->local_param_, target);
  }

  // optional .caffe.InsanityParameter insanity_param = 202;
  if (has_insanity_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        202, *this->insanity_param_, target);
  }

  // optional .caffe.TripletLossParameter triplet_loss_param = 203;
  if (has_triplet_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        203, *this->triplet_loss_param_, target);
  }

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 204;
  if (has_roi_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        204, *this->roi_pooling_param_, target);
  }

  // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 205;
  if (has_eltwise_affine_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        205, *this->eltwise_affine_param_, target);
  }

  // optional .caffe.SubRegionParameter sub_region_param = 206;
  if (has_sub_region_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        206, *this->sub_region_param_, target);
  }

  // optional .caffe.NoiseParameter noise_param = 207;
  if (has_noise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        207, *this->noise_param_, target);
  }

  // optional .caffe.HotspotParameter hotspot_param = 208;
  if (has_hotspot_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        208, *this->hotspot_param_, target);
  }

  // optional .caffe.PredictBoxParameter predict_box_param = 209;
  if (has_predict_box_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        209, *this->predict_box_param_, target);
  }

  // optional .caffe.FCNDataParameter fcn_data_param = 210;
  if (has_fcn_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        210, *this->fcn_data_param_, target);
  }

  // optional .caffe.CenterLossParameter center_loss_param = 211;
  if (has_center_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        211, *this->center_loss_param_, target);
  }

  // optional .caffe.FlipParameter flip_param = 212;
  if (has_flip_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        212, *this->flip_param_, target);
  }

  // optional .caffe.InnerDistanceParameter inner_distance_param = 213;
  if (has_inner_distance_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        213, *this->inner_distance_param_, target);
  }

  // optional .caffe.NormalizeParameter normalize_param = 214;
  if (has_normalize_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        214, *this->normalize_param_, target);
  }

  // optional .caffe.GeneralContrastiveParameter general_contrastive_loss_param = 215;
  if (has_general_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        215, *this->general_contrastive_loss_param_, target);
  }

  // optional .caffe.SoftContrastiveParameter soft_contrastive_loss_param = 216;
  if (has_soft_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        216, *this->soft_contrastive_loss_param_, target);
  }

  // optional .caffe.GeneralTripletParameter general_triplet_loss_param = 217;
  if (has_general_triplet_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        217, *this->general_triplet_loss_param_, target);
  }

  // optional .caffe.SoftTruncationParameter soft_truncation_param = 218;
  if (has_soft_truncation_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        218, *this->soft_truncation_param_, target);
  }

  // optional .caffe.ProposalParameter proposal_param = 219;
  if (has_proposal_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        219, *this->proposal_param_, target);
  }

  // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 220;
  if (has_psroi_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        220, *this->psroi_pooling_param_, target);
  }

  // optional .caffe.PairwiseParameter pairwise_param = 221;
  if (has_pairwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        221, *this->pairwise_param_, target);
  }

  // optional .caffe.SmoothL1Parameter smoothl1_param = 222;
  if (has_smoothl1_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        222, *this->smoothl1_param_, target);
  }

  // optional .caffe.BatchContrastiveParameter batch_contrastive_loss_param = 223;
  if (has_batch_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        223, *this->batch_contrastive_loss_param_, target);
  }

  // optional .caffe.PermuteParameter permute_param = 224;
  if (has_permute_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        224, *this->permute_param_, target);
  }

  // optional .caffe.TruncationParameter truncation_param = 225;
  if (has_truncation_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        225, *this->truncation_param_, target);
  }

  // optional .caffe.NCAParameter nca_param = 226;
  if (has_nca_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        226, *this->nca_param_, target);
  }

  // optional .caffe.LargeMarginInnerProductParameter largemargin_inner_product_param = 227;
  if (has_largemargin_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        227, *this->largemargin_inner_product_param_, target);
  }

  // optional .caffe.LabelSpecificRescaleParameter label_specific_rescale_param = 228;
  if (has_label_specific_rescale_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        228, *this->label_specific_rescale_param_, target);
  }

  // optional .caffe.InfimumLossParamter infimum_loss_param = 229;
  if (has_infimum_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        229, *this->infimum_loss_param_, target);
  }

  // optional .caffe.OrdinalRegressionParameter ordinal_regression_loss_param = 230;
  if (has_ordinal_regression_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        230, *this->ordinal_regression_loss_param_, target);
  }

  // optional .caffe.ResizeParameter resize_param = 231;
  if (has_resize_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        231, *this->resize_param_, target);
  }

  // optional .caffe.MarginInnerProductParameter margin_inner_product_param = 232;
  if (has_margin_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        232, *this->margin_inner_product_param_, target);
  }

  // optional .caffe.FeatureDecayLossParameter feature_decay_loss_param = 233;
  if (has_feature_decay_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        233, *this->feature_decay_loss_param_, target);
  }

  // optional .caffe.ConfidencePenaltyLossParameter confidence_penalty_loss_param = 234;
  if (has_confidence_penalty_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        234, *this->confidence_penalty_loss_param_, target);
  }

  // optional .caffe.FocalLossParameter focal_loss_param = 235;
  if (has_focal_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        235, *this->focal_loss_param_, target);
  }

  // optional .caffe.LabelSpecificMarginParameter label_specific_margin_param = 236;
  if (has_label_specific_margin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        236, *this->label_specific_margin_param_, target);
  }

  // optional .caffe.ChannelScaleParameter channel_scale_param = 237;
  if (has_channel_scale_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        237, *this->channel_scale_param_, target);
  }

  // optional .caffe.LabelSpecificAffineParameter label_specific_affine_param = 238;
  if (has_label_specific_affine_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        238, *this->label_specific_affine_param_, target);
  }

  // optional .caffe.LabelSpecificHardMarginParameter label_specific_hard_margin_param = 239;
  if (has_label_specific_hard_margin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        239, *this->label_specific_hard_margin_param_, target);
  }

  // optional .caffe.LabelSpecificAddParameter label_specific_add_param = 241;
  if (has_label_specific_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        241, *this->label_specific_add_param_, target);
  }

  // optional .caffe.MILDataParameter mil_data_param = 5065028;
  if (has_mil_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5065028, *this->mil_data_param_, target);
  }

  // optional .caffe.MILParameter mil_param = 5065036;
  if (has_mil_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5065036, *this->mil_param_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerParameter)
  return target;
}

int LayerParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 19u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe.Phase phase = 10;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

  }
  if (_has_bits_[11 / 32] & 63488u) {
    // optional .caffe.TransformationParameter transform_param = 100;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.LossParameter loss_param = 101;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 102;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.ArgMaxParameter argmax_param = 103;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.BatchNormParameter batch_norm_param = 139;
    if (has_batch_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_norm_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.BiasParameter bias_param = 141;
    if (has_bias_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_param_);
    }

    // optional .caffe.ConcatParameter concat_param = 104;
    if (has_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

    // optional .caffe.ConvolutionParameter convolution_param = 106;
    if (has_convolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.CropParameter crop_param = 144;
    if (has_crop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crop_param_);
    }

    // optional .caffe.DataParameter data_param = 107;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 108;
    if (has_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 109;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.EltwiseParameter eltwise_param = 110;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ELUParameter elu_param = 140;
    if (has_elu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->elu_param_);
    }

    // optional .caffe.EmbedParameter embed_param = 137;
    if (has_embed_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->embed_param_);
    }

    // optional .caffe.ExpParameter exp_param = 111;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.FlattenParameter flatten_param = 135;
    if (has_flatten_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flatten_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
    if (has_hdf5_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

    // optional .caffe.HingeLossParameter hinge_loss_param = 114;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.ImageDataParameter image_data_param = 115;
    if (has_image_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 117;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.InputParameter input_param = 143;
    if (has_input_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->input_param_);
    }

    // optional .caffe.LogParameter log_param = 134;
    if (has_log_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->log_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 118;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 119;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

    // optional .caffe.MVNParameter mvn_param = 120;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .caffe.ParameterParameter parameter_param = 145;
    if (has_parameter_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parameter_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 121;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

    // optional .caffe.PowerParameter power_param = 122;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.PReLUParameter prelu_param = 131;
    if (has_prelu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prelu_param_);
    }

    // optional .caffe.PythonParameter python_param = 130;
    if (has_python_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->python_param_);
    }

    // optional .caffe.RecurrentParameter recurrent_param = 146;
    if (has_recurrent_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recurrent_param_);
    }

    // optional .caffe.ReductionParameter reduction_param = 136;
    if (has_reduction_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reduction_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 123;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional .caffe.ReshapeParameter reshape_param = 133;
    if (has_reshape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshape_param_);
    }

    // optional .caffe.ScaleParameter scale_param = 142;
    if (has_scale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 124;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 125;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.SPPParameter spp_param = 132;
    if (has_spp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spp_param_);
    }

    // optional .caffe.SliceParameter slice_param = 126;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 127;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 128;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional .caffe.TileParameter tile_param = 138;
    if (has_tile_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tile_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 129;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

    // optional .caffe.BNParameter bn_param = 200;
    if (has_bn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bn_param_);
    }

    // optional .caffe.LocalParameter local_param = 201;
    if (has_local_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->local_param_);
    }

    // optional .caffe.InsanityParameter insanity_param = 202;
    if (has_insanity_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->insanity_param_);
    }

    // optional .caffe.TripletLossParameter triplet_loss_param = 203;
    if (has_triplet_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->triplet_loss_param_);
    }

    // optional .caffe.ROIPoolingParameter roi_pooling_param = 204;
    if (has_roi_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_pooling_param_);
    }

    // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 205;
    if (has_eltwise_affine_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_affine_param_);
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional .caffe.SubRegionParameter sub_region_param = 206;
    if (has_sub_region_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sub_region_param_);
    }

    // optional .caffe.NoiseParameter noise_param = 207;
    if (has_noise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->noise_param_);
    }

    // optional .caffe.HotspotParameter hotspot_param = 208;
    if (has_hotspot_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hotspot_param_);
    }

    // optional .caffe.PredictBoxParameter predict_box_param = 209;
    if (has_predict_box_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->predict_box_param_);
    }

    // optional .caffe.MILDataParameter mil_data_param = 5065028;
    if (has_mil_data_param()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mil_data_param_);
    }

    // optional .caffe.MILParameter mil_param = 5065036;
    if (has_mil_param()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mil_param_);
    }

    // optional .caffe.FCNDataParameter fcn_data_param = 210;
    if (has_fcn_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_data_param_);
    }

    // optional .caffe.CenterLossParameter center_loss_param = 211;
    if (has_center_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->center_loss_param_);
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional .caffe.FlipParameter flip_param = 212;
    if (has_flip_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flip_param_);
    }

    // optional .caffe.InnerDistanceParameter inner_distance_param = 213;
    if (has_inner_distance_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_distance_param_);
    }

    // optional .caffe.NormalizeParameter normalize_param = 214;
    if (has_normalize_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normalize_param_);
    }

    // optional .caffe.GeneralContrastiveParameter general_contrastive_loss_param = 215;
    if (has_general_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->general_contrastive_loss_param_);
    }

    // optional .caffe.SoftContrastiveParameter soft_contrastive_loss_param = 216;
    if (has_soft_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->soft_contrastive_loss_param_);
    }

    // optional .caffe.GeneralTripletParameter general_triplet_loss_param = 217;
    if (has_general_triplet_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->general_triplet_loss_param_);
    }

    // optional .caffe.SoftTruncationParameter soft_truncation_param = 218;
    if (has_soft_truncation_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->soft_truncation_param_);
    }

    // optional .caffe.ProposalParameter proposal_param = 219;
    if (has_proposal_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->proposal_param_);
    }

  }
  if (_has_bits_[80 / 32] & 16711680u) {
    // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 220;
    if (has_psroi_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->psroi_pooling_param_);
    }

    // optional .caffe.PairwiseParameter pairwise_param = 221;
    if (has_pairwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pairwise_param_);
    }

    // optional .caffe.SmoothL1Parameter smoothl1_param = 222;
    if (has_smoothl1_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smoothl1_param_);
    }

    // optional .caffe.BatchContrastiveParameter batch_contrastive_loss_param = 223;
    if (has_batch_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_contrastive_loss_param_);
    }

    // optional .caffe.PermuteParameter permute_param = 224;
    if (has_permute_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->permute_param_);
    }

    // optional .caffe.TruncationParameter truncation_param = 225;
    if (has_truncation_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->truncation_param_);
    }

    // optional .caffe.NCAParameter nca_param = 226;
    if (has_nca_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nca_param_);
    }

    // optional .caffe.LargeMarginInnerProductParameter largemargin_inner_product_param = 227;
    if (has_largemargin_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->largemargin_inner_product_param_);
    }

  }
  if (_has_bits_[88 / 32] & 4278190080u) {
    // optional .caffe.LabelSpecificRescaleParameter label_specific_rescale_param = 228;
    if (has_label_specific_rescale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_specific_rescale_param_);
    }

    // optional .caffe.InfimumLossParamter infimum_loss_param = 229;
    if (has_infimum_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infimum_loss_param_);
    }

    // optional .caffe.OrdinalRegressionParameter ordinal_regression_loss_param = 230;
    if (has_ordinal_regression_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ordinal_regression_loss_param_);
    }

    // optional .caffe.ResizeParameter resize_param = 231;
    if (has_resize_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resize_param_);
    }

    // optional .caffe.MarginInnerProductParameter margin_inner_product_param = 232;
    if (has_margin_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->margin_inner_product_param_);
    }

    // optional .caffe.FeatureDecayLossParameter feature_decay_loss_param = 233;
    if (has_feature_decay_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feature_decay_loss_param_);
    }

    // optional .caffe.ConfidencePenaltyLossParameter confidence_penalty_loss_param = 234;
    if (has_confidence_penalty_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->confidence_penalty_loss_param_);
    }

    // optional .caffe.FocalLossParameter focal_loss_param = 235;
    if (has_focal_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->focal_loss_param_);
    }

  }
  if (_has_bits_[96 / 32] & 31u) {
    // optional .caffe.LabelSpecificMarginParameter label_specific_margin_param = 236;
    if (has_label_specific_margin_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_specific_margin_param_);
    }

    // optional .caffe.ChannelScaleParameter channel_scale_param = 237;
    if (has_channel_scale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channel_scale_param_);
    }

    // optional .caffe.LabelSpecificAffineParameter label_specific_affine_param = 238;
    if (has_label_specific_affine_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_specific_affine_param_);
    }

    // optional .caffe.LabelSpecificHardMarginParameter label_specific_hard_margin_param = 239;
    if (has_label_specific_hard_margin_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_specific_hard_margin_param_);
    }

    // optional .caffe.LabelSpecificAddParameter label_specific_add_param = 241;
    if (has_label_specific_add_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_specific_add_param_);
    }

  }
  // repeated string bottom = 3;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 4;
  total_size += 1 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated float loss_weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->loss_weight_size();
    total_size += 1 * this->loss_weight_size() + data_size;
  }

  // repeated .caffe.ParamSpec param = 6;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  // repeated .caffe.BlobProto blobs = 7;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated bool propagate_down = 11;
  {
    int data_size = 0;
    data_size = 1 * this->propagate_down_size();
    total_size += 1 * this->propagate_down_size() + data_size;
  }

  // repeated .caffe.NetStateRule include = 8;
  total_size += 1 * this->include_size();
  for (int i = 0; i < this->include_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->include(i));
  }

  // repeated .caffe.NetStateRule exclude = 9;
  total_size += 1 * this->exclude_size();
  for (int i = 0; i < this->exclude_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclude(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LayerParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  propagate_down_.MergeFrom(from.propagate_down_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_phase()) {
      set_phase(from.phase());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_transform_param()) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_accuracy_param()) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (from.has_argmax_param()) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (from.has_batch_norm_param()) {
      mutable_batch_norm_param()->::caffe::BatchNormParameter::MergeFrom(from.batch_norm_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bias_param()) {
      mutable_bias_param()->::caffe::BiasParameter::MergeFrom(from.bias_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_contrastive_loss_param()) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (from.has_crop_param()) {
      mutable_crop_param()->::caffe::CropParameter::MergeFrom(from.crop_param());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_dummy_data_param()) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_elu_param()) {
      mutable_elu_param()->::caffe::ELUParameter::MergeFrom(from.elu_param());
    }
    if (from.has_embed_param()) {
      mutable_embed_param()->::caffe::EmbedParameter::MergeFrom(from.embed_param());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_flatten_param()) {
      mutable_flatten_param()->::caffe::FlattenParameter::MergeFrom(from.flatten_param());
    }
    if (from.has_hdf5_data_param()) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
    if (from.has_hinge_loss_param()) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_image_data_param()) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (from.has_infogain_loss_param()) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_input_param()) {
      mutable_input_param()->::caffe::InputParameter::MergeFrom(from.input_param());
    }
    if (from.has_log_param()) {
      mutable_log_param()->::caffe::LogParameter::MergeFrom(from.log_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_memory_data_param()) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (from.has_mvn_param()) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_parameter_param()) {
      mutable_parameter_param()->::caffe::ParameterParameter::MergeFrom(from.parameter_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (from.has_power_param()) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_prelu_param()) {
      mutable_prelu_param()->::caffe::PReLUParameter::MergeFrom(from.prelu_param());
    }
    if (from.has_python_param()) {
      mutable_python_param()->::caffe::PythonParameter::MergeFrom(from.python_param());
    }
    if (from.has_recurrent_param()) {
      mutable_recurrent_param()->::caffe::RecurrentParameter::MergeFrom(from.recurrent_param());
    }
    if (from.has_reduction_param()) {
      mutable_reduction_param()->::caffe::ReductionParameter::MergeFrom(from.reduction_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_reshape_param()) {
      mutable_reshape_param()->::caffe::ReshapeParameter::MergeFrom(from.reshape_param());
    }
    if (from.has_scale_param()) {
      mutable_scale_param()->::caffe::ScaleParameter::MergeFrom(from.scale_param());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_spp_param()) {
      mutable_spp_param()->::caffe::SPPParameter::MergeFrom(from.spp_param());
    }
    if (from.has_slice_param()) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (from.has_tanh_param()) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (from.has_threshold_param()) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tile_param()) {
      mutable_tile_param()->::caffe::TileParameter::MergeFrom(from.tile_param());
    }
    if (from.has_window_data_param()) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
    if (from.has_bn_param()) {
      mutable_bn_param()->::caffe::BNParameter::MergeFrom(from.bn_param());
    }
    if (from.has_local_param()) {
      mutable_local_param()->::caffe::LocalParameter::MergeFrom(from.local_param());
    }
    if (from.has_insanity_param()) {
      mutable_insanity_param()->::caffe::InsanityParameter::MergeFrom(from.insanity_param());
    }
    if (from.has_triplet_loss_param()) {
      mutable_triplet_loss_param()->::caffe::TripletLossParameter::MergeFrom(from.triplet_loss_param());
    }
    if (from.has_roi_pooling_param()) {
      mutable_roi_pooling_param()->::caffe::ROIPoolingParameter::MergeFrom(from.roi_pooling_param());
    }
    if (from.has_eltwise_affine_param()) {
      mutable_eltwise_affine_param()->::caffe::EltwiseAffineParameter::MergeFrom(from.eltwise_affine_param());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_sub_region_param()) {
      mutable_sub_region_param()->::caffe::SubRegionParameter::MergeFrom(from.sub_region_param());
    }
    if (from.has_noise_param()) {
      mutable_noise_param()->::caffe::NoiseParameter::MergeFrom(from.noise_param());
    }
    if (from.has_hotspot_param()) {
      mutable_hotspot_param()->::caffe::HotspotParameter::MergeFrom(from.hotspot_param());
    }
    if (from.has_predict_box_param()) {
      mutable_predict_box_param()->::caffe::PredictBoxParameter::MergeFrom(from.predict_box_param());
    }
    if (from.has_mil_data_param()) {
      mutable_mil_data_param()->::caffe::MILDataParameter::MergeFrom(from.mil_data_param());
    }
    if (from.has_mil_param()) {
      mutable_mil_param()->::caffe::MILParameter::MergeFrom(from.mil_param());
    }
    if (from.has_fcn_data_param()) {
      mutable_fcn_data_param()->::caffe::FCNDataParameter::MergeFrom(from.fcn_data_param());
    }
    if (from.has_center_loss_param()) {
      mutable_center_loss_param()->::caffe::CenterLossParameter::MergeFrom(from.center_loss_param());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_flip_param()) {
      mutable_flip_param()->::caffe::FlipParameter::MergeFrom(from.flip_param());
    }
    if (from.has_inner_distance_param()) {
      mutable_inner_distance_param()->::caffe::InnerDistanceParameter::MergeFrom(from.inner_distance_param());
    }
    if (from.has_normalize_param()) {
      mutable_normalize_param()->::caffe::NormalizeParameter::MergeFrom(from.normalize_param());
    }
    if (from.has_general_contrastive_loss_param()) {
      mutable_general_contrastive_loss_param()->::caffe::GeneralContrastiveParameter::MergeFrom(from.general_contrastive_loss_param());
    }
    if (from.has_soft_contrastive_loss_param()) {
      mutable_soft_contrastive_loss_param()->::caffe::SoftContrastiveParameter::MergeFrom(from.soft_contrastive_loss_param());
    }
    if (from.has_general_triplet_loss_param()) {
      mutable_general_triplet_loss_param()->::caffe::GeneralTripletParameter::MergeFrom(from.general_triplet_loss_param());
    }
    if (from.has_soft_truncation_param()) {
      mutable_soft_truncation_param()->::caffe::SoftTruncationParameter::MergeFrom(from.soft_truncation_param());
    }
    if (from.has_proposal_param()) {
      mutable_proposal_param()->::caffe::ProposalParameter::MergeFrom(from.proposal_param());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_psroi_pooling_param()) {
      mutable_psroi_pooling_param()->::caffe::PSROIPoolingParameter::MergeFrom(from.psroi_pooling_param());
    }
    if (from.has_pairwise_param()) {
      mutable_pairwise_param()->::caffe::PairwiseParameter::MergeFrom(from.pairwise_param());
    }
    if (from.has_smoothl1_param()) {
      mutable_smoothl1_param()->::caffe::SmoothL1Parameter::MergeFrom(from.smoothl1_param());
    }
    if (from.has_batch_contrastive_loss_param()) {
      mutable_batch_contrastive_loss_param()->::caffe::BatchContrastiveParameter::MergeFrom(from.batch_contrastive_loss_param());
    }
    if (from.has_permute_param()) {
      mutable_permute_param()->::caffe::PermuteParameter::MergeFrom(from.permute_param());
    }
    if (from.has_truncation_param()) {
      mutable_truncation_param()->::caffe::TruncationParameter::MergeFrom(from.truncation_param());
    }
    if (from.has_nca_param()) {
      mutable_nca_param()->::caffe::NCAParameter::MergeFrom(from.nca_param());
    }
    if (from.has_largemargin_inner_product_param()) {
      mutable_largemargin_inner_product_param()->::caffe::LargeMarginInnerProductParameter::MergeFrom(from.largemargin_inner_product_param());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_label_specific_rescale_param()) {
      mutable_label_specific_rescale_param()->::caffe::LabelSpecificRescaleParameter::MergeFrom(from.label_specific_rescale_param());
    }
    if (from.has_infimum_loss_param()) {
      mutable_infimum_loss_param()->::caffe::InfimumLossParamter::MergeFrom(from.infimum_loss_param());
    }
    if (from.has_ordinal_regression_loss_param()) {
      mutable_ordinal_regression_loss_param()->::caffe::OrdinalRegressionParameter::MergeFrom(from.ordinal_regression_loss_param());
    }
    if (from.has_resize_param()) {
      mutable_resize_param()->::caffe::ResizeParameter::MergeFrom(from.resize_param());
    }
    if (from.has_margin_inner_product_param()) {
      mutable_margin_inner_product_param()->::caffe::MarginInnerProductParameter::MergeFrom(from.margin_inner_product_param());
    }
    if (from.has_feature_decay_loss_param()) {
      mutable_feature_decay_loss_param()->::caffe::FeatureDecayLossParameter::MergeFrom(from.feature_decay_loss_param());
    }
    if (from.has_confidence_penalty_loss_param()) {
      mutable_confidence_penalty_loss_param()->::caffe::ConfidencePenaltyLossParameter::MergeFrom(from.confidence_penalty_loss_param());
    }
    if (from.has_focal_loss_param()) {
      mutable_focal_loss_param()->::caffe::FocalLossParameter::MergeFrom(from.focal_loss_param());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_label_specific_margin_param()) {
      mutable_label_specific_margin_param()->::caffe::LabelSpecificMarginParameter::MergeFrom(from.label_specific_margin_param());
    }
    if (from.has_channel_scale_param()) {
      mutable_channel_scale_param()->::caffe::ChannelScaleParameter::MergeFrom(from.channel_scale_param());
    }
    if (from.has_label_specific_affine_param()) {
      mutable_label_specific_affine_param()->::caffe::LabelSpecificAffineParameter::MergeFrom(from.label_specific_affine_param());
    }
    if (from.has_label_specific_hard_margin_param()) {
      mutable_label_specific_hard_margin_param()->::caffe::LabelSpecificHardMarginParameter::MergeFrom(from.label_specific_hard_margin_param());
    }
    if (from.has_label_specific_add_param()) {
      mutable_label_specific_add_param()->::caffe::LabelSpecificAddParameter::MergeFrom(from.label_specific_add_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {

  if (has_psroi_pooling_param()) {
    if (!this->psroi_pooling_param_->IsInitialized()) return false;
  }
  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  bottom_.UnsafeArenaSwap(&other->bottom_);
  top_.UnsafeArenaSwap(&other->top_);
  std::swap(phase_, other->phase_);
  loss_weight_.UnsafeArenaSwap(&other->loss_weight_);
  param_.UnsafeArenaSwap(&other->param_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  propagate_down_.UnsafeArenaSwap(&other->propagate_down_);
  include_.UnsafeArenaSwap(&other->include_);
  exclude_.UnsafeArenaSwap(&other->exclude_);
  std::swap(transform_param_, other->transform_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(accuracy_param_, other->accuracy_param_);
  std::swap(argmax_param_, other->argmax_param_);
  std::swap(batch_norm_param_, other->batch_norm_param_);
  std::swap(bias_param_, other->bias_param_);
  std::swap(concat_param_, other->concat_param_);
  std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(crop_param_, other->crop_param_);
  std::swap(data_param_, other->data_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(dummy_data_param_, other->dummy_data_param_);
  std::swap(eltwise_param_, other->eltwise_param_);
  std::swap(elu_param_, other->elu_param_);
  std::swap(embed_param_, other->embed_param_);
  std::swap(exp_param_, other->exp_param_);
  std::swap(flatten_param_, other->flatten_param_);
  std::swap(hdf5_data_param_, other->hdf5_data_param_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(hinge_loss_param_, other->hinge_loss_param_);
  std::swap(image_data_param_, other->image_data_param_);
  std::swap(infogain_loss_param_, other->infogain_loss_param_);
  std::swap(inner_product_param_, other->inner_product_param_);
  std::swap(input_param_, other->input_param_);
  std::swap(log_param_, other->log_param_);
  std::swap(lrn_param_, other->lrn_param_);
  std::swap(memory_data_param_, other->memory_data_param_);
  std::swap(mvn_param_, other->mvn_param_);
  std::swap(parameter_param_, other->parameter_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(power_param_, other->power_param_);
  std::swap(prelu_param_, other->prelu_param_);
  std::swap(python_param_, other->python_param_);
  std::swap(recurrent_param_, other->recurrent_param_);
  std::swap(reduction_param_, other->reduction_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(reshape_param_, other->reshape_param_);
  std::swap(scale_param_, other->scale_param_);
  std::swap(sigmoid_param_, other->sigmoid_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(spp_param_, other->spp_param_);
  std::swap(slice_param_, other->slice_param_);
  std::swap(tanh_param_, other->tanh_param_);
  std::swap(threshold_param_, other->threshold_param_);
  std::swap(tile_param_, other->tile_param_);
  std::swap(window_data_param_, other->window_data_param_);
  std::swap(bn_param_, other->bn_param_);
  std::swap(local_param_, other->local_param_);
  std::swap(insanity_param_, other->insanity_param_);
  std::swap(triplet_loss_param_, other->triplet_loss_param_);
  std::swap(roi_pooling_param_, other->roi_pooling_param_);
  std::swap(eltwise_affine_param_, other->eltwise_affine_param_);
  std::swap(sub_region_param_, other->sub_region_param_);
  std::swap(noise_param_, other->noise_param_);
  std::swap(hotspot_param_, other->hotspot_param_);
  std::swap(predict_box_param_, other->predict_box_param_);
  std::swap(mil_data_param_, other->mil_data_param_);
  std::swap(mil_param_, other->mil_param_);
  std::swap(fcn_data_param_, other->fcn_data_param_);
  std::swap(center_loss_param_, other->center_loss_param_);
  std::swap(flip_param_, other->flip_param_);
  std::swap(inner_distance_param_, other->inner_distance_param_);
  std::swap(normalize_param_, other->normalize_param_);
  std::swap(general_contrastive_loss_param_, other->general_contrastive_loss_param_);
  std::swap(soft_contrastive_loss_param_, other->soft_contrastive_loss_param_);
  std::swap(general_triplet_loss_param_, other->general_triplet_loss_param_);
  std::swap(soft_truncation_param_, other->soft_truncation_param_);
  std::swap(proposal_param_, other->proposal_param_);
  std::swap(psroi_pooling_param_, other->psroi_pooling_param_);
  std::swap(pairwise_param_, other->pairwise_param_);
  std::swap(smoothl1_param_, other->smoothl1_param_);
  std::swap(batch_contrastive_loss_param_, other->batch_contrastive_loss_param_);
  std::swap(permute_param_, other->permute_param_);
  std::swap(truncation_param_, other->truncation_param_);
  std::swap(nca_param_, other->nca_param_);
  std::swap(largemargin_inner_product_param_, other->largemargin_inner_product_param_);
  std::swap(label_specific_rescale_param_, other->label_specific_rescale_param_);
  std::swap(infimum_loss_param_, other->infimum_loss_param_);
  std::swap(ordinal_regression_loss_param_, other->ordinal_regression_loss_param_);
  std::swap(resize_param_, other->resize_param_);
  std::swap(margin_inner_product_param_, other->margin_inner_product_param_);
  std::swap(feature_decay_loss_param_, other->feature_decay_loss_param_);
  std::swap(confidence_penalty_loss_param_, other->confidence_penalty_loss_param_);
  std::swap(focal_loss_param_, other->focal_loss_param_);
  std::swap(label_specific_margin_param_, other->label_specific_margin_param_);
  std::swap(channel_scale_param_, other->channel_scale_param_);
  std::swap(label_specific_affine_param_, other->label_specific_affine_param_);
  std::swap(label_specific_hard_margin_param_, other->label_specific_hard_margin_param_);
  std::swap(label_specific_add_param_, other->label_specific_add_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  std::swap(_has_bits_[3], other->_has_bits_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParameter

// optional string name = 1;
bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
 void LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
 void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
 ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
 void LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
 void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
 ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
int LayerParameter::bottom_size() const {
  return bottom_.size();
}
void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
 const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
 ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
 void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
 void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
 void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
 ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
 void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
 void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
 void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
int LayerParameter::top_size() const {
  return top_.size();
}
void LayerParameter::clear_top() {
  top_.Clear();
}
 const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
 ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
 void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
 void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
 void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
 ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
 void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
 void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
 void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
 ::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
 void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
 float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
 void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
 void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
 const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
 ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
int LayerParameter::param_size() const {
  return param_.size();
}
void LayerParameter::clear_param() {
  param_.Clear();
}
const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
int LayerParameter::blobs_size() const {
  return blobs_.size();
}
void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
 bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
 void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
 void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
 const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
 ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
int LayerParameter::include_size() const {
  return include_.size();
}
void LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
int LayerParameter::exclude_size() const {
  return exclude_.size();
}
void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_ : *default_instance_->batch_norm_param_;
}
::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
bool LayerParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LayerParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00010000u;
}
void LayerParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00020000u;
}
void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00080000u;
}
void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.CropParameter crop_param = 144;
bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x00100000u;
}
void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
const ::caffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DataParameter data_param = 107;
bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00400000u;
}
void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00800000u;
}
void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x01000000u;
}
void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
bool LayerParameter::has_elu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LayerParameter::set_has_elu_param() {
  _has_bits_[0] |= 0x02000000u;
}
void LayerParameter::clear_has_elu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_ : *default_instance_->elu_param_;
}
::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
bool LayerParameter::has_embed_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LayerParameter::set_has_embed_param() {
  _has_bits_[0] |= 0x04000000u;
}
void LayerParameter::clear_has_embed_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_ : *default_instance_->embed_param_;
}
::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x08000000u;
}
void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void LayerParameter::set_has_flatten_param() {
  _has_bits_[0] |= 0x10000000u;
}
void LayerParameter::clear_has_flatten_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_ : *default_instance_->flatten_param_;
}
::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x40000000u;
}
void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void LayerParameter::set_has_image_data_param() {
  _has_bits_[1] |= 0x00000001u;
}
void LayerParameter::clear_has_image_data_param() {
  _has_bits_[1] &= ~0x00000001u;
}
void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[1] |= 0x00000002u;
}
void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[1] &= ~0x00000002u;
}
void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void LayerParameter::set_has_inner_product_param() {
  _has_bits_[1] |= 0x00000004u;
}
void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[1] &= ~0x00000004u;
}
void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00000008u;
}
void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00000008u;
}
void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
const ::caffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
const ::caffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_ : *default_instance_->log_param_;
}
::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void LayerParameter::set_has_lrn_param() {
  _has_bits_[1] |= 0x00000020u;
}
void LayerParameter::clear_has_lrn_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void LayerParameter::set_has_memory_data_param() {
  _has_bits_[1] |= 0x00000040u;
}
void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[1] &= ~0x00000040u;
}
void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void LayerParameter::set_has_mvn_param() {
  _has_bits_[1] |= 0x00000080u;
}
void LayerParameter::clear_has_mvn_param() {
  _has_bits_[1] &= ~0x00000080u;
}
void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.ParameterParameter parameter_param = 145;
bool LayerParameter::has_parameter_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void LayerParameter::set_has_parameter_param() {
  _has_bits_[1] |= 0x00000100u;
}
void LayerParameter::clear_has_parameter_param() {
  _has_bits_[1] &= ~0x00000100u;
}
void LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
  clear_has_parameter_param();
}
const ::caffe::ParameterParameter& LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.parameter_param)
  return parameter_param_ != NULL ? *parameter_param_ : *default_instance_->parameter_param_;
}
::caffe::ParameterParameter* LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) {
    parameter_param_ = new ::caffe::ParameterParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.parameter_param)
  return parameter_param_;
}
::caffe::ParameterParameter* LayerParameter::release_parameter_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.parameter_param)
  clear_has_parameter_param();
  ::caffe::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param) {
  delete parameter_param_;
  parameter_param_ = parameter_param;
  if (parameter_param) {
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.parameter_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void LayerParameter::set_has_pooling_param() {
  _has_bits_[1] |= 0x00000200u;
}
void LayerParameter::clear_has_pooling_param() {
  _has_bits_[1] &= ~0x00000200u;
}
void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
bool LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000400u;
}
void LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000400u;
}
void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000800u;
}
void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000800u;
}
void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PythonParameter python_param = 130;
bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00001000u;
}
void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00001000u;
}
void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
const ::caffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_ : *default_instance_->python_param_;
}
::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
bool LayerParameter::has_recurrent_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void LayerParameter::set_has_recurrent_param() {
  _has_bits_[1] |= 0x00002000u;
}
void LayerParameter::clear_has_recurrent_param() {
  _has_bits_[1] &= ~0x00002000u;
}
void LayerParameter::clear_recurrent_param() {
  if (recurrent_param_ != NULL) recurrent_param_->::caffe::RecurrentParameter::Clear();
  clear_has_recurrent_param();
}
const ::caffe::RecurrentParameter& LayerParameter::recurrent_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.recurrent_param)
  return recurrent_param_ != NULL ? *recurrent_param_ : *default_instance_->recurrent_param_;
}
::caffe::RecurrentParameter* LayerParameter::mutable_recurrent_param() {
  set_has_recurrent_param();
  if (recurrent_param_ == NULL) {
    recurrent_param_ = new ::caffe::RecurrentParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.recurrent_param)
  return recurrent_param_;
}
::caffe::RecurrentParameter* LayerParameter::release_recurrent_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.recurrent_param)
  clear_has_recurrent_param();
  ::caffe::RecurrentParameter* temp = recurrent_param_;
  recurrent_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param) {
  delete recurrent_param_;
  recurrent_param_ = recurrent_param;
  if (recurrent_param) {
    set_has_recurrent_param();
  } else {
    clear_has_recurrent_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.recurrent_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00004000u;
}
void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00004000u;
}
void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_ : *default_instance_->reduction_param_;
}
::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
bool LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00008000u;
}
void LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00008000u;
}
void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00010000u;
}
void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00010000u;
}
void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_ : *default_instance_->reshape_param_;
}
::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00020000u;
}
void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00020000u;
}
void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_ : *default_instance_->scale_param_;
}
::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00040000u;
}
void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00040000u;
}
void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00080000u;
}
void LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00080000u;
}
void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00100000u;
}
void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00100000u;
}
void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_ : *default_instance_->spp_param_;
}
::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
bool LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00200000u;
}
void LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00200000u;
}
void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00400000u;
}
void LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00400000u;
}
void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00800000u;
}
void LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00800000u;
}
void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x01000000u;
}
void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x01000000u;
}
void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
const ::caffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_ : *default_instance_->tile_param_;
}
::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x02000000u;
}
void LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x02000000u;
}
void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.BNParameter bn_param = 200;
bool LayerParameter::has_bn_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void LayerParameter::set_has_bn_param() {
  _has_bits_[1] |= 0x04000000u;
}
void LayerParameter::clear_has_bn_param() {
  _has_bits_[1] &= ~0x04000000u;
}
void LayerParameter::clear_bn_param() {
  if (bn_param_ != NULL) bn_param_->::caffe::BNParameter::Clear();
  clear_has_bn_param();
}
const ::caffe::BNParameter& LayerParameter::bn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bn_param)
  return bn_param_ != NULL ? *bn_param_ : *default_instance_->bn_param_;
}
::caffe::BNParameter* LayerParameter::mutable_bn_param() {
  set_has_bn_param();
  if (bn_param_ == NULL) {
    bn_param_ = new ::caffe::BNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bn_param)
  return bn_param_;
}
::caffe::BNParameter* LayerParameter::release_bn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bn_param)
  clear_has_bn_param();
  ::caffe::BNParameter* temp = bn_param_;
  bn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bn_param(::caffe::BNParameter* bn_param) {
  delete bn_param_;
  bn_param_ = bn_param;
  if (bn_param) {
    set_has_bn_param();
  } else {
    clear_has_bn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bn_param)
}

// optional .caffe.LocalParameter local_param = 201;
bool LayerParameter::has_local_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void LayerParameter::set_has_local_param() {
  _has_bits_[1] |= 0x08000000u;
}
void LayerParameter::clear_has_local_param() {
  _has_bits_[1] &= ~0x08000000u;
}
void LayerParameter::clear_local_param() {
  if (local_param_ != NULL) local_param_->::caffe::LocalParameter::Clear();
  clear_has_local_param();
}
const ::caffe::LocalParameter& LayerParameter::local_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.local_param)
  return local_param_ != NULL ? *local_param_ : *default_instance_->local_param_;
}
::caffe::LocalParameter* LayerParameter::mutable_local_param() {
  set_has_local_param();
  if (local_param_ == NULL) {
    local_param_ = new ::caffe::LocalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.local_param)
  return local_param_;
}
::caffe::LocalParameter* LayerParameter::release_local_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.local_param)
  clear_has_local_param();
  ::caffe::LocalParameter* temp = local_param_;
  local_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_local_param(::caffe::LocalParameter* local_param) {
  delete local_param_;
  local_param_ = local_param;
  if (local_param) {
    set_has_local_param();
  } else {
    clear_has_local_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.local_param)
}

// optional .caffe.InsanityParameter insanity_param = 202;
bool LayerParameter::has_insanity_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void LayerParameter::set_has_insanity_param() {
  _has_bits_[1] |= 0x10000000u;
}
void LayerParameter::clear_has_insanity_param() {
  _has_bits_[1] &= ~0x10000000u;
}
void LayerParameter::clear_insanity_param() {
  if (insanity_param_ != NULL) insanity_param_->::caffe::InsanityParameter::Clear();
  clear_has_insanity_param();
}
const ::caffe::InsanityParameter& LayerParameter::insanity_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.insanity_param)
  return insanity_param_ != NULL ? *insanity_param_ : *default_instance_->insanity_param_;
}
::caffe::InsanityParameter* LayerParameter::mutable_insanity_param() {
  set_has_insanity_param();
  if (insanity_param_ == NULL) {
    insanity_param_ = new ::caffe::InsanityParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.insanity_param)
  return insanity_param_;
}
::caffe::InsanityParameter* LayerParameter::release_insanity_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.insanity_param)
  clear_has_insanity_param();
  ::caffe::InsanityParameter* temp = insanity_param_;
  insanity_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_insanity_param(::caffe::InsanityParameter* insanity_param) {
  delete insanity_param_;
  insanity_param_ = insanity_param;
  if (insanity_param) {
    set_has_insanity_param();
  } else {
    clear_has_insanity_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.insanity_param)
}

// optional .caffe.TripletLossParameter triplet_loss_param = 203;
bool LayerParameter::has_triplet_loss_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void LayerParameter::set_has_triplet_loss_param() {
  _has_bits_[1] |= 0x20000000u;
}
void LayerParameter::clear_has_triplet_loss_param() {
  _has_bits_[1] &= ~0x20000000u;
}
void LayerParameter::clear_triplet_loss_param() {
  if (triplet_loss_param_ != NULL) triplet_loss_param_->::caffe::TripletLossParameter::Clear();
  clear_has_triplet_loss_param();
}
const ::caffe::TripletLossParameter& LayerParameter::triplet_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.triplet_loss_param)
  return triplet_loss_param_ != NULL ? *triplet_loss_param_ : *default_instance_->triplet_loss_param_;
}
::caffe::TripletLossParameter* LayerParameter::mutable_triplet_loss_param() {
  set_has_triplet_loss_param();
  if (triplet_loss_param_ == NULL) {
    triplet_loss_param_ = new ::caffe::TripletLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.triplet_loss_param)
  return triplet_loss_param_;
}
::caffe::TripletLossParameter* LayerParameter::release_triplet_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.triplet_loss_param)
  clear_has_triplet_loss_param();
  ::caffe::TripletLossParameter* temp = triplet_loss_param_;
  triplet_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param) {
  delete triplet_loss_param_;
  triplet_loss_param_ = triplet_loss_param;
  if (triplet_loss_param) {
    set_has_triplet_loss_param();
  } else {
    clear_has_triplet_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.triplet_loss_param)
}

// optional .caffe.ROIPoolingParameter roi_pooling_param = 204;
bool LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[1] |= 0x40000000u;
}
void LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[1] &= ~0x40000000u;
}
void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
  clear_has_roi_pooling_param();
}
const ::caffe::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_ != NULL ? *roi_pooling_param_ : *default_instance_->roi_pooling_param_;
}
::caffe::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
::caffe::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_pooling_param)
  clear_has_roi_pooling_param();
  ::caffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param) {
  delete roi_pooling_param_;
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_pooling_param)
}

// optional .caffe.EltwiseAffineParameter eltwise_affine_param = 205;
bool LayerParameter::has_eltwise_affine_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void LayerParameter::set_has_eltwise_affine_param() {
  _has_bits_[1] |= 0x80000000u;
}
void LayerParameter::clear_has_eltwise_affine_param() {
  _has_bits_[1] &= ~0x80000000u;
}
void LayerParameter::clear_eltwise_affine_param() {
  if (eltwise_affine_param_ != NULL) eltwise_affine_param_->::caffe::EltwiseAffineParameter::Clear();
  clear_has_eltwise_affine_param();
}
const ::caffe::EltwiseAffineParameter& LayerParameter::eltwise_affine_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_affine_param)
  return eltwise_affine_param_ != NULL ? *eltwise_affine_param_ : *default_instance_->eltwise_affine_param_;
}
::caffe::EltwiseAffineParameter* LayerParameter::mutable_eltwise_affine_param() {
  set_has_eltwise_affine_param();
  if (eltwise_affine_param_ == NULL) {
    eltwise_affine_param_ = new ::caffe::EltwiseAffineParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_affine_param)
  return eltwise_affine_param_;
}
::caffe::EltwiseAffineParameter* LayerParameter::release_eltwise_affine_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_affine_param)
  clear_has_eltwise_affine_param();
  ::caffe::EltwiseAffineParameter* temp = eltwise_affine_param_;
  eltwise_affine_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_eltwise_affine_param(::caffe::EltwiseAffineParameter* eltwise_affine_param) {
  delete eltwise_affine_param_;
  eltwise_affine_param_ = eltwise_affine_param;
  if (eltwise_affine_param) {
    set_has_eltwise_affine_param();
  } else {
    clear_has_eltwise_affine_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_affine_param)
}

// optional .caffe.SubRegionParameter sub_region_param = 206;
bool LayerParameter::has_sub_region_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void LayerParameter::set_has_sub_region_param() {
  _has_bits_[2] |= 0x00000001u;
}
void LayerParameter::clear_has_sub_region_param() {
  _has_bits_[2] &= ~0x00000001u;
}
void LayerParameter::clear_sub_region_param() {
  if (sub_region_param_ != NULL) sub_region_param_->::caffe::SubRegionParameter::Clear();
  clear_has_sub_region_param();
}
const ::caffe::SubRegionParameter& LayerParameter::sub_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sub_region_param)
  return sub_region_param_ != NULL ? *sub_region_param_ : *default_instance_->sub_region_param_;
}
::caffe::SubRegionParameter* LayerParameter::mutable_sub_region_param() {
  set_has_sub_region_param();
  if (sub_region_param_ == NULL) {
    sub_region_param_ = new ::caffe::SubRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sub_region_param)
  return sub_region_param_;
}
::caffe::SubRegionParameter* LayerParameter::release_sub_region_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sub_region_param)
  clear_has_sub_region_param();
  ::caffe::SubRegionParameter* temp = sub_region_param_;
  sub_region_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_sub_region_param(::caffe::SubRegionParameter* sub_region_param) {
  delete sub_region_param_;
  sub_region_param_ = sub_region_param;
  if (sub_region_param) {
    set_has_sub_region_param();
  } else {
    clear_has_sub_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sub_region_param)
}

// optional .caffe.NoiseParameter noise_param = 207;
bool LayerParameter::has_noise_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void LayerParameter::set_has_noise_param() {
  _has_bits_[2] |= 0x00000002u;
}
void LayerParameter::clear_has_noise_param() {
  _has_bits_[2] &= ~0x00000002u;
}
void LayerParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::caffe::NoiseParameter::Clear();
  clear_has_noise_param();
}
const ::caffe::NoiseParameter& LayerParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_ : *default_instance_->noise_param_;
}
::caffe::NoiseParameter* LayerParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.noise_param)
  return noise_param_;
}
::caffe::NoiseParameter* LayerParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.noise_param)
  clear_has_noise_param();
  ::caffe::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_noise_param(::caffe::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.noise_param)
}

// optional .caffe.HotspotParameter hotspot_param = 208;
bool LayerParameter::has_hotspot_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void LayerParameter::set_has_hotspot_param() {
  _has_bits_[2] |= 0x00000004u;
}
void LayerParameter::clear_has_hotspot_param() {
  _has_bits_[2] &= ~0x00000004u;
}
void LayerParameter::clear_hotspot_param() {
  if (hotspot_param_ != NULL) hotspot_param_->::caffe::HotspotParameter::Clear();
  clear_has_hotspot_param();
}
const ::caffe::HotspotParameter& LayerParameter::hotspot_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hotspot_param)
  return hotspot_param_ != NULL ? *hotspot_param_ : *default_instance_->hotspot_param_;
}
::caffe::HotspotParameter* LayerParameter::mutable_hotspot_param() {
  set_has_hotspot_param();
  if (hotspot_param_ == NULL) {
    hotspot_param_ = new ::caffe::HotspotParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hotspot_param)
  return hotspot_param_;
}
::caffe::HotspotParameter* LayerParameter::release_hotspot_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hotspot_param)
  clear_has_hotspot_param();
  ::caffe::HotspotParameter* temp = hotspot_param_;
  hotspot_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hotspot_param(::caffe::HotspotParameter* hotspot_param) {
  delete hotspot_param_;
  hotspot_param_ = hotspot_param;
  if (hotspot_param) {
    set_has_hotspot_param();
  } else {
    clear_has_hotspot_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hotspot_param)
}

// optional .caffe.PredictBoxParameter predict_box_param = 209;
bool LayerParameter::has_predict_box_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void LayerParameter::set_has_predict_box_param() {
  _has_bits_[2] |= 0x00000008u;
}
void LayerParameter::clear_has_predict_box_param() {
  _has_bits_[2] &= ~0x00000008u;
}
void LayerParameter::clear_predict_box_param() {
  if (predict_box_param_ != NULL) predict_box_param_->::caffe::PredictBoxParameter::Clear();
  clear_has_predict_box_param();
}
const ::caffe::PredictBoxParameter& LayerParameter::predict_box_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.predict_box_param)
  return predict_box_param_ != NULL ? *predict_box_param_ : *default_instance_->predict_box_param_;
}
::caffe::PredictBoxParameter* LayerParameter::mutable_predict_box_param() {
  set_has_predict_box_param();
  if (predict_box_param_ == NULL) {
    predict_box_param_ = new ::caffe::PredictBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.predict_box_param)
  return predict_box_param_;
}
::caffe::PredictBoxParameter* LayerParameter::release_predict_box_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.predict_box_param)
  clear_has_predict_box_param();
  ::caffe::PredictBoxParameter* temp = predict_box_param_;
  predict_box_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_predict_box_param(::caffe::PredictBoxParameter* predict_box_param) {
  delete predict_box_param_;
  predict_box_param_ = predict_box_param;
  if (predict_box_param) {
    set_has_predict_box_param();
  } else {
    clear_has_predict_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.predict_box_param)
}

// optional .caffe.MILDataParameter mil_data_param = 5065028;
bool LayerParameter::has_mil_data_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void LayerParameter::set_has_mil_data_param() {
  _has_bits_[2] |= 0x00000010u;
}
void LayerParameter::clear_has_mil_data_param() {
  _has_bits_[2] &= ~0x00000010u;
}
void LayerParameter::clear_mil_data_param() {
  if (mil_data_param_ != NULL) mil_data_param_->::caffe::MILDataParameter::Clear();
  clear_has_mil_data_param();
}
const ::caffe::MILDataParameter& LayerParameter::mil_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mil_data_param)
  return mil_data_param_ != NULL ? *mil_data_param_ : *default_instance_->mil_data_param_;
}
::caffe::MILDataParameter* LayerParameter::mutable_mil_data_param() {
  set_has_mil_data_param();
  if (mil_data_param_ == NULL) {
    mil_data_param_ = new ::caffe::MILDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mil_data_param)
  return mil_data_param_;
}
::caffe::MILDataParameter* LayerParameter::release_mil_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mil_data_param)
  clear_has_mil_data_param();
  ::caffe::MILDataParameter* temp = mil_data_param_;
  mil_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mil_data_param(::caffe::MILDataParameter* mil_data_param) {
  delete mil_data_param_;
  mil_data_param_ = mil_data_param;
  if (mil_data_param) {
    set_has_mil_data_param();
  } else {
    clear_has_mil_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mil_data_param)
}

// optional .caffe.MILParameter mil_param = 5065036;
bool LayerParameter::has_mil_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void LayerParameter::set_has_mil_param() {
  _has_bits_[2] |= 0x00000020u;
}
void LayerParameter::clear_has_mil_param() {
  _has_bits_[2] &= ~0x00000020u;
}
void LayerParameter::clear_mil_param() {
  if (mil_param_ != NULL) mil_param_->::caffe::MILParameter::Clear();
  clear_has_mil_param();
}
const ::caffe::MILParameter& LayerParameter::mil_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mil_param)
  return mil_param_ != NULL ? *mil_param_ : *default_instance_->mil_param_;
}
::caffe::MILParameter* LayerParameter::mutable_mil_param() {
  set_has_mil_param();
  if (mil_param_ == NULL) {
    mil_param_ = new ::caffe::MILParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mil_param)
  return mil_param_;
}
::caffe::MILParameter* LayerParameter::release_mil_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mil_param)
  clear_has_mil_param();
  ::caffe::MILParameter* temp = mil_param_;
  mil_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mil_param(::caffe::MILParameter* mil_param) {
  delete mil_param_;
  mil_param_ = mil_param;
  if (mil_param) {
    set_has_mil_param();
  } else {
    clear_has_mil_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mil_param)
}

// optional .caffe.FCNDataParameter fcn_data_param = 210;
bool LayerParameter::has_fcn_data_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void LayerParameter::set_has_fcn_data_param() {
  _has_bits_[2] |= 0x00000040u;
}
void LayerParameter::clear_has_fcn_data_param() {
  _has_bits_[2] &= ~0x00000040u;
}
void LayerParameter::clear_fcn_data_param() {
  if (fcn_data_param_ != NULL) fcn_data_param_->::caffe::FCNDataParameter::Clear();
  clear_has_fcn_data_param();
}
const ::caffe::FCNDataParameter& LayerParameter::fcn_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.fcn_data_param)
  return fcn_data_param_ != NULL ? *fcn_data_param_ : *default_instance_->fcn_data_param_;
}
::caffe::FCNDataParameter* LayerParameter::mutable_fcn_data_param() {
  set_has_fcn_data_param();
  if (fcn_data_param_ == NULL) {
    fcn_data_param_ = new ::caffe::FCNDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.fcn_data_param)
  return fcn_data_param_;
}
::caffe::FCNDataParameter* LayerParameter::release_fcn_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.fcn_data_param)
  clear_has_fcn_data_param();
  ::caffe::FCNDataParameter* temp = fcn_data_param_;
  fcn_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_fcn_data_param(::caffe::FCNDataParameter* fcn_data_param) {
  delete fcn_data_param_;
  fcn_data_param_ = fcn_data_param;
  if (fcn_data_param) {
    set_has_fcn_data_param();
  } else {
    clear_has_fcn_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.fcn_data_param)
}

// optional .caffe.CenterLossParameter center_loss_param = 211;
bool LayerParameter::has_center_loss_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void LayerParameter::set_has_center_loss_param() {
  _has_bits_[2] |= 0x00000080u;
}
void LayerParameter::clear_has_center_loss_param() {
  _has_bits_[2] &= ~0x00000080u;
}
void LayerParameter::clear_center_loss_param() {
  if (center_loss_param_ != NULL) center_loss_param_->::caffe::CenterLossParameter::Clear();
  clear_has_center_loss_param();
}
const ::caffe::CenterLossParameter& LayerParameter::center_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.center_loss_param)
  return center_loss_param_ != NULL ? *center_loss_param_ : *default_instance_->center_loss_param_;
}
::caffe::CenterLossParameter* LayerParameter::mutable_center_loss_param() {
  set_has_center_loss_param();
  if (center_loss_param_ == NULL) {
    center_loss_param_ = new ::caffe::CenterLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.center_loss_param)
  return center_loss_param_;
}
::caffe::CenterLossParameter* LayerParameter::release_center_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.center_loss_param)
  clear_has_center_loss_param();
  ::caffe::CenterLossParameter* temp = center_loss_param_;
  center_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_center_loss_param(::caffe::CenterLossParameter* center_loss_param) {
  delete center_loss_param_;
  center_loss_param_ = center_loss_param;
  if (center_loss_param) {
    set_has_center_loss_param();
  } else {
    clear_has_center_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.center_loss_param)
}

// optional .caffe.FlipParameter flip_param = 212;
bool LayerParameter::has_flip_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void LayerParameter::set_has_flip_param() {
  _has_bits_[2] |= 0x00000100u;
}
void LayerParameter::clear_has_flip_param() {
  _has_bits_[2] &= ~0x00000100u;
}
void LayerParameter::clear_flip_param() {
  if (flip_param_ != NULL) flip_param_->::caffe::FlipParameter::Clear();
  clear_has_flip_param();
}
const ::caffe::FlipParameter& LayerParameter::flip_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flip_param)
  return flip_param_ != NULL ? *flip_param_ : *default_instance_->flip_param_;
}
::caffe::FlipParameter* LayerParameter::mutable_flip_param() {
  set_has_flip_param();
  if (flip_param_ == NULL) {
    flip_param_ = new ::caffe::FlipParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flip_param)
  return flip_param_;
}
::caffe::FlipParameter* LayerParameter::release_flip_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flip_param)
  clear_has_flip_param();
  ::caffe::FlipParameter* temp = flip_param_;
  flip_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_flip_param(::caffe::FlipParameter* flip_param) {
  delete flip_param_;
  flip_param_ = flip_param;
  if (flip_param) {
    set_has_flip_param();
  } else {
    clear_has_flip_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flip_param)
}

// optional .caffe.InnerDistanceParameter inner_distance_param = 213;
bool LayerParameter::has_inner_distance_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void LayerParameter::set_has_inner_distance_param() {
  _has_bits_[2] |= 0x00000200u;
}
void LayerParameter::clear_has_inner_distance_param() {
  _has_bits_[2] &= ~0x00000200u;
}
void LayerParameter::clear_inner_distance_param() {
  if (inner_distance_param_ != NULL) inner_distance_param_->::caffe::InnerDistanceParameter::Clear();
  clear_has_inner_distance_param();
}
const ::caffe::InnerDistanceParameter& LayerParameter::inner_distance_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_distance_param)
  return inner_distance_param_ != NULL ? *inner_distance_param_ : *default_instance_->inner_distance_param_;
}
::caffe::InnerDistanceParameter* LayerParameter::mutable_inner_distance_param() {
  set_has_inner_distance_param();
  if (inner_distance_param_ == NULL) {
    inner_distance_param_ = new ::caffe::InnerDistanceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_distance_param)
  return inner_distance_param_;
}
::caffe::InnerDistanceParameter* LayerParameter::release_inner_distance_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_distance_param)
  clear_has_inner_distance_param();
  ::caffe::InnerDistanceParameter* temp = inner_distance_param_;
  inner_distance_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_inner_distance_param(::caffe::InnerDistanceParameter* inner_distance_param) {
  delete inner_distance_param_;
  inner_distance_param_ = inner_distance_param;
  if (inner_distance_param) {
    set_has_inner_distance_param();
  } else {
    clear_has_inner_distance_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_distance_param)
}

// optional .caffe.NormalizeParameter normalize_param = 214;
bool LayerParameter::has_normalize_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void LayerParameter::set_has_normalize_param() {
  _has_bits_[2] |= 0x00000400u;
}
void LayerParameter::clear_has_normalize_param() {
  _has_bits_[2] &= ~0x00000400u;
}
void LayerParameter::clear_normalize_param() {
  if (normalize_param_ != NULL) normalize_param_->::caffe::NormalizeParameter::Clear();
  clear_has_normalize_param();
}
const ::caffe::NormalizeParameter& LayerParameter::normalize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.normalize_param)
  return normalize_param_ != NULL ? *normalize_param_ : *default_instance_->normalize_param_;
}
::caffe::NormalizeParameter* LayerParameter::mutable_normalize_param() {
  set_has_normalize_param();
  if (normalize_param_ == NULL) {
    normalize_param_ = new ::caffe::NormalizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.normalize_param)
  return normalize_param_;
}
::caffe::NormalizeParameter* LayerParameter::release_normalize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.normalize_param)
  clear_has_normalize_param();
  ::caffe::NormalizeParameter* temp = normalize_param_;
  normalize_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_normalize_param(::caffe::NormalizeParameter* normalize_param) {
  delete normalize_param_;
  normalize_param_ = normalize_param;
  if (normalize_param) {
    set_has_normalize_param();
  } else {
    clear_has_normalize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.normalize_param)
}

// optional .caffe.GeneralContrastiveParameter general_contrastive_loss_param = 215;
bool LayerParameter::has_general_contrastive_loss_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void LayerParameter::set_has_general_contrastive_loss_param() {
  _has_bits_[2] |= 0x00000800u;
}
void LayerParameter::clear_has_general_contrastive_loss_param() {
  _has_bits_[2] &= ~0x00000800u;
}
void LayerParameter::clear_general_contrastive_loss_param() {
  if (general_contrastive_loss_param_ != NULL) general_contrastive_loss_param_->::caffe::GeneralContrastiveParameter::Clear();
  clear_has_general_contrastive_loss_param();
}
const ::caffe::GeneralContrastiveParameter& LayerParameter::general_contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.general_contrastive_loss_param)
  return general_contrastive_loss_param_ != NULL ? *general_contrastive_loss_param_ : *default_instance_->general_contrastive_loss_param_;
}
::caffe::GeneralContrastiveParameter* LayerParameter::mutable_general_contrastive_loss_param() {
  set_has_general_contrastive_loss_param();
  if (general_contrastive_loss_param_ == NULL) {
    general_contrastive_loss_param_ = new ::caffe::GeneralContrastiveParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.general_contrastive_loss_param)
  return general_contrastive_loss_param_;
}
::caffe::GeneralContrastiveParameter* LayerParameter::release_general_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.general_contrastive_loss_param)
  clear_has_general_contrastive_loss_param();
  ::caffe::GeneralContrastiveParameter* temp = general_contrastive_loss_param_;
  general_contrastive_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_general_contrastive_loss_param(::caffe::GeneralContrastiveParameter* general_contrastive_loss_param) {
  delete general_contrastive_loss_param_;
  general_contrastive_loss_param_ = general_contrastive_loss_param;
  if (general_contrastive_loss_param) {
    set_has_general_contrastive_loss_param();
  } else {
    clear_has_general_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.general_contrastive_loss_param)
}

// optional .caffe.SoftContrastiveParameter soft_contrastive_loss_param = 216;
bool LayerParameter::has_soft_contrastive_loss_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void LayerParameter::set_has_soft_contrastive_loss_param() {
  _has_bits_[2] |= 0x00001000u;
}
void LayerParameter::clear_has_soft_contrastive_loss_param() {
  _has_bits_[2] &= ~0x00001000u;
}
void LayerParameter::clear_soft_contrastive_loss_param() {
  if (soft_contrastive_loss_param_ != NULL) soft_contrastive_loss_param_->::caffe::SoftContrastiveParameter::Clear();
  clear_has_soft_contrastive_loss_param();
}
const ::caffe::SoftContrastiveParameter& LayerParameter::soft_contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.soft_contrastive_loss_param)
  return soft_contrastive_loss_param_ != NULL ? *soft_contrastive_loss_param_ : *default_instance_->soft_contrastive_loss_param_;
}
::caffe::SoftContrastiveParameter* LayerParameter::mutable_soft_contrastive_loss_param() {
  set_has_soft_contrastive_loss_param();
  if (soft_contrastive_loss_param_ == NULL) {
    soft_contrastive_loss_param_ = new ::caffe::SoftContrastiveParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.soft_contrastive_loss_param)
  return soft_contrastive_loss_param_;
}
::caffe::SoftContrastiveParameter* LayerParameter::release_soft_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.soft_contrastive_loss_param)
  clear_has_soft_contrastive_loss_param();
  ::caffe::SoftContrastiveParameter* temp = soft_contrastive_loss_param_;
  soft_contrastive_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_soft_contrastive_loss_param(::caffe::SoftContrastiveParameter* soft_contrastive_loss_param) {
  delete soft_contrastive_loss_param_;
  soft_contrastive_loss_param_ = soft_contrastive_loss_param;
  if (soft_contrastive_loss_param) {
    set_has_soft_contrastive_loss_param();
  } else {
    clear_has_soft_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.soft_contrastive_loss_param)
}

// optional .caffe.GeneralTripletParameter general_triplet_loss_param = 217;
bool LayerParameter::has_general_triplet_loss_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void LayerParameter::set_has_general_triplet_loss_param() {
  _has_bits_[2] |= 0x00002000u;
}
void LayerParameter::clear_has_general_triplet_loss_param() {
  _has_bits_[2] &= ~0x00002000u;
}
void LayerParameter::clear_general_triplet_loss_param() {
  if (general_triplet_loss_param_ != NULL) general_triplet_loss_param_->::caffe::GeneralTripletParameter::Clear();
  clear_has_general_triplet_loss_param();
}
const ::caffe::GeneralTripletParameter& LayerParameter::general_triplet_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.general_triplet_loss_param)
  return general_triplet_loss_param_ != NULL ? *general_triplet_loss_param_ : *default_instance_->general_triplet_loss_param_;
}
::caffe::GeneralTripletParameter* LayerParameter::mutable_general_triplet_loss_param() {
  set_has_general_triplet_loss_param();
  if (general_triplet_loss_param_ == NULL) {
    general_triplet_loss_param_ = new ::caffe::GeneralTripletParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.general_triplet_loss_param)
  return general_triplet_loss_param_;
}
::caffe::GeneralTripletParameter* LayerParameter::release_general_triplet_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.general_triplet_loss_param)
  clear_has_general_triplet_loss_param();
  ::caffe::GeneralTripletParameter* temp = general_triplet_loss_param_;
  general_triplet_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_general_triplet_loss_param(::caffe::GeneralTripletParameter* general_triplet_loss_param) {
  delete general_triplet_loss_param_;
  general_triplet_loss_param_ = general_triplet_loss_param;
  if (general_triplet_loss_param) {
    set_has_general_triplet_loss_param();
  } else {
    clear_has_general_triplet_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.general_triplet_loss_param)
}

// optional .caffe.SoftTruncationParameter soft_truncation_param = 218;
bool LayerParameter::has_soft_truncation_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void LayerParameter::set_has_soft_truncation_param() {
  _has_bits_[2] |= 0x00004000u;
}
void LayerParameter::clear_has_soft_truncation_param() {
  _has_bits_[2] &= ~0x00004000u;
}
void LayerParameter::clear_soft_truncation_param() {
  if (soft_truncation_param_ != NULL) soft_truncation_param_->::caffe::SoftTruncationParameter::Clear();
  clear_has_soft_truncation_param();
}
const ::caffe::SoftTruncationParameter& LayerParameter::soft_truncation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.soft_truncation_param)
  return soft_truncation_param_ != NULL ? *soft_truncation_param_ : *default_instance_->soft_truncation_param_;
}
::caffe::SoftTruncationParameter* LayerParameter::mutable_soft_truncation_param() {
  set_has_soft_truncation_param();
  if (soft_truncation_param_ == NULL) {
    soft_truncation_param_ = new ::caffe::SoftTruncationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.soft_truncation_param)
  return soft_truncation_param_;
}
::caffe::SoftTruncationParameter* LayerParameter::release_soft_truncation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.soft_truncation_param)
  clear_has_soft_truncation_param();
  ::caffe::SoftTruncationParameter* temp = soft_truncation_param_;
  soft_truncation_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_soft_truncation_param(::caffe::SoftTruncationParameter* soft_truncation_param) {
  delete soft_truncation_param_;
  soft_truncation_param_ = soft_truncation_param;
  if (soft_truncation_param) {
    set_has_soft_truncation_param();
  } else {
    clear_has_soft_truncation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.soft_truncation_param)
}

// optional .caffe.ProposalParameter proposal_param = 219;
bool LayerParameter::has_proposal_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void LayerParameter::set_has_proposal_param() {
  _has_bits_[2] |= 0x00008000u;
}
void LayerParameter::clear_has_proposal_param() {
  _has_bits_[2] &= ~0x00008000u;
}
void LayerParameter::clear_proposal_param() {
  if (proposal_param_ != NULL) proposal_param_->::caffe::ProposalParameter::Clear();
  clear_has_proposal_param();
}
const ::caffe::ProposalParameter& LayerParameter::proposal_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.proposal_param)
  return proposal_param_ != NULL ? *proposal_param_ : *default_instance_->proposal_param_;
}
::caffe::ProposalParameter* LayerParameter::mutable_proposal_param() {
  set_has_proposal_param();
  if (proposal_param_ == NULL) {
    proposal_param_ = new ::caffe::ProposalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.proposal_param)
  return proposal_param_;
}
::caffe::ProposalParameter* LayerParameter::release_proposal_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.proposal_param)
  clear_has_proposal_param();
  ::caffe::ProposalParameter* temp = proposal_param_;
  proposal_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_proposal_param(::caffe::ProposalParameter* proposal_param) {
  delete proposal_param_;
  proposal_param_ = proposal_param;
  if (proposal_param) {
    set_has_proposal_param();
  } else {
    clear_has_proposal_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.proposal_param)
}

// optional .caffe.PSROIPoolingParameter psroi_pooling_param = 220;
bool LayerParameter::has_psroi_pooling_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void LayerParameter::set_has_psroi_pooling_param() {
  _has_bits_[2] |= 0x00010000u;
}
void LayerParameter::clear_has_psroi_pooling_param() {
  _has_bits_[2] &= ~0x00010000u;
}
void LayerParameter::clear_psroi_pooling_param() {
  if (psroi_pooling_param_ != NULL) psroi_pooling_param_->::caffe::PSROIPoolingParameter::Clear();
  clear_has_psroi_pooling_param();
}
const ::caffe::PSROIPoolingParameter& LayerParameter::psroi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.psroi_pooling_param)
  return psroi_pooling_param_ != NULL ? *psroi_pooling_param_ : *default_instance_->psroi_pooling_param_;
}
::caffe::PSROIPoolingParameter* LayerParameter::mutable_psroi_pooling_param() {
  set_has_psroi_pooling_param();
  if (psroi_pooling_param_ == NULL) {
    psroi_pooling_param_ = new ::caffe::PSROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.psroi_pooling_param)
  return psroi_pooling_param_;
}
::caffe::PSROIPoolingParameter* LayerParameter::release_psroi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.psroi_pooling_param)
  clear_has_psroi_pooling_param();
  ::caffe::PSROIPoolingParameter* temp = psroi_pooling_param_;
  psroi_pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_psroi_pooling_param(::caffe::PSROIPoolingParameter* psroi_pooling_param) {
  delete psroi_pooling_param_;
  psroi_pooling_param_ = psroi_pooling_param;
  if (psroi_pooling_param) {
    set_has_psroi_pooling_param();
  } else {
    clear_has_psroi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.psroi_pooling_param)
}

// optional .caffe.PairwiseParameter pairwise_param = 221;
bool LayerParameter::has_pairwise_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void LayerParameter::set_has_pairwise_param() {
  _has_bits_[2] |= 0x00020000u;
}
void LayerParameter::clear_has_pairwise_param() {
  _has_bits_[2] &= ~0x00020000u;
}
void LayerParameter::clear_pairwise_param() {
  if (pairwise_param_ != NULL) pairwise_param_->::caffe::PairwiseParameter::Clear();
  clear_has_pairwise_param();
}
const ::caffe::PairwiseParameter& LayerParameter::pairwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pairwise_param)
  return pairwise_param_ != NULL ? *pairwise_param_ : *default_instance_->pairwise_param_;
}
::caffe::PairwiseParameter* LayerParameter::mutable_pairwise_param() {
  set_has_pairwise_param();
  if (pairwise_param_ == NULL) {
    pairwise_param_ = new ::caffe::PairwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pairwise_param)
  return pairwise_param_;
}
::caffe::PairwiseParameter* LayerParameter::release_pairwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pairwise_param)
  clear_has_pairwise_param();
  ::caffe::PairwiseParameter* temp = pairwise_param_;
  pairwise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pairwise_param(::caffe::PairwiseParameter* pairwise_param) {
  delete pairwise_param_;
  pairwise_param_ = pairwise_param;
  if (pairwise_param) {
    set_has_pairwise_param();
  } else {
    clear_has_pairwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pairwise_param)
}

// optional .caffe.SmoothL1Parameter smoothl1_param = 222;
bool LayerParameter::has_smoothl1_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
void LayerParameter::set_has_smoothl1_param() {
  _has_bits_[2] |= 0x00040000u;
}
void LayerParameter::clear_has_smoothl1_param() {
  _has_bits_[2] &= ~0x00040000u;
}
void LayerParameter::clear_smoothl1_param() {
  if (smoothl1_param_ != NULL) smoothl1_param_->::caffe::SmoothL1Parameter::Clear();
  clear_has_smoothl1_param();
}
const ::caffe::SmoothL1Parameter& LayerParameter::smoothl1_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smoothl1_param)
  return smoothl1_param_ != NULL ? *smoothl1_param_ : *default_instance_->smoothl1_param_;
}
::caffe::SmoothL1Parameter* LayerParameter::mutable_smoothl1_param() {
  set_has_smoothl1_param();
  if (smoothl1_param_ == NULL) {
    smoothl1_param_ = new ::caffe::SmoothL1Parameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smoothl1_param)
  return smoothl1_param_;
}
::caffe::SmoothL1Parameter* LayerParameter::release_smoothl1_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smoothl1_param)
  clear_has_smoothl1_param();
  ::caffe::SmoothL1Parameter* temp = smoothl1_param_;
  smoothl1_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smoothl1_param(::caffe::SmoothL1Parameter* smoothl1_param) {
  delete smoothl1_param_;
  smoothl1_param_ = smoothl1_param;
  if (smoothl1_param) {
    set_has_smoothl1_param();
  } else {
    clear_has_smoothl1_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smoothl1_param)
}

// optional .caffe.BatchContrastiveParameter batch_contrastive_loss_param = 223;
bool LayerParameter::has_batch_contrastive_loss_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
void LayerParameter::set_has_batch_contrastive_loss_param() {
  _has_bits_[2] |= 0x00080000u;
}
void LayerParameter::clear_has_batch_contrastive_loss_param() {
  _has_bits_[2] &= ~0x00080000u;
}
void LayerParameter::clear_batch_contrastive_loss_param() {
  if (batch_contrastive_loss_param_ != NULL) batch_contrastive_loss_param_->::caffe::BatchContrastiveParameter::Clear();
  clear_has_batch_contrastive_loss_param();
}
const ::caffe::BatchContrastiveParameter& LayerParameter::batch_contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_contrastive_loss_param)
  return batch_contrastive_loss_param_ != NULL ? *batch_contrastive_loss_param_ : *default_instance_->batch_contrastive_loss_param_;
}
::caffe::BatchContrastiveParameter* LayerParameter::mutable_batch_contrastive_loss_param() {
  set_has_batch_contrastive_loss_param();
  if (batch_contrastive_loss_param_ == NULL) {
    batch_contrastive_loss_param_ = new ::caffe::BatchContrastiveParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_contrastive_loss_param)
  return batch_contrastive_loss_param_;
}
::caffe::BatchContrastiveParameter* LayerParameter::release_batch_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_contrastive_loss_param)
  clear_has_batch_contrastive_loss_param();
  ::caffe::BatchContrastiveParameter* temp = batch_contrastive_loss_param_;
  batch_contrastive_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_batch_contrastive_loss_param(::caffe::BatchContrastiveParameter* batch_contrastive_loss_param) {
  delete batch_contrastive_loss_param_;
  batch_contrastive_loss_param_ = batch_contrastive_loss_param;
  if (batch_contrastive_loss_param) {
    set_has_batch_contrastive_loss_param();
  } else {
    clear_has_batch_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_contrastive_loss_param)
}

// optional .caffe.PermuteParameter permute_param = 224;
bool LayerParameter::has_permute_param() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
void LayerParameter::set_has_permute_param() {
  _has_bits_[2] |= 0x00100000u;
}
void LayerParameter::clear_has_permute_param() {
  _has_bits_[2] &= ~0x00100000u;
}
void LayerParameter::clear_permute_param() {
  if (permute_param_ != NULL) permute_param_->::caffe::PermuteParameter::Clear();
  clear_has_permute_param();
}
const ::caffe::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.permute_param)
  return permute_param_ != NULL ? *permute_param_ : *default_instance_->permute_param_;
}
::caffe::PermuteParameter* LayerParameter::mutable_permute_param() {
  set_has_permute_param();
  if (permute_param_ == NULL) {
    permute_param_ = new ::caffe::PermuteParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.permute_param)
  return permute_param_;
}
::caffe::PermuteParameter* LayerParameter::release_permute_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.permute_param)
  clear_has_permute_param();
  ::caffe::PermuteParameter* temp = permute_param_;
  permute_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_permute_param(::caffe::PermuteParameter* permute_param) {
  delete permute_param_;
  permute_param_ = permute_param;
  if (permute_param) {
    set_has_permute_param();
  } else {
    clear_has_permute_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.permute_param)
}

// optional .caffe.TruncationParameter truncation_param = 225;
bool LayerParameter::has_truncation_param() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
void LayerParameter::set_has_truncation_param() {
  _has_bits_[2] |= 0x00200000u;
}
void LayerParameter::clear_has_truncation_param() {
  _has_bits_[2] &= ~0x00200000u;
}
void LayerParameter::clear_truncation_param() {
  if (truncation_param_ != NULL) truncation_param_->::caffe::TruncationParameter::Clear();
  clear_has_truncation_param();
}
const ::caffe::TruncationParameter& LayerParameter::truncation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.truncation_param)
  return truncation_param_ != NULL ? *truncation_param_ : *default_instance_->truncation_param_;
}
::caffe::TruncationParameter* LayerParameter::mutable_truncation_param() {
  set_has_truncation_param();
  if (truncation_param_ == NULL) {
    truncation_param_ = new ::caffe::TruncationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.truncation_param)
  return truncation_param_;
}
::caffe::TruncationParameter* LayerParameter::release_truncation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.truncation_param)
  clear_has_truncation_param();
  ::caffe::TruncationParameter* temp = truncation_param_;
  truncation_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_truncation_param(::caffe::TruncationParameter* truncation_param) {
  delete truncation_param_;
  truncation_param_ = truncation_param;
  if (truncation_param) {
    set_has_truncation_param();
  } else {
    clear_has_truncation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.truncation_param)
}

// optional .caffe.NCAParameter nca_param = 226;
bool LayerParameter::has_nca_param() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
void LayerParameter::set_has_nca_param() {
  _has_bits_[2] |= 0x00400000u;
}
void LayerParameter::clear_has_nca_param() {
  _has_bits_[2] &= ~0x00400000u;
}
void LayerParameter::clear_nca_param() {
  if (nca_param_ != NULL) nca_param_->::caffe::NCAParameter::Clear();
  clear_has_nca_param();
}
const ::caffe::NCAParameter& LayerParameter::nca_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.nca_param)
  return nca_param_ != NULL ? *nca_param_ : *default_instance_->nca_param_;
}
::caffe::NCAParameter* LayerParameter::mutable_nca_param() {
  set_has_nca_param();
  if (nca_param_ == NULL) {
    nca_param_ = new ::caffe::NCAParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.nca_param)
  return nca_param_;
}
::caffe::NCAParameter* LayerParameter::release_nca_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.nca_param)
  clear_has_nca_param();
  ::caffe::NCAParameter* temp = nca_param_;
  nca_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_nca_param(::caffe::NCAParameter* nca_param) {
  delete nca_param_;
  nca_param_ = nca_param;
  if (nca_param) {
    set_has_nca_param();
  } else {
    clear_has_nca_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.nca_param)
}

// optional .caffe.LargeMarginInnerProductParameter largemargin_inner_product_param = 227;
bool LayerParameter::has_largemargin_inner_product_param() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
void LayerParameter::set_has_largemargin_inner_product_param() {
  _has_bits_[2] |= 0x00800000u;
}
void LayerParameter::clear_has_largemargin_inner_product_param() {
  _has_bits_[2] &= ~0x00800000u;
}
void LayerParameter::clear_largemargin_inner_product_param() {
  if (largemargin_inner_product_param_ != NULL) largemargin_inner_product_param_->::caffe::LargeMarginInnerProductParameter::Clear();
  clear_has_largemargin_inner_product_param();
}
const ::caffe::LargeMarginInnerProductParameter& LayerParameter::largemargin_inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.largemargin_inner_product_param)
  return largemargin_inner_product_param_ != NULL ? *largemargin_inner_product_param_ : *default_instance_->largemargin_inner_product_param_;
}
::caffe::LargeMarginInnerProductParameter* LayerParameter::mutable_largemargin_inner_product_param() {
  set_has_largemargin_inner_product_param();
  if (largemargin_inner_product_param_ == NULL) {
    largemargin_inner_product_param_ = new ::caffe::LargeMarginInnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.largemargin_inner_product_param)
  return largemargin_inner_product_param_;
}
::caffe::LargeMarginInnerProductParameter* LayerParameter::release_largemargin_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.largemargin_inner_product_param)
  clear_has_largemargin_inner_product_param();
  ::caffe::LargeMarginInnerProductParameter* temp = largemargin_inner_product_param_;
  largemargin_inner_product_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_largemargin_inner_product_param(::caffe::LargeMarginInnerProductParameter* largemargin_inner_product_param) {
  delete largemargin_inner_product_param_;
  largemargin_inner_product_param_ = largemargin_inner_product_param;
  if (largemargin_inner_product_param) {
    set_has_largemargin_inner_product_param();
  } else {
    clear_has_largemargin_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.largemargin_inner_product_param)
}

// optional .caffe.LabelSpecificRescaleParameter label_specific_rescale_param = 228;
bool LayerParameter::has_label_specific_rescale_param() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
void LayerParameter::set_has_label_specific_rescale_param() {
  _has_bits_[2] |= 0x01000000u;
}
void LayerParameter::clear_has_label_specific_rescale_param() {
  _has_bits_[2] &= ~0x01000000u;
}
void LayerParameter::clear_label_specific_rescale_param() {
  if (label_specific_rescale_param_ != NULL) label_specific_rescale_param_->::caffe::LabelSpecificRescaleParameter::Clear();
  clear_has_label_specific_rescale_param();
}
const ::caffe::LabelSpecificRescaleParameter& LayerParameter::label_specific_rescale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_rescale_param)
  return label_specific_rescale_param_ != NULL ? *label_specific_rescale_param_ : *default_instance_->label_specific_rescale_param_;
}
::caffe::LabelSpecificRescaleParameter* LayerParameter::mutable_label_specific_rescale_param() {
  set_has_label_specific_rescale_param();
  if (label_specific_rescale_param_ == NULL) {
    label_specific_rescale_param_ = new ::caffe::LabelSpecificRescaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_rescale_param)
  return label_specific_rescale_param_;
}
::caffe::LabelSpecificRescaleParameter* LayerParameter::release_label_specific_rescale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_rescale_param)
  clear_has_label_specific_rescale_param();
  ::caffe::LabelSpecificRescaleParameter* temp = label_specific_rescale_param_;
  label_specific_rescale_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_specific_rescale_param(::caffe::LabelSpecificRescaleParameter* label_specific_rescale_param) {
  delete label_specific_rescale_param_;
  label_specific_rescale_param_ = label_specific_rescale_param;
  if (label_specific_rescale_param) {
    set_has_label_specific_rescale_param();
  } else {
    clear_has_label_specific_rescale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_rescale_param)
}

// optional .caffe.InfimumLossParamter infimum_loss_param = 229;
bool LayerParameter::has_infimum_loss_param() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
void LayerParameter::set_has_infimum_loss_param() {
  _has_bits_[2] |= 0x02000000u;
}
void LayerParameter::clear_has_infimum_loss_param() {
  _has_bits_[2] &= ~0x02000000u;
}
void LayerParameter::clear_infimum_loss_param() {
  if (infimum_loss_param_ != NULL) infimum_loss_param_->::caffe::InfimumLossParamter::Clear();
  clear_has_infimum_loss_param();
}
const ::caffe::InfimumLossParamter& LayerParameter::infimum_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infimum_loss_param)
  return infimum_loss_param_ != NULL ? *infimum_loss_param_ : *default_instance_->infimum_loss_param_;
}
::caffe::InfimumLossParamter* LayerParameter::mutable_infimum_loss_param() {
  set_has_infimum_loss_param();
  if (infimum_loss_param_ == NULL) {
    infimum_loss_param_ = new ::caffe::InfimumLossParamter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infimum_loss_param)
  return infimum_loss_param_;
}
::caffe::InfimumLossParamter* LayerParameter::release_infimum_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infimum_loss_param)
  clear_has_infimum_loss_param();
  ::caffe::InfimumLossParamter* temp = infimum_loss_param_;
  infimum_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_infimum_loss_param(::caffe::InfimumLossParamter* infimum_loss_param) {
  delete infimum_loss_param_;
  infimum_loss_param_ = infimum_loss_param;
  if (infimum_loss_param) {
    set_has_infimum_loss_param();
  } else {
    clear_has_infimum_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infimum_loss_param)
}

// optional .caffe.OrdinalRegressionParameter ordinal_regression_loss_param = 230;
bool LayerParameter::has_ordinal_regression_loss_param() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
void LayerParameter::set_has_ordinal_regression_loss_param() {
  _has_bits_[2] |= 0x04000000u;
}
void LayerParameter::clear_has_ordinal_regression_loss_param() {
  _has_bits_[2] &= ~0x04000000u;
}
void LayerParameter::clear_ordinal_regression_loss_param() {
  if (ordinal_regression_loss_param_ != NULL) ordinal_regression_loss_param_->::caffe::OrdinalRegressionParameter::Clear();
  clear_has_ordinal_regression_loss_param();
}
const ::caffe::OrdinalRegressionParameter& LayerParameter::ordinal_regression_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.ordinal_regression_loss_param)
  return ordinal_regression_loss_param_ != NULL ? *ordinal_regression_loss_param_ : *default_instance_->ordinal_regression_loss_param_;
}
::caffe::OrdinalRegressionParameter* LayerParameter::mutable_ordinal_regression_loss_param() {
  set_has_ordinal_regression_loss_param();
  if (ordinal_regression_loss_param_ == NULL) {
    ordinal_regression_loss_param_ = new ::caffe::OrdinalRegressionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.ordinal_regression_loss_param)
  return ordinal_regression_loss_param_;
}
::caffe::OrdinalRegressionParameter* LayerParameter::release_ordinal_regression_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.ordinal_regression_loss_param)
  clear_has_ordinal_regression_loss_param();
  ::caffe::OrdinalRegressionParameter* temp = ordinal_regression_loss_param_;
  ordinal_regression_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_ordinal_regression_loss_param(::caffe::OrdinalRegressionParameter* ordinal_regression_loss_param) {
  delete ordinal_regression_loss_param_;
  ordinal_regression_loss_param_ = ordinal_regression_loss_param;
  if (ordinal_regression_loss_param) {
    set_has_ordinal_regression_loss_param();
  } else {
    clear_has_ordinal_regression_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.ordinal_regression_loss_param)
}

// optional .caffe.ResizeParameter resize_param = 231;
bool LayerParameter::has_resize_param() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
void LayerParameter::set_has_resize_param() {
  _has_bits_[2] |= 0x08000000u;
}
void LayerParameter::clear_has_resize_param() {
  _has_bits_[2] &= ~0x08000000u;
}
void LayerParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
  clear_has_resize_param();
}
const ::caffe::ResizeParameter& LayerParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
::caffe::ResizeParameter* LayerParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) {
    resize_param_ = new ::caffe::ResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resize_param)
  return resize_param_;
}
::caffe::ResizeParameter* LayerParameter::release_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resize_param)
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resize_param)
}

// optional .caffe.MarginInnerProductParameter margin_inner_product_param = 232;
bool LayerParameter::has_margin_inner_product_param() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
void LayerParameter::set_has_margin_inner_product_param() {
  _has_bits_[2] |= 0x10000000u;
}
void LayerParameter::clear_has_margin_inner_product_param() {
  _has_bits_[2] &= ~0x10000000u;
}
void LayerParameter::clear_margin_inner_product_param() {
  if (margin_inner_product_param_ != NULL) margin_inner_product_param_->::caffe::MarginInnerProductParameter::Clear();
  clear_has_margin_inner_product_param();
}
const ::caffe::MarginInnerProductParameter& LayerParameter::margin_inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.margin_inner_product_param)
  return margin_inner_product_param_ != NULL ? *margin_inner_product_param_ : *default_instance_->margin_inner_product_param_;
}
::caffe::MarginInnerProductParameter* LayerParameter::mutable_margin_inner_product_param() {
  set_has_margin_inner_product_param();
  if (margin_inner_product_param_ == NULL) {
    margin_inner_product_param_ = new ::caffe::MarginInnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.margin_inner_product_param)
  return margin_inner_product_param_;
}
::caffe::MarginInnerProductParameter* LayerParameter::release_margin_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.margin_inner_product_param)
  clear_has_margin_inner_product_param();
  ::caffe::MarginInnerProductParameter* temp = margin_inner_product_param_;
  margin_inner_product_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_margin_inner_product_param(::caffe::MarginInnerProductParameter* margin_inner_product_param) {
  delete margin_inner_product_param_;
  margin_inner_product_param_ = margin_inner_product_param;
  if (margin_inner_product_param) {
    set_has_margin_inner_product_param();
  } else {
    clear_has_margin_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.margin_inner_product_param)
}

// optional .caffe.FeatureDecayLossParameter feature_decay_loss_param = 233;
bool LayerParameter::has_feature_decay_loss_param() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
void LayerParameter::set_has_feature_decay_loss_param() {
  _has_bits_[2] |= 0x20000000u;
}
void LayerParameter::clear_has_feature_decay_loss_param() {
  _has_bits_[2] &= ~0x20000000u;
}
void LayerParameter::clear_feature_decay_loss_param() {
  if (feature_decay_loss_param_ != NULL) feature_decay_loss_param_->::caffe::FeatureDecayLossParameter::Clear();
  clear_has_feature_decay_loss_param();
}
const ::caffe::FeatureDecayLossParameter& LayerParameter::feature_decay_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.feature_decay_loss_param)
  return feature_decay_loss_param_ != NULL ? *feature_decay_loss_param_ : *default_instance_->feature_decay_loss_param_;
}
::caffe::FeatureDecayLossParameter* LayerParameter::mutable_feature_decay_loss_param() {
  set_has_feature_decay_loss_param();
  if (feature_decay_loss_param_ == NULL) {
    feature_decay_loss_param_ = new ::caffe::FeatureDecayLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.feature_decay_loss_param)
  return feature_decay_loss_param_;
}
::caffe::FeatureDecayLossParameter* LayerParameter::release_feature_decay_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.feature_decay_loss_param)
  clear_has_feature_decay_loss_param();
  ::caffe::FeatureDecayLossParameter* temp = feature_decay_loss_param_;
  feature_decay_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_feature_decay_loss_param(::caffe::FeatureDecayLossParameter* feature_decay_loss_param) {
  delete feature_decay_loss_param_;
  feature_decay_loss_param_ = feature_decay_loss_param;
  if (feature_decay_loss_param) {
    set_has_feature_decay_loss_param();
  } else {
    clear_has_feature_decay_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.feature_decay_loss_param)
}

// optional .caffe.ConfidencePenaltyLossParameter confidence_penalty_loss_param = 234;
bool LayerParameter::has_confidence_penalty_loss_param() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
void LayerParameter::set_has_confidence_penalty_loss_param() {
  _has_bits_[2] |= 0x40000000u;
}
void LayerParameter::clear_has_confidence_penalty_loss_param() {
  _has_bits_[2] &= ~0x40000000u;
}
void LayerParameter::clear_confidence_penalty_loss_param() {
  if (confidence_penalty_loss_param_ != NULL) confidence_penalty_loss_param_->::caffe::ConfidencePenaltyLossParameter::Clear();
  clear_has_confidence_penalty_loss_param();
}
const ::caffe::ConfidencePenaltyLossParameter& LayerParameter::confidence_penalty_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.confidence_penalty_loss_param)
  return confidence_penalty_loss_param_ != NULL ? *confidence_penalty_loss_param_ : *default_instance_->confidence_penalty_loss_param_;
}
::caffe::ConfidencePenaltyLossParameter* LayerParameter::mutable_confidence_penalty_loss_param() {
  set_has_confidence_penalty_loss_param();
  if (confidence_penalty_loss_param_ == NULL) {
    confidence_penalty_loss_param_ = new ::caffe::ConfidencePenaltyLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.confidence_penalty_loss_param)
  return confidence_penalty_loss_param_;
}
::caffe::ConfidencePenaltyLossParameter* LayerParameter::release_confidence_penalty_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.confidence_penalty_loss_param)
  clear_has_confidence_penalty_loss_param();
  ::caffe::ConfidencePenaltyLossParameter* temp = confidence_penalty_loss_param_;
  confidence_penalty_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_confidence_penalty_loss_param(::caffe::ConfidencePenaltyLossParameter* confidence_penalty_loss_param) {
  delete confidence_penalty_loss_param_;
  confidence_penalty_loss_param_ = confidence_penalty_loss_param;
  if (confidence_penalty_loss_param) {
    set_has_confidence_penalty_loss_param();
  } else {
    clear_has_confidence_penalty_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.confidence_penalty_loss_param)
}

// optional .caffe.FocalLossParameter focal_loss_param = 235;
bool LayerParameter::has_focal_loss_param() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
void LayerParameter::set_has_focal_loss_param() {
  _has_bits_[2] |= 0x80000000u;
}
void LayerParameter::clear_has_focal_loss_param() {
  _has_bits_[2] &= ~0x80000000u;
}
void LayerParameter::clear_focal_loss_param() {
  if (focal_loss_param_ != NULL) focal_loss_param_->::caffe::FocalLossParameter::Clear();
  clear_has_focal_loss_param();
}
const ::caffe::FocalLossParameter& LayerParameter::focal_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.focal_loss_param)
  return focal_loss_param_ != NULL ? *focal_loss_param_ : *default_instance_->focal_loss_param_;
}
::caffe::FocalLossParameter* LayerParameter::mutable_focal_loss_param() {
  set_has_focal_loss_param();
  if (focal_loss_param_ == NULL) {
    focal_loss_param_ = new ::caffe::FocalLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.focal_loss_param)
  return focal_loss_param_;
}
::caffe::FocalLossParameter* LayerParameter::release_focal_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.focal_loss_param)
  clear_has_focal_loss_param();
  ::caffe::FocalLossParameter* temp = focal_loss_param_;
  focal_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_focal_loss_param(::caffe::FocalLossParameter* focal_loss_param) {
  delete focal_loss_param_;
  focal_loss_param_ = focal_loss_param;
  if (focal_loss_param) {
    set_has_focal_loss_param();
  } else {
    clear_has_focal_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.focal_loss_param)
}

// optional .caffe.LabelSpecificMarginParameter label_specific_margin_param = 236;
bool LayerParameter::has_label_specific_margin_param() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
void LayerParameter::set_has_label_specific_margin_param() {
  _has_bits_[3] |= 0x00000001u;
}
void LayerParameter::clear_has_label_specific_margin_param() {
  _has_bits_[3] &= ~0x00000001u;
}
void LayerParameter::clear_label_specific_margin_param() {
  if (label_specific_margin_param_ != NULL) label_specific_margin_param_->::caffe::LabelSpecificMarginParameter::Clear();
  clear_has_label_specific_margin_param();
}
const ::caffe::LabelSpecificMarginParameter& LayerParameter::label_specific_margin_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_margin_param)
  return label_specific_margin_param_ != NULL ? *label_specific_margin_param_ : *default_instance_->label_specific_margin_param_;
}
::caffe::LabelSpecificMarginParameter* LayerParameter::mutable_label_specific_margin_param() {
  set_has_label_specific_margin_param();
  if (label_specific_margin_param_ == NULL) {
    label_specific_margin_param_ = new ::caffe::LabelSpecificMarginParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_margin_param)
  return label_specific_margin_param_;
}
::caffe::LabelSpecificMarginParameter* LayerParameter::release_label_specific_margin_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_margin_param)
  clear_has_label_specific_margin_param();
  ::caffe::LabelSpecificMarginParameter* temp = label_specific_margin_param_;
  label_specific_margin_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_specific_margin_param(::caffe::LabelSpecificMarginParameter* label_specific_margin_param) {
  delete label_specific_margin_param_;
  label_specific_margin_param_ = label_specific_margin_param;
  if (label_specific_margin_param) {
    set_has_label_specific_margin_param();
  } else {
    clear_has_label_specific_margin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_margin_param)
}

// optional .caffe.ChannelScaleParameter channel_scale_param = 237;
bool LayerParameter::has_channel_scale_param() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
void LayerParameter::set_has_channel_scale_param() {
  _has_bits_[3] |= 0x00000002u;
}
void LayerParameter::clear_has_channel_scale_param() {
  _has_bits_[3] &= ~0x00000002u;
}
void LayerParameter::clear_channel_scale_param() {
  if (channel_scale_param_ != NULL) channel_scale_param_->::caffe::ChannelScaleParameter::Clear();
  clear_has_channel_scale_param();
}
const ::caffe::ChannelScaleParameter& LayerParameter::channel_scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.channel_scale_param)
  return channel_scale_param_ != NULL ? *channel_scale_param_ : *default_instance_->channel_scale_param_;
}
::caffe::ChannelScaleParameter* LayerParameter::mutable_channel_scale_param() {
  set_has_channel_scale_param();
  if (channel_scale_param_ == NULL) {
    channel_scale_param_ = new ::caffe::ChannelScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.channel_scale_param)
  return channel_scale_param_;
}
::caffe::ChannelScaleParameter* LayerParameter::release_channel_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.channel_scale_param)
  clear_has_channel_scale_param();
  ::caffe::ChannelScaleParameter* temp = channel_scale_param_;
  channel_scale_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_channel_scale_param(::caffe::ChannelScaleParameter* channel_scale_param) {
  delete channel_scale_param_;
  channel_scale_param_ = channel_scale_param;
  if (channel_scale_param) {
    set_has_channel_scale_param();
  } else {
    clear_has_channel_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.channel_scale_param)
}

// optional .caffe.LabelSpecificAffineParameter label_specific_affine_param = 238;
bool LayerParameter::has_label_specific_affine_param() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
void LayerParameter::set_has_label_specific_affine_param() {
  _has_bits_[3] |= 0x00000004u;
}
void LayerParameter::clear_has_label_specific_affine_param() {
  _has_bits_[3] &= ~0x00000004u;
}
void LayerParameter::clear_label_specific_affine_param() {
  if (label_specific_affine_param_ != NULL) label_specific_affine_param_->::caffe::LabelSpecificAffineParameter::Clear();
  clear_has_label_specific_affine_param();
}
const ::caffe::LabelSpecificAffineParameter& LayerParameter::label_specific_affine_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_affine_param)
  return label_specific_affine_param_ != NULL ? *label_specific_affine_param_ : *default_instance_->label_specific_affine_param_;
}
::caffe::LabelSpecificAffineParameter* LayerParameter::mutable_label_specific_affine_param() {
  set_has_label_specific_affine_param();
  if (label_specific_affine_param_ == NULL) {
    label_specific_affine_param_ = new ::caffe::LabelSpecificAffineParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_affine_param)
  return label_specific_affine_param_;
}
::caffe::LabelSpecificAffineParameter* LayerParameter::release_label_specific_affine_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_affine_param)
  clear_has_label_specific_affine_param();
  ::caffe::LabelSpecificAffineParameter* temp = label_specific_affine_param_;
  label_specific_affine_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_specific_affine_param(::caffe::LabelSpecificAffineParameter* label_specific_affine_param) {
  delete label_specific_affine_param_;
  label_specific_affine_param_ = label_specific_affine_param;
  if (label_specific_affine_param) {
    set_has_label_specific_affine_param();
  } else {
    clear_has_label_specific_affine_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_affine_param)
}

// optional .caffe.LabelSpecificHardMarginParameter label_specific_hard_margin_param = 239;
bool LayerParameter::has_label_specific_hard_margin_param() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
void LayerParameter::set_has_label_specific_hard_margin_param() {
  _has_bits_[3] |= 0x00000008u;
}
void LayerParameter::clear_has_label_specific_hard_margin_param() {
  _has_bits_[3] &= ~0x00000008u;
}
void LayerParameter::clear_label_specific_hard_margin_param() {
  if (label_specific_hard_margin_param_ != NULL) label_specific_hard_margin_param_->::caffe::LabelSpecificHardMarginParameter::Clear();
  clear_has_label_specific_hard_margin_param();
}
const ::caffe::LabelSpecificHardMarginParameter& LayerParameter::label_specific_hard_margin_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_hard_margin_param)
  return label_specific_hard_margin_param_ != NULL ? *label_specific_hard_margin_param_ : *default_instance_->label_specific_hard_margin_param_;
}
::caffe::LabelSpecificHardMarginParameter* LayerParameter::mutable_label_specific_hard_margin_param() {
  set_has_label_specific_hard_margin_param();
  if (label_specific_hard_margin_param_ == NULL) {
    label_specific_hard_margin_param_ = new ::caffe::LabelSpecificHardMarginParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_hard_margin_param)
  return label_specific_hard_margin_param_;
}
::caffe::LabelSpecificHardMarginParameter* LayerParameter::release_label_specific_hard_margin_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_hard_margin_param)
  clear_has_label_specific_hard_margin_param();
  ::caffe::LabelSpecificHardMarginParameter* temp = label_specific_hard_margin_param_;
  label_specific_hard_margin_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_specific_hard_margin_param(::caffe::LabelSpecificHardMarginParameter* label_specific_hard_margin_param) {
  delete label_specific_hard_margin_param_;
  label_specific_hard_margin_param_ = label_specific_hard_margin_param;
  if (label_specific_hard_margin_param) {
    set_has_label_specific_hard_margin_param();
  } else {
    clear_has_label_specific_hard_margin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_hard_margin_param)
}

// optional .caffe.LabelSpecificAddParameter label_specific_add_param = 241;
bool LayerParameter::has_label_specific_add_param() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
void LayerParameter::set_has_label_specific_add_param() {
  _has_bits_[3] |= 0x00000010u;
}
void LayerParameter::clear_has_label_specific_add_param() {
  _has_bits_[3] &= ~0x00000010u;
}
void LayerParameter::clear_label_specific_add_param() {
  if (label_specific_add_param_ != NULL) label_specific_add_param_->::caffe::LabelSpecificAddParameter::Clear();
  clear_has_label_specific_add_param();
}
const ::caffe::LabelSpecificAddParameter& LayerParameter::label_specific_add_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_add_param)
  return label_specific_add_param_ != NULL ? *label_specific_add_param_ : *default_instance_->label_specific_add_param_;
}
::caffe::LabelSpecificAddParameter* LayerParameter::mutable_label_specific_add_param() {
  set_has_label_specific_add_param();
  if (label_specific_add_param_ == NULL) {
    label_specific_add_param_ = new ::caffe::LabelSpecificAddParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_add_param)
  return label_specific_add_param_;
}
::caffe::LabelSpecificAddParameter* LayerParameter::release_label_specific_add_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_add_param)
  clear_has_label_specific_add_param();
  ::caffe::LabelSpecificAddParameter* temp = label_specific_add_param_;
  label_specific_add_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_specific_add_param(::caffe::LabelSpecificAddParameter* label_specific_add_param) {
  delete label_specific_add_param_;
  label_specific_add_param_ = label_specific_add_param;
  if (label_specific_add_param) {
    set_has_label_specific_add_param();
  } else {
    clear_has_label_specific_add_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_add_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationParameter::kScaleFieldNumber;
const int TransformationParameter::kMirrorFieldNumber;
const int TransformationParameter::kCropSizeFieldNumber;
const int TransformationParameter::kMeanFileFieldNumber;
const int TransformationParameter::kMeanValueFieldNumber;
const int TransformationParameter::kForceColorFieldNumber;
const int TransformationParameter::kForceGrayFieldNumber;
const int TransformationParameter::kCropHFieldNumber;
const int TransformationParameter::kCropWFieldNumber;
const int TransformationParameter::kCenterCropFieldNumber;
const int TransformationParameter::kEraseRatioFieldNumber;
const int TransformationParameter::kScaleMinFieldNumber;
const int TransformationParameter::kScaleMaxFieldNumber;
const int TransformationParameter::kAspectMinFieldNumber;
const int TransformationParameter::kAspectMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationParameter::TransformationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TransformationParameter)
}

void TransformationParameter::InitAsDefaultInstance() {
}

TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scale_ = 1;
  mirror_ = false;
  crop_size_ = 0u;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  force_color_ = false;
  force_gray_ = false;
  crop_h_ = 0u;
  crop_w_ = 0u;
  center_crop_ = false;
  erase_ratio_ = 0;
  scale_min_ = 0.02f;
  scale_max_ = 0.4f;
  aspect_min_ = 0.33f;
  aspect_max_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:caffe.TransformationParameter)
  SharedDtor();
}

void TransformationParameter::SharedDtor() {
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransformationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformationParameter_descriptor_;
}

const TransformationParameter& TransformationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TransformationParameter* TransformationParameter::default_instance_ = NULL;

TransformationParameter* TransformationParameter::New(::google::protobuf::Arena* arena) const {
  TransformationParameter* n = new TransformationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TransformationParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransformationParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransformationParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 239u) {
    ZR_(mirror_, force_gray_);
    scale_ = 1;
    crop_size_ = 0u;
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    crop_h_ = 0u;
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(crop_w_, erase_ratio_);
    center_crop_ = false;
    scale_min_ = 0.02f;
    scale_max_ = 0.4f;
    aspect_min_ = 0.33f;
    aspect_max_ = 3;
  }

#undef ZR_HELPER_
#undef ZR_

  mean_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransformationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TransformationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 4;
      case 4: {
        if (tag == 34) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TransformationParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean_value;
        break;
      }

      // repeated float mean_value = 5;
      case 5: {
        if (tag == 45) {
         parse_mean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_mean_value())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean_value;
        if (input->ExpectTag(48)) goto parse_force_color;
        break;
      }

      // optional bool force_color = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_force_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_color_)));
          set_has_force_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_force_gray;
        break;
      }

      // optional bool force_gray = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_force_gray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_gray_)));
          set_has_force_gray();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_crop_h;
        break;
      }

      // optional uint32 crop_h = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_crop_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_h_)));
          set_has_crop_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_crop_w;
        break;
      }

      // optional uint32 crop_w = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_crop_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_w_)));
          set_has_crop_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_center_crop;
        break;
      }

      // optional bool center_crop = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_center_crop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &center_crop_)));
          set_has_center_crop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_erase_ratio;
        break;
      }

      // optional float erase_ratio = 11 [default = 0];
      case 11: {
        if (tag == 93) {
         parse_erase_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &erase_ratio_)));
          set_has_erase_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_scale_min;
        break;
      }

      // optional float scale_min = 12 [default = 0.02];
      case 12: {
        if (tag == 101) {
         parse_scale_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_min_)));
          set_has_scale_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_scale_max;
        break;
      }

      // optional float scale_max = 13 [default = 0.4];
      case 13: {
        if (tag == 109) {
         parse_scale_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_max_)));
          set_has_scale_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_aspect_min;
        break;
      }

      // optional float aspect_min = 14 [default = 0.33];
      case 14: {
        if (tag == 117) {
         parse_aspect_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspect_min_)));
          set_has_aspect_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_aspect_max;
        break;
      }

      // optional float aspect_max = 15 [default = 3];
      case 15: {
        if (tag == 125) {
         parse_aspect_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspect_max_)));
          set_has_aspect_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TransformationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TransformationParameter)
  return false;
#undef DO_
}

void TransformationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mirror(), output);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_size(), output);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mean_file(), output);
  }

  // repeated float mean_value = 5;
  for (int i = 0; i < this->mean_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->mean_value(i), output);
  }

  // optional bool force_color = 6 [default = false];
  if (has_force_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_color(), output);
  }

  // optional bool force_gray = 7 [default = false];
  if (has_force_gray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_gray(), output);
  }

  // optional uint32 crop_h = 8 [default = 0];
  if (has_crop_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->crop_h(), output);
  }

  // optional uint32 crop_w = 9 [default = 0];
  if (has_crop_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crop_w(), output);
  }

  // optional bool center_crop = 10 [default = false];
  if (has_center_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->center_crop(), output);
  }

  // optional float erase_ratio = 11 [default = 0];
  if (has_erase_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->erase_ratio(), output);
  }

  // optional float scale_min = 12 [default = 0.02];
  if (has_scale_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->scale_min(), output);
  }

  // optional float scale_max = 13 [default = 0.4];
  if (has_scale_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->scale_max(), output);
  }

  // optional float aspect_min = 14 [default = 0.33];
  if (has_aspect_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->aspect_min(), output);
  }

  // optional float aspect_max = 15 [default = 3];
  if (has_aspect_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->aspect_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TransformationParameter)
}

::google::protobuf::uint8* TransformationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_size(), target);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mean_file(), target);
  }

  // repeated float mean_value = 5;
  for (int i = 0; i < this->mean_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->mean_value(i), target);
  }

  // optional bool force_color = 6 [default = false];
  if (has_force_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_color(), target);
  }

  // optional bool force_gray = 7 [default = false];
  if (has_force_gray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_gray(), target);
  }

  // optional uint32 crop_h = 8 [default = 0];
  if (has_crop_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->crop_h(), target);
  }

  // optional uint32 crop_w = 9 [default = 0];
  if (has_crop_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crop_w(), target);
  }

  // optional bool center_crop = 10 [default = false];
  if (has_center_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->center_crop(), target);
  }

  // optional float erase_ratio = 11 [default = 0];
  if (has_erase_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->erase_ratio(), target);
  }

  // optional float scale_min = 12 [default = 0.02];
  if (has_scale_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->scale_min(), target);
  }

  // optional float scale_max = 13 [default = 0.4];
  if (has_scale_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->scale_max(), target);
  }

  // optional float aspect_min = 14 [default = 0.33];
  if (has_aspect_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->aspect_min(), target);
  }

  // optional float aspect_max = 15 [default = 3];
  if (has_aspect_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->aspect_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TransformationParameter)
  return target;
}

int TransformationParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TransformationParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 239u) {
    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional bool mirror = 2 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional string mean_file = 4;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional bool force_color = 6 [default = false];
    if (has_force_color()) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 7 [default = false];
    if (has_force_gray()) {
      total_size += 1 + 1;
    }

    // optional uint32 crop_h = 8 [default = 0];
    if (has_crop_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_h());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 crop_w = 9 [default = 0];
    if (has_crop_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_w());
    }

    // optional bool center_crop = 10 [default = false];
    if (has_center_crop()) {
      total_size += 1 + 1;
    }

    // optional float erase_ratio = 11 [default = 0];
    if (has_erase_ratio()) {
      total_size += 1 + 4;
    }

    // optional float scale_min = 12 [default = 0.02];
    if (has_scale_min()) {
      total_size += 1 + 4;
    }

    // optional float scale_max = 13 [default = 0.4];
    if (has_scale_max()) {
      total_size += 1 + 4;
    }

    // optional float aspect_min = 14 [default = 0.33];
    if (has_aspect_min()) {
      total_size += 1 + 4;
    }

    // optional float aspect_max = 15 [default = 3];
    if (has_aspect_max()) {
      total_size += 1 + 4;
    }

  }
  // repeated float mean_value = 5;
  {
    int data_size = 0;
    data_size = 4 * this->mean_value_size();
    total_size += 1 * this->mean_value_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TransformationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransformationParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TransformationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TransformationParameter)
    MergeFrom(*source);
  }
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TransformationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mean_value_.MergeFrom(from.mean_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_force_color()) {
      set_force_color(from.force_color());
    }
    if (from.has_force_gray()) {
      set_force_gray(from.force_gray());
    }
    if (from.has_crop_h()) {
      set_crop_h(from.crop_h());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_crop_w()) {
      set_crop_w(from.crop_w());
    }
    if (from.has_center_crop()) {
      set_center_crop(from.center_crop());
    }
    if (from.has_erase_ratio()) {
      set_erase_ratio(from.erase_ratio());
    }
    if (from.has_scale_min()) {
      set_scale_min(from.scale_min());
    }
    if (from.has_scale_max()) {
      set_scale_max(from.scale_max());
    }
    if (from.has_aspect_min()) {
      set_aspect_min(from.aspect_min());
    }
    if (from.has_aspect_max()) {
      set_aspect_max(from.aspect_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {

  return true;
}

void TransformationParameter::Swap(TransformationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationParameter::InternalSwap(TransformationParameter* other) {
  std::swap(scale_, other->scale_);
  std::swap(mirror_, other->mirror_);
  std::swap(crop_size_, other->crop_size_);
  mean_file_.Swap(&other->mean_file_);
  mean_value_.UnsafeArenaSwap(&other->mean_value_);
  std::swap(force_color_, other->force_color_);
  std::swap(force_gray_, other->force_gray_);
  std::swap(crop_h_, other->crop_h_);
  std::swap(crop_w_, other->crop_w_);
  std::swap(center_crop_, other->center_crop_);
  std::swap(erase_ratio_, other->erase_ratio_);
  std::swap(scale_min_, other->scale_min_);
  std::swap(scale_max_, other->scale_max_);
  std::swap(aspect_min_, other->aspect_min_);
  std::swap(aspect_max_, other->aspect_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformationParameter_descriptor_;
  metadata.reflection = TransformationParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformationParameter

// optional float scale = 1 [default = 1];
bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
 void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
 bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
 void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
 ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
 void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
 const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
 void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
 void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
 ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
 float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
 void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
 void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
 const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
 ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000020u;
}
void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
 bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
 void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000040u;
}
void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000040u;
}
void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
 bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
 void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

// optional uint32 crop_h = 8 [default = 0];
bool TransformationParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TransformationParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000080u;
}
void TransformationParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void TransformationParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
 ::google::protobuf::uint32 TransformationParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_h)
  return crop_h_;
}
 void TransformationParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_h)
}

// optional uint32 crop_w = 9 [default = 0];
bool TransformationParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TransformationParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000100u;
}
void TransformationParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void TransformationParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
 ::google::protobuf::uint32 TransformationParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_w)
  return crop_w_;
}
 void TransformationParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_w)
}

// optional bool center_crop = 10 [default = false];
bool TransformationParameter::has_center_crop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TransformationParameter::set_has_center_crop() {
  _has_bits_[0] |= 0x00000200u;
}
void TransformationParameter::clear_has_center_crop() {
  _has_bits_[0] &= ~0x00000200u;
}
void TransformationParameter::clear_center_crop() {
  center_crop_ = false;
  clear_has_center_crop();
}
 bool TransformationParameter::center_crop() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.center_crop)
  return center_crop_;
}
 void TransformationParameter::set_center_crop(bool value) {
  set_has_center_crop();
  center_crop_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.center_crop)
}

// optional float erase_ratio = 11 [default = 0];
bool TransformationParameter::has_erase_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TransformationParameter::set_has_erase_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
void TransformationParameter::clear_has_erase_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
void TransformationParameter::clear_erase_ratio() {
  erase_ratio_ = 0;
  clear_has_erase_ratio();
}
 float TransformationParameter::erase_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.erase_ratio)
  return erase_ratio_;
}
 void TransformationParameter::set_erase_ratio(float value) {
  set_has_erase_ratio();
  erase_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.erase_ratio)
}

// optional float scale_min = 12 [default = 0.02];
bool TransformationParameter::has_scale_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TransformationParameter::set_has_scale_min() {
  _has_bits_[0] |= 0x00000800u;
}
void TransformationParameter::clear_has_scale_min() {
  _has_bits_[0] &= ~0x00000800u;
}
void TransformationParameter::clear_scale_min() {
  scale_min_ = 0.02f;
  clear_has_scale_min();
}
 float TransformationParameter::scale_min() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale_min)
  return scale_min_;
}
 void TransformationParameter::set_scale_min(float value) {
  set_has_scale_min();
  scale_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale_min)
}

// optional float scale_max = 13 [default = 0.4];
bool TransformationParameter::has_scale_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TransformationParameter::set_has_scale_max() {
  _has_bits_[0] |= 0x00001000u;
}
void TransformationParameter::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00001000u;
}
void TransformationParameter::clear_scale_max() {
  scale_max_ = 0.4f;
  clear_has_scale_max();
}
 float TransformationParameter::scale_max() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale_max)
  return scale_max_;
}
 void TransformationParameter::set_scale_max(float value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale_max)
}

// optional float aspect_min = 14 [default = 0.33];
bool TransformationParameter::has_aspect_min() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TransformationParameter::set_has_aspect_min() {
  _has_bits_[0] |= 0x00002000u;
}
void TransformationParameter::clear_has_aspect_min() {
  _has_bits_[0] &= ~0x00002000u;
}
void TransformationParameter::clear_aspect_min() {
  aspect_min_ = 0.33f;
  clear_has_aspect_min();
}
 float TransformationParameter::aspect_min() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.aspect_min)
  return aspect_min_;
}
 void TransformationParameter::set_aspect_min(float value) {
  set_has_aspect_min();
  aspect_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.aspect_min)
}

// optional float aspect_max = 15 [default = 3];
bool TransformationParameter::has_aspect_max() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TransformationParameter::set_has_aspect_max() {
  _has_bits_[0] |= 0x00004000u;
}
void TransformationParameter::clear_has_aspect_max() {
  _has_bits_[0] &= ~0x00004000u;
}
void TransformationParameter::clear_aspect_max() {
  aspect_max_ = 3;
  clear_has_aspect_max();
}
 float TransformationParameter::aspect_max() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.aspect_max)
  return aspect_max_;
}
 void TransformationParameter::set_aspect_max(float value) {
  set_has_aspect_max();
  aspect_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.aspect_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossParameter_NormalizationMode_descriptor_;
}
bool LossParameter_NormalizationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LossParameter_NormalizationMode LossParameter::FULL;
const LossParameter_NormalizationMode LossParameter::VALID;
const LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
const LossParameter_NormalizationMode LossParameter::NONE;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
const int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParameter::kIgnoreLabelFieldNumber;
const int LossParameter::kNormalizationFieldNumber;
const int LossParameter::kNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParameter::LossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LossParameter)
}

void LossParameter::InitAsDefaultInstance() {
}

LossParameter::LossParameter(const LossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LossParameter)
}

void LossParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_label_ = 0;
  normalization_ = 1;
  normalize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.LossParameter)
  SharedDtor();
}

void LossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossParameter_descriptor_;
}

const LossParameter& LossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LossParameter* LossParameter::default_instance_ = NULL;

LossParameter* LossParameter::New(::google::protobuf::Arena* arena) const {
  LossParameter* n = new LossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LossParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ignore_label_ = 0;
    normalization_ = 1;
    normalize_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ignore_label = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 2;
      case 2: {
        if (tag == 16) {
         parse_normalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
          set_has_normalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normalization;
        break;
      }

      // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      case 3: {
        if (tag == 24) {
         parse_normalization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LossParameter_NormalizationMode_IsValid(value)) {
            set_normalization(static_cast< ::caffe::LossParameter_NormalizationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LossParameter)
  return false;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ignore_label(), output);
  }

  // optional bool normalize = 2;
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->normalize(), output);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (has_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->normalization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LossParameter)
}

::google::protobuf::uint8* LossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->normalize(), target);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (has_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->normalization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LossParameter)
  return target;
}

int LossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LossParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ignore_label = 1;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (has_normalization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->normalization());
    }

    // optional bool normalize = 2;
    if (has_normalize()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LossParameter)
    MergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
    if (from.has_normalization()) {
      set_normalization(from.normalization());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {

  return true;
}

void LossParameter::Swap(LossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParameter::InternalSwap(LossParameter* other) {
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(normalization_, other->normalization_);
  std::swap(normalize_, other->normalize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LossParameter_descriptor_;
  metadata.reflection = LossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParameter

// optional int32 ignore_label = 1;
bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
 ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
 void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
 ::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
 void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
 bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
 void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccuracyParameter::kTopKFieldNumber;
const int AccuracyParameter::kAxisFieldNumber;
const int AccuracyParameter::kIgnoreLabelFieldNumber;
const int AccuracyParameter::kMinIsBetterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccuracyParameter::AccuracyParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::InitAsDefaultInstance() {
}

AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
  _cached_size_ = 0;
  top_k_ = 1u;
  axis_ = 1;
  ignore_label_ = 0;
  min_is_better_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:caffe.AccuracyParameter)
  SharedDtor();
}

void AccuracyParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccuracyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccuracyParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccuracyParameter_descriptor_;
}

const AccuracyParameter& AccuracyParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

AccuracyParameter* AccuracyParameter::default_instance_ = NULL;

AccuracyParameter* AccuracyParameter::New(::google::protobuf::Arena* arena) const {
  AccuracyParameter* n = new AccuracyParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AccuracyParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AccuracyParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AccuracyParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(ignore_label_, min_is_better_);
    top_k_ = 1u;
    axis_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AccuracyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AccuracyParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_k = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
          set_has_top_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ignore_label;
        break;
      }

      // optional int32 ignore_label = 3;
      case 3: {
        if (tag == 24) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_is_better;
        break;
      }

      // optional bool min_is_better = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_min_is_better:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &min_is_better_)));
          set_has_min_is_better();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AccuracyParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AccuracyParameter)
  return false;
#undef DO_
}

void AccuracyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_k(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 ignore_label = 3;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ignore_label(), output);
  }

  // optional bool min_is_better = 4 [default = false];
  if (has_min_is_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->min_is_better(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AccuracyParameter)
}

::google::protobuf::uint8* AccuracyParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ignore_label(), target);
  }

  // optional bool min_is_better = 4 [default = false];
  if (has_min_is_better()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->min_is_better(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AccuracyParameter)
  return target;
}

int AccuracyParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AccuracyParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 top_k = 1 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 ignore_label = 3;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional bool min_is_better = 4 [default = false];
    if (has_min_is_better()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccuracyParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AccuracyParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccuracyParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccuracyParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AccuracyParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AccuracyParameter)
    MergeFrom(*source);
  }
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AccuracyParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
    if (from.has_min_is_better()) {
      set_min_is_better(from.min_is_better());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AccuracyParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {

  return true;
}

void AccuracyParameter::Swap(AccuracyParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  std::swap(top_k_, other->top_k_);
  std::swap(axis_, other->axis_);
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(min_is_better_, other->min_is_better_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccuracyParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccuracyParameter_descriptor_;
  metadata.reflection = AccuracyParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
 ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
 void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
 void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
 ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
 void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

// optional bool min_is_better = 4 [default = false];
bool AccuracyParameter::has_min_is_better() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AccuracyParameter::set_has_min_is_better() {
  _has_bits_[0] |= 0x00000008u;
}
void AccuracyParameter::clear_has_min_is_better() {
  _has_bits_[0] &= ~0x00000008u;
}
void AccuracyParameter::clear_min_is_better() {
  min_is_better_ = false;
  clear_has_min_is_better();
}
 bool AccuracyParameter::min_is_better() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.min_is_better)
  return min_is_better_;
}
 void AccuracyParameter::set_min_is_better(bool value) {
  set_has_min_is_better();
  min_is_better_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.min_is_better)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArgMaxParameter::kOutMaxValFieldNumber;
const int ArgMaxParameter::kTopKFieldNumber;
const int ArgMaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArgMaxParameter::ArgMaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::InitAsDefaultInstance() {
}

ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::SharedCtor() {
  _cached_size_ = 0;
  out_max_val_ = false;
  top_k_ = 1u;
  axis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArgMaxParameter::~ArgMaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.ArgMaxParameter)
  SharedDtor();
}

void ArgMaxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArgMaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgMaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArgMaxParameter_descriptor_;
}

const ArgMaxParameter& ArgMaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ArgMaxParameter* ArgMaxParameter::default_instance_ = NULL;

ArgMaxParameter* ArgMaxParameter::New(::google::protobuf::Arena* arena) const {
  ArgMaxParameter* n = new ArgMaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ArgMaxParameter)
  if (_has_bits_[0 / 32] & 7u) {
    out_max_val_ = false;
    top_k_ = 1u;
    axis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ArgMaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ArgMaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool out_max_val = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_max_val_)));
          set_has_out_max_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top_k;
        break;
      }

      // optional uint32 top_k = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_top_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
          set_has_top_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_axis;
        break;
      }

      // optional int32 axis = 3;
      case 3: {
        if (tag == 24) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ArgMaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ArgMaxParameter)
  return false;
#undef DO_
}

void ArgMaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ArgMaxParameter)
  // optional bool out_max_val = 1 [default = false];
  if (has_out_max_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->out_max_val(), output);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_k(), output);
  }

  // optional int32 axis = 3;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ArgMaxParameter)
}

::google::protobuf::uint8* ArgMaxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ArgMaxParameter)
  // optional bool out_max_val = 1 [default = false];
  if (has_out_max_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_k(), target);
  }

  // optional int32 axis = 3;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ArgMaxParameter)
  return target;
}

int ArgMaxParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ArgMaxParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool out_max_val = 1 [default = false];
    if (has_out_max_val()) {
      total_size += 1 + 1;
    }

    // optional uint32 top_k = 2 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 3;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgMaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ArgMaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArgMaxParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArgMaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ArgMaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ArgMaxParameter)
    MergeFrom(*source);
  }
}

void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ArgMaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_max_val()) {
      set_out_max_val(from.out_max_val());
    }
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ArgMaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {

  return true;
}

void ArgMaxParameter::Swap(ArgMaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
  std::swap(out_max_val_, other->out_max_val_);
  std::swap(top_k_, other->top_k_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArgMaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArgMaxParameter_descriptor_;
  metadata.reflection = ArgMaxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
 bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
 void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
 ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
 void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
 ::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
 void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatParameter::kAxisFieldNumber;
const int ConcatParameter::kConcatDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatParameter::ConcatParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConcatParameter)
}

void ConcatParameter::InitAsDefaultInstance() {
}

ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  concat_dim_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConcatParameter)
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcatParameter_descriptor_;
}

const ConcatParameter& ConcatParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ConcatParameter* ConcatParameter::default_instance_ = NULL;

ConcatParameter* ConcatParameter::New(::google::protobuf::Arena* arena) const {
  ConcatParameter* n = new ConcatParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConcatParameter)
  if (_has_bits_[0 / 32] & 3u) {
    axis_ = 1;
    concat_dim_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
          set_has_concat_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConcatParameter)
  return false;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConcatParameter)
}

::google::protobuf::uint8* ConcatParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatParameter)
  return target;
}

int ConcatParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConcatParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 concat_dim = 1 [default = 1];
    if (has_concat_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConcatParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConcatParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConcatParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConcatParameter)
    MergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConcatParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {

  return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatParameter::InternalSwap(ConcatParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(concat_dim_, other->concat_dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcatParameter_descriptor_;
  metadata.reflection = ConcatParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConcatParameter

// optional int32 axis = 2 [default = 1];
bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
 void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000002u;
}
void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
 ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
 void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BatchNormParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormParameter_Engine_descriptor_;
}
bool BatchNormParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BatchNormParameter_Engine BatchNormParameter::DEFAULT;
const BatchNormParameter_Engine BatchNormParameter::CAFFE;
const BatchNormParameter_Engine BatchNormParameter::CUDNN;
const BatchNormParameter_Engine BatchNormParameter::Engine_MIN;
const BatchNormParameter_Engine BatchNormParameter::Engine_MAX;
const int BatchNormParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormParameter::kUseGlobalStatsFieldNumber;
const int BatchNormParameter::kMovingAverageFractionFieldNumber;
const int BatchNormParameter::kEpsFieldNumber;
const int BatchNormParameter::kDisableMeanFieldNumber;
const int BatchNormParameter::kDisableVarianceFieldNumber;
const int BatchNormParameter::kScaleFillerFieldNumber;
const int BatchNormParameter::kBiasFillerFieldNumber;
const int BatchNormParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormParameter::BatchNormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::InitAsDefaultInstance() {
  scale_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
  _cached_size_ = 0;
  use_global_stats_ = false;
  moving_average_fraction_ = 0.99f;
  eps_ = 1e-05f;
  disable_mean_ = false;
  disable_variance_ = false;
  scale_filler_ = NULL;
  bias_filler_ = NULL;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchNormParameter)
  SharedDtor();
}

void BatchNormParameter::SharedDtor() {
  if (this != default_instance_) {
    delete scale_filler_;
    delete bias_filler_;
  }
}

void BatchNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormParameter_descriptor_;
}

const BatchNormParameter& BatchNormParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BatchNormParameter* BatchNormParameter::default_instance_ = NULL;

BatchNormParameter* BatchNormParameter::New(::google::protobuf::Arena* arena) const {
  BatchNormParameter* n = new BatchNormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchNormParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BatchNormParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BatchNormParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(use_global_stats_, engine_);
    moving_average_fraction_ = 0.99f;
    eps_ = 1e-05f;
    if (has_scale_filler()) {
      if (scale_filler_ != NULL) scale_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_global_stats = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_global_stats_)));
          set_has_use_global_stats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_moving_average_fraction;
        break;
      }

      // optional float moving_average_fraction = 2 [default = 0.99];
      case 2: {
        if (tag == 21) {
         parse_moving_average_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_fraction_)));
          set_has_moving_average_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eps;
        break;
      }

      // optional float eps = 3 [default = 1e-05];
      case 3: {
        if (tag == 29) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disable_mean;
        break;
      }

      // optional bool disable_mean = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_disable_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_mean_)));
          set_has_disable_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_disable_variance;
        break;
      }

      // optional bool disable_variance = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_disable_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_variance_)));
          set_has_disable_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scale_filler;
        break;
      }

      // optional .caffe.FillerParameter scale_filler = 7;
      case 7: {
        if (tag == 58) {
         parse_scale_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (tag == 66) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_engine;
        break;
      }

      // optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (tag == 120) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BatchNormParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::BatchNormParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchNormParameter)
  return false;
#undef DO_
}

void BatchNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchNormParameter)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_global_stats(), output);
  }

  // optional float moving_average_fraction = 2 [default = 0.99];
  if (has_moving_average_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
  }

  // optional float eps = 3 [default = 1e-05];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  // optional bool disable_mean = 4 [default = false];
  if (has_disable_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_mean(), output);
  }

  // optional bool disable_variance = 5 [default = false];
  if (has_disable_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->disable_variance(), output);
  }

  // optional .caffe.FillerParameter scale_filler = 7;
  if (has_scale_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scale_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchNormParameter)
}

::google::protobuf::uint8* BatchNormParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormParameter)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.99];
  if (has_moving_average_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  // optional bool disable_mean = 4 [default = false];
  if (has_disable_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_mean(), target);
  }

  // optional bool disable_variance = 5 [default = false];
  if (has_disable_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->disable_variance(), target);
  }

  // optional .caffe.FillerParameter scale_filler = 7;
  if (has_scale_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->scale_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->bias_filler_, target);
  }

  // optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormParameter)
  return target;
}

int BatchNormParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchNormParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool use_global_stats = 1;
    if (has_use_global_stats()) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.99];
    if (has_moving_average_fraction()) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional bool disable_mean = 4 [default = false];
    if (has_disable_mean()) {
      total_size += 1 + 1;
    }

    // optional bool disable_variance = 5 [default = false];
    if (has_disable_variance()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter scale_filler = 7;
    if (has_scale_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchNormParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchNormParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchNormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchNormParameter)
    MergeFrom(*source);
  }
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchNormParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_global_stats()) {
      set_use_global_stats(from.use_global_stats());
    }
    if (from.has_moving_average_fraction()) {
      set_moving_average_fraction(from.moving_average_fraction());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_disable_mean()) {
      set_disable_mean(from.disable_mean());
    }
    if (from.has_disable_variance()) {
      set_disable_variance(from.disable_variance());
    }
    if (from.has_scale_filler()) {
      mutable_scale_filler()->::caffe::FillerParameter::MergeFrom(from.scale_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BatchNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {

  return true;
}

void BatchNormParameter::Swap(BatchNormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  std::swap(use_global_stats_, other->use_global_stats_);
  std::swap(moving_average_fraction_, other->moving_average_fraction_);
  std::swap(eps_, other->eps_);
  std::swap(disable_mean_, other->disable_mean_);
  std::swap(disable_variance_, other->disable_variance_);
  std::swap(scale_filler_, other->scale_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchNormParameter_descriptor_;
  metadata.reflection = BatchNormParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNormParameter

// optional bool use_global_stats = 1;
bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
 bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
 void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.99];
bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.99f;
  clear_has_moving_average_fraction();
}
 float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
 void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
 float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
 void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

// optional bool disable_mean = 4 [default = false];
bool BatchNormParameter::has_disable_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BatchNormParameter::set_has_disable_mean() {
  _has_bits_[0] |= 0x00000008u;
}
void BatchNormParameter::clear_has_disable_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
void BatchNormParameter::clear_disable_mean() {
  disable_mean_ = false;
  clear_has_disable_mean();
}
 bool BatchNormParameter::disable_mean() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.disable_mean)
  return disable_mean_;
}
 void BatchNormParameter::set_disable_mean(bool value) {
  set_has_disable_mean();
  disable_mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.disable_mean)
}

// optional bool disable_variance = 5 [default = false];
bool BatchNormParameter::has_disable_variance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BatchNormParameter::set_has_disable_variance() {
  _has_bits_[0] |= 0x00000010u;
}
void BatchNormParameter::clear_has_disable_variance() {
  _has_bits_[0] &= ~0x00000010u;
}
void BatchNormParameter::clear_disable_variance() {
  disable_variance_ = false;
  clear_has_disable_variance();
}
 bool BatchNormParameter::disable_variance() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.disable_variance)
  return disable_variance_;
}
 void BatchNormParameter::set_disable_variance(bool value) {
  set_has_disable_variance();
  disable_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.disable_variance)
}

// optional .caffe.FillerParameter scale_filler = 7;
bool BatchNormParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BatchNormParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000020u;
}
void BatchNormParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
void BatchNormParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->::caffe::FillerParameter::Clear();
  clear_has_scale_filler();
}
const ::caffe::FillerParameter& BatchNormParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.scale_filler)
  return scale_filler_ != NULL ? *scale_filler_ : *default_instance_->scale_filler_;
}
::caffe::FillerParameter* BatchNormParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) {
    scale_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BatchNormParameter.scale_filler)
  return scale_filler_;
}
::caffe::FillerParameter* BatchNormParameter::release_scale_filler() {
  // @@protoc_insertion_point(field_release:caffe.BatchNormParameter.scale_filler)
  clear_has_scale_filler();
  ::caffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
void BatchNormParameter::set_allocated_scale_filler(::caffe::FillerParameter* scale_filler) {
  delete scale_filler_;
  scale_filler_ = scale_filler;
  if (scale_filler) {
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchNormParameter.scale_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool BatchNormParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BatchNormParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
}
void BatchNormParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
void BatchNormParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& BatchNormParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* BatchNormParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BatchNormParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* BatchNormParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.BatchNormParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void BatchNormParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchNormParameter.bias_filler)
}

// optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
bool BatchNormParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BatchNormParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000080u;
}
void BatchNormParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000080u;
}
void BatchNormParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::BatchNormParameter_Engine BatchNormParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.engine)
  return static_cast< ::caffe::BatchNormParameter_Engine >(engine_);
}
 void BatchNormParameter::set_engine(::caffe::BatchNormParameter_Engine value) {
  assert(::caffe::BatchNormParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiasParameter::kAxisFieldNumber;
const int BiasParameter::kNumAxesFieldNumber;
const int BiasParameter::kFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiasParameter::BiasParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BiasParameter)
}

void BiasParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

BiasParameter::BiasParameter(const BiasParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BiasParameter)
}

void BiasParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  num_axes_ = 1;
  filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiasParameter::~BiasParameter() {
  // @@protoc_insertion_point(destructor:caffe.BiasParameter)
  SharedDtor();
}

void BiasParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filler_;
  }
}

void BiasParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiasParameter_descriptor_;
}

const BiasParameter& BiasParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BiasParameter* BiasParameter::default_instance_ = NULL;

BiasParameter* BiasParameter::New(::google::protobuf::Arena* arena) const {
  BiasParameter* n = new BiasParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BiasParameter)
  if (_has_bits_[0 / 32] & 7u) {
    axis_ = 1;
    num_axes_ = 1;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BiasParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BiasParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_num_axes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
          set_has_num_axes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filler;
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (tag == 26) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BiasParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BiasParameter)
  return false;
#undef DO_
}

void BiasParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BiasParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BiasParameter)
}

::google::protobuf::uint8* BiasParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BiasParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->filler_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BiasParameter)
  return target;
}

int BiasParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BiasParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiasParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BiasParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BiasParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BiasParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BiasParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BiasParameter)
    MergeFrom(*source);
  }
}

void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BiasParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BiasParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasParameter::IsInitialized() const {

  return true;
}

void BiasParameter::Swap(BiasParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiasParameter::InternalSwap(BiasParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(filler_, other->filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiasParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiasParameter_descriptor_;
  metadata.reflection = BiasParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiasParameter

// optional int32 axis = 1 [default = 1];
bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
 void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
 ::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
 void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContrastiveLossParameter::kMarginFieldNumber;
const int ContrastiveLossParameter::kLegacyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContrastiveLossParameter::ContrastiveLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::InitAsDefaultInstance() {
}

ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::SharedCtor() {
  _cached_size_ = 0;
  margin_ = 1;
  legacy_version_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ContrastiveLossParameter)
  SharedDtor();
}

void ContrastiveLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContrastiveLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContrastiveLossParameter_descriptor_;
}

const ContrastiveLossParameter& ContrastiveLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ContrastiveLossParameter* ContrastiveLossParameter::default_instance_ = NULL;

ContrastiveLossParameter* ContrastiveLossParameter::New(::google::protobuf::Arena* arena) const {
  ContrastiveLossParameter* n = new ContrastiveLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ContrastiveLossParameter)
  if (_has_bits_[0 / 32] & 3u) {
    margin_ = 1;
    legacy_version_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContrastiveLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ContrastiveLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_legacy_version;
        break;
      }

      // optional bool legacy_version = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_legacy_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_version_)));
          set_has_legacy_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ContrastiveLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ContrastiveLossParameter)
  return false;
#undef DO_
}

void ContrastiveLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ContrastiveLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool legacy_version = 2 [default = false];
  if (has_legacy_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->legacy_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ContrastiveLossParameter)
}

::google::protobuf::uint8* ContrastiveLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ContrastiveLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (has_legacy_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->legacy_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ContrastiveLossParameter)
  return target;
}

int ContrastiveLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ContrastiveLossParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float margin = 1 [default = 1];
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional bool legacy_version = 2 [default = false];
    if (has_legacy_version()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContrastiveLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ContrastiveLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContrastiveLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContrastiveLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ContrastiveLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ContrastiveLossParameter)
    MergeFrom(*source);
  }
}

void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ContrastiveLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_legacy_version()) {
      set_legacy_version(from.legacy_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContrastiveLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {

  return true;
}

void ContrastiveLossParameter::Swap(ContrastiveLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
  std::swap(margin_, other->margin_);
  std::swap(legacy_version_, other->legacy_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContrastiveLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContrastiveLossParameter_descriptor_;
  metadata.reflection = ContrastiveLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
 float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
 void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
 bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
 void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_Engine_descriptor_;
}
bool ConvolutionParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
const ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
const int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor_;
}
bool ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::GET;
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::FINDEX;
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::CuDNNConvolutionAlgorithmSeeker_MIN;
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::CuDNNConvolutionAlgorithmSeeker_MAX;
const int ConvolutionParameter::CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kDilationFieldNumber;
const int ConvolutionParameter::kPadHFieldNumber;
const int ConvolutionParameter::kPadWFieldNumber;
const int ConvolutionParameter::kKernelHFieldNumber;
const int ConvolutionParameter::kKernelWFieldNumber;
const int ConvolutionParameter::kStrideHFieldNumber;
const int ConvolutionParameter::kStrideWFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kBiasFillerFieldNumber;
const int ConvolutionParameter::kEngineFieldNumber;
const int ConvolutionParameter::kAxisFieldNumber;
const int ConvolutionParameter::kForceNdIm2ColFieldNumber;
const int ConvolutionParameter::kCudnnConvolutionAlgoSeekerFieldNumber;
const int ConvolutionParameter::kShapeOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  pad_h_ = 0u;
  pad_w_ = 0u;
  kernel_h_ = 0u;
  kernel_w_ = 0u;
  stride_h_ = 0u;
  stride_w_ = 0u;
  group_ = 1u;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  engine_ = 0;
  axis_ = 1;
  force_nd_im2col_ = false;
  cudnn_convolution_algo_seeker_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_descriptor_;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ConvolutionParameter* ConvolutionParameter::default_instance_ = NULL;

ConvolutionParameter* ConvolutionParameter::New(::google::protobuf::Arena* arena) const {
  ConvolutionParameter* n = new ConvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConvolutionParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConvolutionParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConvolutionParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 195u) {
    ZR_(num_output_, pad_h_);
    bias_term_ = true;
    pad_w_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(kernel_h_, kernel_w_);
    ZR_(stride_h_, stride_w_);
    group_ = 1u;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    engine_ = 0;
  }
  if (_has_bits_[16 / 32] & 458752u) {
    axis_ = 1;
    force_nd_im2col_ = false;
    cudnn_convolution_algo_seeker_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  shape_offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        break;
      }

      // repeated uint32 pad = 3;
      case 3: {
        if (tag == 24) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_pad())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (tag == 32) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_kernel_size())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        break;
      }

      // repeated uint32 stride = 6;
      case 6: {
        if (tag == 48) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_stride())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        if (input->ExpectTag(58)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (tag == 58) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (tag == 66) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_kernel_h;
        break;
      }

      // optional uint32 kernel_h = 11;
      case 11: {
        if (tag == 88) {
         parse_kernel_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
          set_has_kernel_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_kernel_w;
        break;
      }

      // optional uint32 kernel_w = 12;
      case 12: {
        if (tag == 96) {
         parse_kernel_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
          set_has_kernel_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 13;
      case 13: {
        if (tag == 104) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 14;
      case 14: {
        if (tag == 112) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_engine;
        break;
      }

      // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (tag == 120) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ConvolutionParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ConvolutionParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_axis;
        break;
      }

      // optional int32 axis = 16 [default = 1];
      case 16: {
        if (tag == 128) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_force_nd_im2col;
        break;
      }

      // optional bool force_nd_im2col = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_force_nd_im2col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_nd_im2col_)));
          set_has_force_nd_im2col();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dilation;
        break;
      }

      // repeated uint32 dilation = 18;
      case 18: {
        if (tag == 144) {
         parse_dilation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_dilation())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dilation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dilation;
        if (input->ExpectTag(152)) goto parse_cudnn_convolution_algo_seeker;
        break;
      }

      // optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
      case 19: {
        if (tag == 152) {
         parse_cudnn_convolution_algo_seeker:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value)) {
            set_cudnn_convolution_algo_seeker(static_cast< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_shape_offset;
        break;
      }

      // repeated uint32 shape_offset = 20;
      case 20: {
        if (tag == 160) {
         parse_shape_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_shape_offset())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shape_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_shape_offset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // repeated uint32 pad = 3;
  for (int i = 0; i < this->pad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // repeated uint32 stride = 6;
  for (int i = 0; i < this->stride_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  // optional int32 axis = 16 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->axis(), output);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (has_force_nd_im2col()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->force_nd_im2col(), output);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0; i < this->dilation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->dilation(i), output);
  }

  // optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
  if (has_cudnn_convolution_algo_seeker()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->cudnn_convolution_algo_seeker(), output);
  }

  // repeated uint32 shape_offset = 20;
  for (int i = 0; i < this->shape_offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->shape_offset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // repeated uint32 pad = 3;
  for (int i = 0; i < this->pad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->pad(i), target);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->kernel_size(i), target);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // repeated uint32 stride = 6;
  for (int i = 0; i < this->stride_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->stride(i), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->weight_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->bias_filler_, target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (has_force_nd_im2col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0; i < this->dilation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->dilation(i), target);
  }

  // optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
  if (has_cudnn_convolution_algo_seeker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->cudnn_convolution_algo_seeker(), target);
  }

  // repeated uint32 shape_offset = 20;
  for (int i = 0; i < this->shape_offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->shape_offset(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionParameter)
  return target;
}

int ConvolutionParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConvolutionParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 195u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 kernel_h = 11;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 14;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 axis = 16 [default = 1];
    if (has_axis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (has_force_nd_im2col()) {
      total_size += 2 + 1;
    }

    // optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
    if (has_cudnn_convolution_algo_seeker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cudnn_convolution_algo_seeker());
    }

  }
  // repeated uint32 pad = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pad(i));
    }
    total_size += 1 * this->pad_size() + data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->kernel_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kernel_size(i));
    }
    total_size += 1 * this->kernel_size_size() + data_size;
  }

  // repeated uint32 stride = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->stride_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stride(i));
    }
    total_size += 1 * this->stride_size() + data_size;
  }

  // repeated uint32 dilation = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->dilation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dilation(i));
    }
    total_size += 2 * this->dilation_size() + data_size;
  }

  // repeated uint32 shape_offset = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shape_offset(i));
    }
    total_size += 2 * this->shape_offset_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConvolutionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConvolutionParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConvolutionParameter)
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConvolutionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pad_.MergeFrom(from.pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  shape_offset_.MergeFrom(from.shape_offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_force_nd_im2col()) {
      set_force_nd_im2col(from.force_nd_im2col());
    }
    if (from.has_cudnn_convolution_algo_seeker()) {
      set_cudnn_convolution_algo_seeker(from.cudnn_convolution_algo_seeker());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {

  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  pad_.UnsafeArenaSwap(&other->pad_);
  kernel_size_.UnsafeArenaSwap(&other->kernel_size_);
  stride_.UnsafeArenaSwap(&other->stride_);
  dilation_.UnsafeArenaSwap(&other->dilation_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(group_, other->group_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(engine_, other->engine_);
  std::swap(axis_, other->axis_);
  std::swap(force_nd_im2col_, other->force_nd_im2col_);
  std::swap(cudnn_convolution_algo_seeker_, other->cudnn_convolution_algo_seeker_);
  shape_offset_.UnsafeArenaSwap(&other->shape_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionParameter_descriptor_;
  metadata.reflection = ConvolutionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionParameter

// optional uint32 num_output = 1;
bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
 void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
 bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
 void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
 ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
 void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
 void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
 ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
 void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
 void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
 ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
 void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
 void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
 ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
 void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
 void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
 ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
 void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
 ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
 void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000100u;
}
void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
 ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
 void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000200u;
}
void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
 ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
 void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
 ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
 void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
 ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
 void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
 ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
 void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00002000u;
}
void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00002000u;
}
void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00004000u;
}
void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00004000u;
}
void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00008000u;
}
void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00008000u;
}
void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
 void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00010000u;
}
void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00010000u;
}
void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
 void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00020000u;
}
void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00020000u;
}
void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
 bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
 void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

// optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
bool ConvolutionParameter::has_cudnn_convolution_algo_seeker() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ConvolutionParameter::set_has_cudnn_convolution_algo_seeker() {
  _has_bits_[0] |= 0x00040000u;
}
void ConvolutionParameter::clear_has_cudnn_convolution_algo_seeker() {
  _has_bits_[0] &= ~0x00040000u;
}
void ConvolutionParameter::clear_cudnn_convolution_algo_seeker() {
  cudnn_convolution_algo_seeker_ = 1;
  clear_has_cudnn_convolution_algo_seeker();
}
 ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::cudnn_convolution_algo_seeker() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
  return static_cast< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker >(cudnn_convolution_algo_seeker_);
}
 void ConvolutionParameter::set_cudnn_convolution_algo_seeker(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value) {
  assert(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value));
  set_has_cudnn_convolution_algo_seeker();
  cudnn_convolution_algo_seeker_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
}

// repeated uint32 shape_offset = 20;
int ConvolutionParameter::shape_offset_size() const {
  return shape_offset_.size();
}
void ConvolutionParameter::clear_shape_offset() {
  shape_offset_.Clear();
}
 ::google::protobuf::uint32 ConvolutionParameter::shape_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.shape_offset)
  return shape_offset_.Get(index);
}
 void ConvolutionParameter::set_shape_offset(int index, ::google::protobuf::uint32 value) {
  shape_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.shape_offset)
}
 void ConvolutionParameter::add_shape_offset(::google::protobuf::uint32 value) {
  shape_offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.shape_offset)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::shape_offset() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.shape_offset)
  return shape_offset_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_shape_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.shape_offset)
  return &shape_offset_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CropParameter::kAxisFieldNumber;
const int CropParameter::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CropParameter::CropParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CropParameter)
}

void CropParameter::InitAsDefaultInstance() {
}

CropParameter::CropParameter(const CropParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.CropParameter)
}

void CropParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropParameter::~CropParameter() {
  // @@protoc_insertion_point(destructor:caffe.CropParameter)
  SharedDtor();
}

void CropParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropParameter_descriptor_;
}

const CropParameter& CropParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

CropParameter* CropParameter::default_instance_ = NULL;

CropParameter* CropParameter::New(::google::protobuf::Arena* arena) const {
  CropParameter* n = new CropParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CropParameter)
  axis_ = 2;
  offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // repeated uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_offset())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CropParameter)
  return false;
#undef DO_
}

void CropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->offset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CropParameter)
}

::google::protobuf::uint8* CropParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->offset(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CropParameter)
  return target;
}

int CropParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CropParameter)
  int total_size = 0;

  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->axis());
  }

  // repeated uint32 offset = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offset(i));
    }
    total_size += 1 * this->offset_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CropParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CropParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CropParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CropParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CropParameter)
    MergeFrom(*source);
  }
}

void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CropParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  offset_.MergeFrom(from.offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropParameter::IsInitialized() const {

  return true;
}

void CropParameter::Swap(CropParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CropParameter::InternalSwap(CropParameter* other) {
  std::swap(axis_, other->axis_);
  offset_.UnsafeArenaSwap(&other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CropParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropParameter_descriptor_;
  metadata.reflection = CropParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CropParameter

// optional int32 axis = 1 [default = 2];
bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
 ::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.axis)
  return axis_;
}
 void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
int CropParameter::offset_size() const {
  return offset_.size();
}
void CropParameter::clear_offset() {
  offset_.Clear();
}
 ::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.offset)
  return offset_.Get(index);
}
 void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.CropParameter.offset)
}
 void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.CropParameter.offset)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:caffe.CropParameter.offset)
  return offset_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CropParameter.offset)
  return &offset_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_DB_descriptor_;
}
bool DataParameter_DB_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataParameter_DB DataParameter::LEVELDB;
const DataParameter_DB DataParameter::LMDB;
const DataParameter_DB DataParameter::DB_MIN;
const DataParameter_DB DataParameter::DB_MAX;
const int DataParameter::DB_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kRandSkipFieldNumber;
const int DataParameter::kBackendFieldNumber;
const int DataParameter::kScaleFieldNumber;
const int DataParameter::kMeanFileFieldNumber;
const int DataParameter::kCropSizeFieldNumber;
const int DataParameter::kMirrorFieldNumber;
const int DataParameter::kForceEncodedColorFieldNumber;
const int DataParameter::kPrefetchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataParameter::DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DataParameter)
}

void DataParameter::InitAsDefaultInstance() {
}

DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DataParameter)
}

void DataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  rand_skip_ = 0u;
  backend_ = 0;
  scale_ = 1;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_size_ = 0u;
  mirror_ = false;
  force_encoded_color_ = false;
  prefetch_ = 4u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_descriptor_;
}

const DataParameter& DataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DataParameter* DataParameter::default_instance_ = NULL;

DataParameter* DataParameter::New(::google::protobuf::Arena* arena) const {
  DataParameter* n = new DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(batch_size_, backend_);
    ZR_(crop_size_, mirror_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scale_ = 1;
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    force_encoded_color_ = false;
    prefetch_ = 4u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_rand_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
          set_has_rand_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_backend;
        break;
      }

      // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
      case 8: {
        if (tag == 64) {
         parse_backend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DataParameter_DB_IsValid(value)) {
            set_backend(static_cast< ::caffe::DataParameter_DB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_force_encoded_color;
        break;
      }

      // optional bool force_encoded_color = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_force_encoded_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_encoded_color_)));
          set_has_force_encoded_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_prefetch;
        break;
      }

      // optional uint32 prefetch = 10 [default = 4];
      case 10: {
        if (tag == 80) {
         parse_prefetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_)));
          set_has_prefetch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (has_backend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->backend(), output);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (has_force_encoded_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->force_encoded_color(), output);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (has_prefetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prefetch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DataParameter)
}

::google::protobuf::uint8* DataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (has_backend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->backend(), target);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (has_force_encoded_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->force_encoded_color(), target);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (has_prefetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prefetch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DataParameter)
  return target;
}

int DataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DataParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
    if (has_backend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backend());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool force_encoded_color = 9 [default = false];
    if (has_force_encoded_color()) {
      total_size += 1 + 1;
    }

    // optional uint32 prefetch = 10 [default = 4];
    if (has_prefetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DataParameter)
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_backend()) {
      set_backend(from.backend());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_force_encoded_color()) {
      set_force_encoded_color(from.force_encoded_color());
    }
    if (from.has_prefetch()) {
      set_prefetch(from.prefetch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {

  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataParameter::InternalSwap(DataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(backend_, other->backend_);
  std::swap(scale_, other->scale_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  std::swap(force_encoded_color_, other->force_encoded_color_);
  std::swap(prefetch_, other->prefetch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataParameter_descriptor_;
  metadata.reflection = DataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataParameter

// optional string source = 1;
bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
 void DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
 void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
 ::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
 ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
 void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
 ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
 void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000008u;
}
void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
 ::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
 void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
 void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
 const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
 void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
 void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
 ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
 ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
 void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
 bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
 void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000100u;
}
void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000100u;
}
void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
 bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
 void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
 ::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
 void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParameter::kDropoutRatioFieldNumber;
const int DropoutParameter::kSqrtScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DropoutParameter)
}

void DropoutParameter::InitAsDefaultInstance() {
}

DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
  sqrt_scale_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:caffe.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropoutParameter_descriptor_;
}

const DropoutParameter& DropoutParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DropoutParameter* DropoutParameter::default_instance_ = NULL;

DropoutParameter* DropoutParameter::New(::google::protobuf::Arena* arena) const {
  DropoutParameter* n = new DropoutParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DropoutParameter)
  if (_has_bits_[0 / 32] & 3u) {
    dropout_ratio_ = 0.5f;
    sqrt_scale_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DropoutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
          set_has_dropout_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sqrt_scale;
        break;
      }

      // optional bool sqrt_scale = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_sqrt_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sqrt_scale_)));
          set_has_sqrt_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DropoutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DropoutParameter)
  return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }

  // optional bool sqrt_scale = 2 [default = false];
  if (has_sqrt_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sqrt_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }

  // optional bool sqrt_scale = 2 [default = false];
  if (has_sqrt_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sqrt_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DropoutParameter)
  return target;
}

int DropoutParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DropoutParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float dropout_ratio = 1 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

    // optional bool sqrt_scale = 2 [default = false];
    if (has_sqrt_scale()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DropoutParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DropoutParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DropoutParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DropoutParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DropoutParameter)
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DropoutParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
    if (from.has_sqrt_scale()) {
      set_sqrt_scale(from.sqrt_scale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {

  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropoutParameter::InternalSwap(DropoutParameter* other) {
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(sqrt_scale_, other->sqrt_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropoutParameter_descriptor_;
  metadata.reflection = DropoutParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
 float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
 void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

// optional bool sqrt_scale = 2 [default = false];
bool DropoutParameter::has_sqrt_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DropoutParameter::set_has_sqrt_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void DropoutParameter::clear_has_sqrt_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void DropoutParameter::clear_sqrt_scale() {
  sqrt_scale_ = false;
  clear_has_sqrt_scale();
}
 bool DropoutParameter::sqrt_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.sqrt_scale)
  return sqrt_scale_;
}
 void DropoutParameter::set_sqrt_scale(bool value) {
  set_has_sqrt_scale();
  sqrt_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.sqrt_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DummyDataParameter::kDataFillerFieldNumber;
const int DummyDataParameter::kShapeFieldNumber;
const int DummyDataParameter::kNumFieldNumber;
const int DummyDataParameter::kChannelsFieldNumber;
const int DummyDataParameter::kHeightFieldNumber;
const int DummyDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DummyDataParameter::DummyDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::InitAsDefaultInstance() {
}

DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyDataParameter::~DummyDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DummyDataParameter)
  SharedDtor();
}

void DummyDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DummyDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyDataParameter_descriptor_;
}

const DummyDataParameter& DummyDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DummyDataParameter* DummyDataParameter::default_instance_ = NULL;

DummyDataParameter* DummyDataParameter::New(::google::protobuf::Arena* arena) const {
  DummyDataParameter* n = new DummyDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DummyDataParameter)
  data_filler_.Clear();
  shape_.Clear();
  num_.Clear();
  channels_.Clear();
  height_.Clear();
  width_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DummyDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DummyDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.FillerParameter data_filler = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data_filler;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // repeated uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_num())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // repeated uint32 channels = 3;
      case 3: {
        if (tag == 24) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_channels())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // repeated uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_height())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // repeated uint32 width = 5;
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_width())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_width;
        if (input->ExpectTag(50)) goto parse_shape;
        break;
      }

      // repeated .caffe.BlobShape shape = 6;
      case 6: {
        if (tag == 50) {
         parse_shape:
          DO_(input->IncrementRecursionDepth());
         parse_loop_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_shape;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DummyDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DummyDataParameter)
  return false;
#undef DO_
}

void DummyDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DummyDataParameter)
  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0, n = this->data_filler_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_filler(i), output);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->num(i), output);
  }

  // repeated uint32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channels(i), output);
  }

  // repeated uint32 height = 4;
  for (int i = 0; i < this->height_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->height(i), output);
  }

  // repeated uint32 width = 5;
  for (int i = 0; i < this->width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->width(i), output);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shape(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DummyDataParameter)
}

::google::protobuf::uint8* DummyDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DummyDataParameter)
  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0, n = this->data_filler_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_filler(i), target);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->num(i), target);
  }

  // repeated uint32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->channels(i), target);
  }

  // repeated uint32 height = 4;
  for (int i = 0; i < this->height_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->height(i), target);
  }

  // repeated uint32 width = 5;
  for (int i = 0; i < this->width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->width(i), target);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->shape(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DummyDataParameter)
  return target;
}

int DummyDataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DummyDataParameter)
  int total_size = 0;

  // repeated .caffe.FillerParameter data_filler = 1;
  total_size += 1 * this->data_filler_size();
  for (int i = 0; i < this->data_filler_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_filler(i));
  }

  // repeated .caffe.BlobShape shape = 6;
  total_size += 1 * this->shape_size();
  for (int i = 0; i < this->shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape(i));
  }

  // repeated uint32 num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated uint32 channels = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->channels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channels(i));
    }
    total_size += 1 * this->channels_size() + data_size;
  }

  // repeated uint32 height = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->height_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->height(i));
    }
    total_size += 1 * this->height_size() + data_size;
  }

  // repeated uint32 width = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->width_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->width(i));
    }
    total_size += 1 * this->width_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DummyDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DummyDataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DummyDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DummyDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DummyDataParameter)
    MergeFrom(*source);
  }
}

void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DummyDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_filler_.MergeFrom(from.data_filler_);
  shape_.MergeFrom(from.shape_);
  num_.MergeFrom(from.num_);
  channels_.MergeFrom(from.channels_);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DummyDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {

  return true;
}

void DummyDataParameter::Swap(DummyDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
  data_filler_.UnsafeArenaSwap(&other->data_filler_);
  shape_.UnsafeArenaSwap(&other->shape_);
  num_.UnsafeArenaSwap(&other->num_);
  channels_.UnsafeArenaSwap(&other->channels_);
  height_.UnsafeArenaSwap(&other->height_);
  width_.UnsafeArenaSwap(&other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DummyDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyDataParameter_descriptor_;
  metadata.reflection = DummyDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
int DummyDataParameter::shape_size() const {
  return shape_.size();
}
void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
int DummyDataParameter::num_size() const {
  return num_.size();
}
void DummyDataParameter::clear_num() {
  num_.Clear();
}
 ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
 void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
 void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
int DummyDataParameter::channels_size() const {
  return channels_.size();
}
void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
 ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
 void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
 void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
int DummyDataParameter::height_size() const {
  return height_.size();
}
void DummyDataParameter::clear_height() {
  height_.Clear();
}
 ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
 void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
 void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
int DummyDataParameter::width_size() const {
  return width_.size();
}
void DummyDataParameter::clear_width() {
  width_.Clear();
}
 ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
 void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
 void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseParameter_EltwiseOp_descriptor_;
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
const EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
const EltwiseParameter_EltwiseOp EltwiseParameter::SORT;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
const int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EltwiseParameter::kOperationFieldNumber;
const int EltwiseParameter::kCoeffFieldNumber;
const int EltwiseParameter::kStableProdGradFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EltwiseParameter::EltwiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::InitAsDefaultInstance() {
}

EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  stable_prod_grad_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.EltwiseParameter)
  SharedDtor();
}

void EltwiseParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EltwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseParameter_descriptor_;
}

const EltwiseParameter& EltwiseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

EltwiseParameter* EltwiseParameter::default_instance_ = NULL;

EltwiseParameter* EltwiseParameter::New(::google::protobuf::Arena* arena) const {
  EltwiseParameter* n = new EltwiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EltwiseParameter)
  if (_has_bits_[0 / 32] & 5u) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  coeff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EltwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EltwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::EltwiseParameter_EltwiseOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::EltwiseParameter_EltwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (tag == 21) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_coeff())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        if (input->ExpectTag(24)) goto parse_stable_prod_grad;
        break;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_stable_prod_grad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_prod_grad_)));
          set_has_stable_prod_grad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EltwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EltwiseParameter)
  return false;
#undef DO_
}

void EltwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EltwiseParameter)
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EltwiseParameter)
}

::google::protobuf::uint8* EltwiseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseParameter)
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseParameter)
  return target;
}

int EltwiseParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EltwiseParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (has_stable_prod_grad()) {
      total_size += 1 + 1;
    }

  }
  // repeated float coeff = 2;
  {
    int data_size = 0;
    data_size = 4 * this->coeff_size();
    total_size += 1 * this->coeff_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EltwiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EltwiseParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EltwiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EltwiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EltwiseParameter)
    MergeFrom(*source);
  }
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EltwiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  coeff_.MergeFrom(from.coeff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_stable_prod_grad()) {
      set_stable_prod_grad(from.stable_prod_grad());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {

  return true;
}

void EltwiseParameter::Swap(EltwiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  std::swap(operation_, other->operation_);
  coeff_.UnsafeArenaSwap(&other->coeff_);
  std::swap(stable_prod_grad_, other->stable_prod_grad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EltwiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EltwiseParameter_descriptor_;
  metadata.reflection = EltwiseParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
 ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
 void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
 float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
 void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
 void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
 const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
 ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
 bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
 void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ELUParameter::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ELUParameter::ELUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ELUParameter)
}

void ELUParameter::InitAsDefaultInstance() {
}

ELUParameter::ELUParameter(const ELUParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ELUParameter)
}

void ELUParameter::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ELUParameter::~ELUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ELUParameter)
  SharedDtor();
}

void ELUParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ELUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ELUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELUParameter_descriptor_;
}

const ELUParameter& ELUParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ELUParameter* ELUParameter::default_instance_ = NULL;

ELUParameter* ELUParameter::New(::google::protobuf::Arena* arena) const {
  ELUParameter* n = new ELUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ELUParameter)
  alpha_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ELUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ELUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ELUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ELUParameter)
  return false;
#undef DO_
}

void ELUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ELUParameter)
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ELUParameter)
}

::google::protobuf::uint8* ELUParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ELUParameter)
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ELUParameter)
  return target;
}

int ELUParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ELUParameter)
  int total_size = 0;

  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ELUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ELUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ELUParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ELUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ELUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ELUParameter)
    MergeFrom(*source);
  }
}

void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ELUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ELUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ELUParameter::IsInitialized() const {

  return true;
}

void ELUParameter::Swap(ELUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ELUParameter::InternalSwap(ELUParameter* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ELUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ELUParameter_descriptor_;
  metadata.reflection = ELUParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ELUParameter

// optional float alpha = 1 [default = 1];
bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
 float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
 void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedParameter::kNumOutputFieldNumber;
const int EmbedParameter::kInputDimFieldNumber;
const int EmbedParameter::kBiasTermFieldNumber;
const int EmbedParameter::kWeightFillerFieldNumber;
const int EmbedParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedParameter::EmbedParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EmbedParameter)
}

void EmbedParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

EmbedParameter::EmbedParameter(const EmbedParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.EmbedParameter)
}

void EmbedParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  input_dim_ = 0u;
  bias_term_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmbedParameter::~EmbedParameter() {
  // @@protoc_insertion_point(destructor:caffe.EmbedParameter)
  SharedDtor();
}

void EmbedParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void EmbedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmbedParameter_descriptor_;
}

const EmbedParameter& EmbedParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

EmbedParameter* EmbedParameter::default_instance_ = NULL;

EmbedParameter* EmbedParameter::New(::google::protobuf::Arena* arena) const {
  EmbedParameter* n = new EmbedParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EmbedParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EmbedParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EmbedParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(num_output_, input_dim_);
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmbedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EmbedParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_input_dim;
        break;
      }

      // optional uint32 input_dim = 2;
      case 2: {
        if (tag == 16) {
         parse_input_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_dim_)));
          set_has_input_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EmbedParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EmbedParameter)
  return false;
#undef DO_
}

void EmbedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EmbedParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional uint32 input_dim = 2;
  if (has_input_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->input_dim(), output);
  }

  // optional bool bias_term = 3 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EmbedParameter)
}

::google::protobuf::uint8* EmbedParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EmbedParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (has_input_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->weight_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->bias_filler_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EmbedParameter)
  return target;
}

int EmbedParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EmbedParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 input_dim = 2;
    if (has_input_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_dim());
    }

    // optional bool bias_term = 3 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 4;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EmbedParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EmbedParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EmbedParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EmbedParameter)
    MergeFrom(*source);
  }
}

void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EmbedParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_input_dim()) {
      set_input_dim(from.input_dim());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EmbedParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {

  return true;
}

void EmbedParameter::Swap(EmbedParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbedParameter::InternalSwap(EmbedParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(input_dim_, other->input_dim_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmbedParameter_descriptor_;
  metadata.reflection = EmbedParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedParameter

// optional uint32 num_output = 1;
bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
 void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
 ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
 void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
 bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
 void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000008u;
}
void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpParameter::kBaseFieldNumber;
const int ExpParameter::kScaleFieldNumber;
const int ExpParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpParameter::ExpParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ExpParameter)
}

void ExpParameter::InitAsDefaultInstance() {
}

ExpParameter::ExpParameter(const ExpParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ExpParameter)
}

void ExpParameter::SharedCtor() {
  _cached_size_ = 0;
  base_ = -1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpParameter::~ExpParameter() {
  // @@protoc_insertion_point(destructor:caffe.ExpParameter)
  SharedDtor();
}

void ExpParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpParameter_descriptor_;
}

const ExpParameter& ExpParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ExpParameter* ExpParameter::default_instance_ = NULL;

ExpParameter* ExpParameter::New(::google::protobuf::Arena* arena) const {
  ExpParameter* n = new ExpParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ExpParameter)
  if (_has_bits_[0 / 32] & 7u) {
    base_ = -1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ExpParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ExpParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ExpParameter)
  return false;
#undef DO_
}

void ExpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ExpParameter)
}

::google::protobuf::uint8* ExpParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ExpParameter)
  return target;
}

int ExpParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ExpParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ExpParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExpParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ExpParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ExpParameter)
    MergeFrom(*source);
  }
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ExpParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {

  return true;
}

void ExpParameter::Swap(ExpParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpParameter::InternalSwap(ExpParameter* other) {
  std::swap(base_, other->base_);
  std::swap(scale_, other->scale_);
  std::swap(shift_, other->shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpParameter_descriptor_;
  metadata.reflection = ExpParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpParameter

// optional float base = 1 [default = -1];
bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
 float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
 void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
 void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
 float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
 void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlattenParameter::kAxisFieldNumber;
const int FlattenParameter::kEndAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlattenParameter::FlattenParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FlattenParameter)
}

void FlattenParameter::InitAsDefaultInstance() {
}

FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  end_axis_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:caffe.FlattenParameter)
  SharedDtor();
}

void FlattenParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlattenParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlattenParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlattenParameter_descriptor_;
}

const FlattenParameter& FlattenParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FlattenParameter* FlattenParameter::default_instance_ = NULL;

FlattenParameter* FlattenParameter::New(::google::protobuf::Arena* arena) const {
  FlattenParameter* n = new FlattenParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FlattenParameter)
  if (_has_bits_[0 / 32] & 3u) {
    axis_ = 1;
    end_axis_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FlattenParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FlattenParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_axis;
        break;
      }

      // optional int32 end_axis = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_end_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_axis_)));
          set_has_end_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FlattenParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FlattenParameter)
  return false;
#undef DO_
}

void FlattenParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FlattenParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (has_end_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FlattenParameter)
}

::google::protobuf::uint8* FlattenParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FlattenParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (has_end_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FlattenParameter)
  return target;
}

int FlattenParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FlattenParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (has_end_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_axis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlattenParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FlattenParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FlattenParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FlattenParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FlattenParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FlattenParameter)
    MergeFrom(*source);
  }
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FlattenParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_end_axis()) {
      set_end_axis(from.end_axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FlattenParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {

  return true;
}

void FlattenParameter::Swap(FlattenParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlattenParameter::InternalSwap(FlattenParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(end_axis_, other->end_axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlattenParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlattenParameter_descriptor_;
  metadata.reflection = FlattenParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlattenParameter

// optional int32 axis = 1 [default = 1];
bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
 void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
 ::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
 void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5DataParameter::kSourceFieldNumber;
const int HDF5DataParameter::kBatchSizeFieldNumber;
const int HDF5DataParameter::kShuffleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5DataParameter::HDF5DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::InitAsDefaultInstance() {
}

HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  shuffle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HDF5DataParameter::~HDF5DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5DataParameter)
  SharedDtor();
}

void HDF5DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HDF5DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDF5DataParameter_descriptor_;
}

const HDF5DataParameter& HDF5DataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

HDF5DataParameter* HDF5DataParameter::default_instance_ = NULL;

HDF5DataParameter* HDF5DataParameter::New(::google::protobuf::Arena* arena) const {
  HDF5DataParameter* n = new HDF5DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5DataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HDF5DataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HDF5DataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(batch_size_, shuffle_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HDF5DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5DataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
          set_has_shuffle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5DataParameter)
  return false;
#undef DO_
}

void HDF5DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5DataParameter)
}

::google::protobuf::uint8* HDF5DataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5DataParameter)
  return target;
}

int HDF5DataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5DataParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 2;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HDF5DataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5DataParameter)
    MergeFrom(*source);
  }
}

void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HDF5DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {

  return true;
}

void HDF5DataParameter::Swap(HDF5DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDF5DataParameter_descriptor_;
  metadata.reflection = HDF5DataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5DataParameter

// optional string source = 1;
bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
 void HDF5DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
 void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
 ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
 ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
 void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
 bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
 void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5OutputParameter::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5OutputParameter::HDF5OutputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::InitAsDefaultInstance() {
}

HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HDF5OutputParameter::~HDF5OutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5OutputParameter)
  SharedDtor();
}

void HDF5OutputParameter::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HDF5OutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5OutputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDF5OutputParameter_descriptor_;
}

const HDF5OutputParameter& HDF5OutputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

HDF5OutputParameter* HDF5OutputParameter::default_instance_ = NULL;

HDF5OutputParameter* HDF5OutputParameter::New(::google::protobuf::Arena* arena) const {
  HDF5OutputParameter* n = new HDF5OutputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5OutputParameter)
  if (has_file_name()) {
    file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HDF5OutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5OutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5OutputParameter.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5OutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5OutputParameter)
  return false;
#undef DO_
}

void HDF5OutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5OutputParameter)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5OutputParameter)
}

::google::protobuf::uint8* HDF5OutputParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5OutputParameter)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5OutputParameter)
  return target;
}

int HDF5OutputParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5OutputParameter)
  int total_size = 0;

  // optional string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5OutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5OutputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HDF5OutputParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5OutputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5OutputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5OutputParameter)
    MergeFrom(*source);
  }
}

void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5OutputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HDF5OutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {

  return true;
}

void HDF5OutputParameter::Swap(HDF5OutputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5OutputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDF5OutputParameter_descriptor_;
  metadata.reflection = HDF5OutputParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5OutputParameter

// optional string file_name = 1;
bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
 void HDF5OutputParameter::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
 void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
 ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HingeLossParameter_Norm_descriptor_;
}
bool HingeLossParameter_Norm_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HingeLossParameter_Norm HingeLossParameter::L1;
const HingeLossParameter_Norm HingeLossParameter::L2;
const HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
const HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
const int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HingeLossParameter::kNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HingeLossParameter::HingeLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::InitAsDefaultInstance() {
}

HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  norm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HingeLossParameter::~HingeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.HingeLossParameter)
  SharedDtor();
}

void HingeLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HingeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HingeLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HingeLossParameter_descriptor_;
}

const HingeLossParameter& HingeLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

HingeLossParameter* HingeLossParameter::default_instance_ = NULL;

HingeLossParameter* HingeLossParameter::New(::google::protobuf::Arena* arena) const {
  HingeLossParameter* n = new HingeLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HingeLossParameter)
  norm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HingeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HingeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::HingeLossParameter_Norm_IsValid(value)) {
            set_norm(static_cast< ::caffe::HingeLossParameter_Norm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HingeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HingeLossParameter)
  return false;
#undef DO_
}

void HingeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HingeLossParameter)
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HingeLossParameter)
}

::google::protobuf::uint8* HingeLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HingeLossParameter)
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HingeLossParameter)
  return target;
}

int HingeLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HingeLossParameter)
  int total_size = 0;

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HingeLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HingeLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HingeLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HingeLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HingeLossParameter)
    MergeFrom(*source);
  }
}

void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HingeLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_norm()) {
      set_norm(from.norm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {

  return true;
}

void HingeLossParameter::Swap(HingeLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
  std::swap(norm_, other->norm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HingeLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HingeLossParameter_descriptor_;
  metadata.reflection = HingeLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
 ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
 void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataParameter::kSourceFieldNumber;
const int ImageDataParameter::kBatchSizeFieldNumber;
const int ImageDataParameter::kRandSkipFieldNumber;
const int ImageDataParameter::kShuffleFieldNumber;
const int ImageDataParameter::kNewHeightFieldNumber;
const int ImageDataParameter::kNewWidthFieldNumber;
const int ImageDataParameter::kIsColorFieldNumber;
const int ImageDataParameter::kFaceTransformFieldNumber;
const int ImageDataParameter::kMaxShearRatioFieldNumber;
const int ImageDataParameter::kMaxAspectRatioFieldNumber;
const int ImageDataParameter::kMaxRotateAngleFieldNumber;
const int ImageDataParameter::kMinRandomScaleFieldNumber;
const int ImageDataParameter::kMaxRandomScaleFieldNumber;
const int ImageDataParameter::kMaxRandomShiftFieldNumber;
const int ImageDataParameter::kFaceMirrorFieldNumber;
const int ImageDataParameter::kFacePointNumFieldNumber;
const int ImageDataParameter::kScaleFieldNumber;
const int ImageDataParameter::kMeanFileFieldNumber;
const int ImageDataParameter::kCropSizeFieldNumber;
const int ImageDataParameter::kMirrorFieldNumber;
const int ImageDataParameter::kRootFolderFieldNumber;
const int ImageDataParameter::kBalanceClassFieldNumber;
const int ImageDataParameter::kBalanceByFieldNumber;
const int ImageDataParameter::kLabelCutStartFieldNumber;
const int ImageDataParameter::kLabelCutEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataParameter::ImageDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::InitAsDefaultInstance() {
}

ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 1u;
  rand_skip_ = 0u;
  shuffle_ = false;
  new_height_ = 0u;
  new_width_ = 0u;
  is_color_ = true;
  face_transform_ = false;
  max_shear_ratio_ = 0;
  max_aspect_ratio_ = 0;
  max_rotate_angle_ = 0;
  min_random_scale_ = 1;
  max_random_scale_ = 1;
  max_random_shift_ = 0u;
  face_mirror_ = false;
  face_point_num_ = 0u;
  scale_ = 1;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_size_ = 0u;
  mirror_ = false;
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_class_ = false;
  balance_by_ = 0u;
  label_cut_start_ = 0u;
  label_cut_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataParameter)
  SharedDtor();
}

void ImageDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageDataParameter_descriptor_;
}

const ImageDataParameter& ImageDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ImageDataParameter* ImageDataParameter::default_instance_ = NULL;

ImageDataParameter* ImageDataParameter::New(::google::protobuf::Arena* arena) const {
  ImageDataParameter* n = new ImageDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(rand_skip_, shuffle_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    batch_size_ = 1u;
    is_color_ = true;
    face_transform_ = false;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(face_mirror_, max_rotate_angle_);
    ZR_(max_random_shift_, face_point_num_);
    min_random_scale_ = 1;
    max_random_scale_ = 1;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(mirror_, label_cut_start_);
    scale_ = 1;
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    crop_size_ = 0u;
    if (has_root_folder()) {
      root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  label_cut_end_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_rand_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
          set_has_rand_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
          set_has_shuffle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_new_height;
        break;
      }

      // optional uint32 new_height = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_new_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_height_)));
          set_has_new_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_new_width;
        break;
      }

      // optional uint32 new_width = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_new_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_width_)));
          set_has_new_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_color;
        break;
      }

      // optional bool is_color = 11 [default = true];
      case 11: {
        if (tag == 88) {
         parse_is_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_color_)));
          set_has_is_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_root_folder;
        break;
      }

      // optional string root_folder = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_root_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_face_transform;
        break;
      }

      // optional bool face_transform = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_face_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &face_transform_)));
          set_has_face_transform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_max_shear_ratio;
        break;
      }

      // optional float max_shear_ratio = 14 [default = 0];
      case 14: {
        if (tag == 117) {
         parse_max_shear_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_shear_ratio_)));
          set_has_max_shear_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_max_aspect_ratio;
        break;
      }

      // optional float max_aspect_ratio = 15 [default = 0];
      case 15: {
        if (tag == 125) {
         parse_max_aspect_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_aspect_ratio_)));
          set_has_max_aspect_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_max_rotate_angle;
        break;
      }

      // optional float max_rotate_angle = 16 [default = 0];
      case 16: {
        if (tag == 133) {
         parse_max_rotate_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_rotate_angle_)));
          set_has_max_rotate_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_min_random_scale;
        break;
      }

      // optional float min_random_scale = 17 [default = 1];
      case 17: {
        if (tag == 141) {
         parse_min_random_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_random_scale_)));
          set_has_min_random_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_max_random_scale;
        break;
      }

      // optional float max_random_scale = 18 [default = 1];
      case 18: {
        if (tag == 149) {
         parse_max_random_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_random_scale_)));
          set_has_max_random_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_max_random_shift;
        break;
      }

      // optional uint32 max_random_shift = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_max_random_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_random_shift_)));
          set_has_max_random_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_face_mirror;
        break;
      }

      // optional bool face_mirror = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_face_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &face_mirror_)));
          set_has_face_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_face_point_num;
        break;
      }

      // optional uint32 face_point_num = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_face_point_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_point_num_)));
          set_has_face_point_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_balance_class;
        break;
      }

      // optional bool balance_class = 22 [default = false];
      case 22: {
        if (tag == 176) {
         parse_balance_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &balance_class_)));
          set_has_balance_class();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_balance_by;
        break;
      }

      // optional uint32 balance_by = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_balance_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_by_)));
          set_has_balance_by();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_label_cut_start;
        break;
      }

      // optional uint32 label_cut_start = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_label_cut_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_cut_start_)));
          set_has_label_cut_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_label_cut_end;
        break;
      }

      // optional uint32 label_cut_end = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_label_cut_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_cut_end_)));
          set_has_label_cut_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataParameter)
  return false;
#undef DO_
}

void ImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (has_new_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_height(), output);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (has_new_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->new_width(), output);
  }

  // optional bool is_color = 11 [default = true];
  if (has_is_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_color(), output);
  }

  // optional string root_folder = 12 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->root_folder(), output);
  }

  // optional bool face_transform = 13 [default = false];
  if (has_face_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->face_transform(), output);
  }

  // optional float max_shear_ratio = 14 [default = 0];
  if (has_max_shear_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->max_shear_ratio(), output);
  }

  // optional float max_aspect_ratio = 15 [default = 0];
  if (has_max_aspect_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->max_aspect_ratio(), output);
  }

  // optional float max_rotate_angle = 16 [default = 0];
  if (has_max_rotate_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->max_rotate_angle(), output);
  }

  // optional float min_random_scale = 17 [default = 1];
  if (has_min_random_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->min_random_scale(), output);
  }

  // optional float max_random_scale = 18 [default = 1];
  if (has_max_random_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->max_random_scale(), output);
  }

  // optional uint32 max_random_shift = 19 [default = 0];
  if (has_max_random_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->max_random_shift(), output);
  }

  // optional bool face_mirror = 20 [default = false];
  if (has_face_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->face_mirror(), output);
  }

  // optional uint32 face_point_num = 21 [default = 0];
  if (has_face_point_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->face_point_num(), output);
  }

  // optional bool balance_class = 22 [default = false];
  if (has_balance_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->balance_class(), output);
  }

  // optional uint32 balance_by = 23 [default = 0];
  if (has_balance_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->balance_by(), output);
  }

  // optional uint32 label_cut_start = 24 [default = 0];
  if (has_label_cut_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->label_cut_start(), output);
  }

  // optional uint32 label_cut_end = 25 [default = 0];
  if (has_label_cut_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->label_cut_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataParameter)
}

::google::protobuf::uint8* ImageDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (has_new_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_height(), target);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (has_new_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->new_width(), target);
  }

  // optional bool is_color = 11 [default = true];
  if (has_is_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_color(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->root_folder(), target);
  }

  // optional bool face_transform = 13 [default = false];
  if (has_face_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->face_transform(), target);
  }

  // optional float max_shear_ratio = 14 [default = 0];
  if (has_max_shear_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->max_shear_ratio(), target);
  }

  // optional float max_aspect_ratio = 15 [default = 0];
  if (has_max_aspect_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->max_aspect_ratio(), target);
  }

  // optional float max_rotate_angle = 16 [default = 0];
  if (has_max_rotate_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->max_rotate_angle(), target);
  }

  // optional float min_random_scale = 17 [default = 1];
  if (has_min_random_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->min_random_scale(), target);
  }

  // optional float max_random_scale = 18 [default = 1];
  if (has_max_random_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->max_random_scale(), target);
  }

  // optional uint32 max_random_shift = 19 [default = 0];
  if (has_max_random_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->max_random_shift(), target);
  }

  // optional bool face_mirror = 20 [default = false];
  if (has_face_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->face_mirror(), target);
  }

  // optional uint32 face_point_num = 21 [default = 0];
  if (has_face_point_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->face_point_num(), target);
  }

  // optional bool balance_class = 22 [default = false];
  if (has_balance_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->balance_class(), target);
  }

  // optional uint32 balance_by = 23 [default = 0];
  if (has_balance_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->balance_by(), target);
  }

  // optional uint32 label_cut_start = 24 [default = 0];
  if (has_label_cut_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->label_cut_start(), target);
  }

  // optional uint32 label_cut_end = 25 [default = 0];
  if (has_label_cut_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->label_cut_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataParameter)
  return target;
}

int ImageDataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional uint32 new_height = 9 [default = 0];
    if (has_new_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_height());
    }

    // optional uint32 new_width = 10 [default = 0];
    if (has_new_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_width());
    }

    // optional bool is_color = 11 [default = true];
    if (has_is_color()) {
      total_size += 1 + 1;
    }

    // optional bool face_transform = 13 [default = false];
    if (has_face_transform()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float max_shear_ratio = 14 [default = 0];
    if (has_max_shear_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 15 [default = 0];
    if (has_max_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_rotate_angle = 16 [default = 0];
    if (has_max_rotate_angle()) {
      total_size += 2 + 4;
    }

    // optional float min_random_scale = 17 [default = 1];
    if (has_min_random_scale()) {
      total_size += 2 + 4;
    }

    // optional float max_random_scale = 18 [default = 1];
    if (has_max_random_scale()) {
      total_size += 2 + 4;
    }

    // optional uint32 max_random_shift = 19 [default = 0];
    if (has_max_random_shift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_random_shift());
    }

    // optional bool face_mirror = 20 [default = false];
    if (has_face_mirror()) {
      total_size += 2 + 1;
    }

    // optional uint32 face_point_num = 21 [default = 0];
    if (has_face_point_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_point_num());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional string root_folder = 12 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

    // optional bool balance_class = 22 [default = false];
    if (has_balance_class()) {
      total_size += 2 + 1;
    }

    // optional uint32 balance_by = 23 [default = 0];
    if (has_balance_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_by());
    }

    // optional uint32 label_cut_start = 24 [default = 0];
    if (has_label_cut_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_cut_start());
    }

  }
  // optional uint32 label_cut_end = 25 [default = 0];
  if (has_label_cut_end()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->label_cut_end());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImageDataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataParameter)
    MergeFrom(*source);
  }
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
    if (from.has_new_height()) {
      set_new_height(from.new_height());
    }
    if (from.has_new_width()) {
      set_new_width(from.new_width());
    }
    if (from.has_is_color()) {
      set_is_color(from.is_color());
    }
    if (from.has_face_transform()) {
      set_face_transform(from.face_transform());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_shear_ratio()) {
      set_max_shear_ratio(from.max_shear_ratio());
    }
    if (from.has_max_aspect_ratio()) {
      set_max_aspect_ratio(from.max_aspect_ratio());
    }
    if (from.has_max_rotate_angle()) {
      set_max_rotate_angle(from.max_rotate_angle());
    }
    if (from.has_min_random_scale()) {
      set_min_random_scale(from.min_random_scale());
    }
    if (from.has_max_random_scale()) {
      set_max_random_scale(from.max_random_scale());
    }
    if (from.has_max_random_shift()) {
      set_max_random_shift(from.max_random_shift());
    }
    if (from.has_face_mirror()) {
      set_face_mirror(from.face_mirror());
    }
    if (from.has_face_point_num()) {
      set_face_point_num(from.face_point_num());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_root_folder()) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (from.has_balance_class()) {
      set_balance_class(from.balance_class());
    }
    if (from.has_balance_by()) {
      set_balance_by(from.balance_by());
    }
    if (from.has_label_cut_start()) {
      set_label_cut_start(from.label_cut_start());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_label_cut_end()) {
      set_label_cut_end(from.label_cut_end());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {

  return true;
}

void ImageDataParameter::Swap(ImageDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(new_height_, other->new_height_);
  std::swap(new_width_, other->new_width_);
  std::swap(is_color_, other->is_color_);
  std::swap(face_transform_, other->face_transform_);
  std::swap(max_shear_ratio_, other->max_shear_ratio_);
  std::swap(max_aspect_ratio_, other->max_aspect_ratio_);
  std::swap(max_rotate_angle_, other->max_rotate_angle_);
  std::swap(min_random_scale_, other->min_random_scale_);
  std::swap(max_random_scale_, other->max_random_scale_);
  std::swap(max_random_shift_, other->max_random_shift_);
  std::swap(face_mirror_, other->face_mirror_);
  std::swap(face_point_num_, other->face_point_num_);
  std::swap(scale_, other->scale_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  root_folder_.Swap(&other->root_folder_);
  std::swap(balance_class_, other->balance_class_);
  std::swap(balance_by_, other->balance_by_);
  std::swap(label_cut_start_, other->label_cut_start_);
  std::swap(label_cut_end_, other->label_cut_end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageDataParameter_descriptor_;
  metadata.reflection = ImageDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDataParameter

// optional string source = 1;
bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
 void ImageDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
 void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
 ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
 ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
 void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
 ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
 void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
 bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
 void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
 ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
 void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
 ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
 void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
 bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
 void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional bool face_transform = 13 [default = false];
bool ImageDataParameter::has_face_transform() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageDataParameter::set_has_face_transform() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageDataParameter::clear_has_face_transform() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageDataParameter::clear_face_transform() {
  face_transform_ = false;
  clear_has_face_transform();
}
 bool ImageDataParameter::face_transform() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.face_transform)
  return face_transform_;
}
 void ImageDataParameter::set_face_transform(bool value) {
  set_has_face_transform();
  face_transform_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.face_transform)
}

// optional float max_shear_ratio = 14 [default = 0];
bool ImageDataParameter::has_max_shear_ratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageDataParameter::set_has_max_shear_ratio() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageDataParameter::clear_has_max_shear_ratio() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageDataParameter::clear_max_shear_ratio() {
  max_shear_ratio_ = 0;
  clear_has_max_shear_ratio();
}
 float ImageDataParameter::max_shear_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_shear_ratio)
  return max_shear_ratio_;
}
 void ImageDataParameter::set_max_shear_ratio(float value) {
  set_has_max_shear_ratio();
  max_shear_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_shear_ratio)
}

// optional float max_aspect_ratio = 15 [default = 0];
bool ImageDataParameter::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageDataParameter::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageDataParameter::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageDataParameter::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 0;
  clear_has_max_aspect_ratio();
}
 float ImageDataParameter::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_aspect_ratio)
  return max_aspect_ratio_;
}
 void ImageDataParameter::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_aspect_ratio)
}

// optional float max_rotate_angle = 16 [default = 0];
bool ImageDataParameter::has_max_rotate_angle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageDataParameter::set_has_max_rotate_angle() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageDataParameter::clear_has_max_rotate_angle() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageDataParameter::clear_max_rotate_angle() {
  max_rotate_angle_ = 0;
  clear_has_max_rotate_angle();
}
 float ImageDataParameter::max_rotate_angle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_rotate_angle)
  return max_rotate_angle_;
}
 void ImageDataParameter::set_max_rotate_angle(float value) {
  set_has_max_rotate_angle();
  max_rotate_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_rotate_angle)
}

// optional float min_random_scale = 17 [default = 1];
bool ImageDataParameter::has_min_random_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageDataParameter::set_has_min_random_scale() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageDataParameter::clear_has_min_random_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageDataParameter::clear_min_random_scale() {
  min_random_scale_ = 1;
  clear_has_min_random_scale();
}
 float ImageDataParameter::min_random_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.min_random_scale)
  return min_random_scale_;
}
 void ImageDataParameter::set_min_random_scale(float value) {
  set_has_min_random_scale();
  min_random_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.min_random_scale)
}

// optional float max_random_scale = 18 [default = 1];
bool ImageDataParameter::has_max_random_scale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ImageDataParameter::set_has_max_random_scale() {
  _has_bits_[0] |= 0x00001000u;
}
void ImageDataParameter::clear_has_max_random_scale() {
  _has_bits_[0] &= ~0x00001000u;
}
void ImageDataParameter::clear_max_random_scale() {
  max_random_scale_ = 1;
  clear_has_max_random_scale();
}
 float ImageDataParameter::max_random_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_random_scale)
  return max_random_scale_;
}
 void ImageDataParameter::set_max_random_scale(float value) {
  set_has_max_random_scale();
  max_random_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_random_scale)
}

// optional uint32 max_random_shift = 19 [default = 0];
bool ImageDataParameter::has_max_random_shift() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ImageDataParameter::set_has_max_random_shift() {
  _has_bits_[0] |= 0x00002000u;
}
void ImageDataParameter::clear_has_max_random_shift() {
  _has_bits_[0] &= ~0x00002000u;
}
void ImageDataParameter::clear_max_random_shift() {
  max_random_shift_ = 0u;
  clear_has_max_random_shift();
}
 ::google::protobuf::uint32 ImageDataParameter::max_random_shift() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_random_shift)
  return max_random_shift_;
}
 void ImageDataParameter::set_max_random_shift(::google::protobuf::uint32 value) {
  set_has_max_random_shift();
  max_random_shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_random_shift)
}

// optional bool face_mirror = 20 [default = false];
bool ImageDataParameter::has_face_mirror() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ImageDataParameter::set_has_face_mirror() {
  _has_bits_[0] |= 0x00004000u;
}
void ImageDataParameter::clear_has_face_mirror() {
  _has_bits_[0] &= ~0x00004000u;
}
void ImageDataParameter::clear_face_mirror() {
  face_mirror_ = false;
  clear_has_face_mirror();
}
 bool ImageDataParameter::face_mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.face_mirror)
  return face_mirror_;
}
 void ImageDataParameter::set_face_mirror(bool value) {
  set_has_face_mirror();
  face_mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.face_mirror)
}

// optional uint32 face_point_num = 21 [default = 0];
bool ImageDataParameter::has_face_point_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ImageDataParameter::set_has_face_point_num() {
  _has_bits_[0] |= 0x00008000u;
}
void ImageDataParameter::clear_has_face_point_num() {
  _has_bits_[0] &= ~0x00008000u;
}
void ImageDataParameter::clear_face_point_num() {
  face_point_num_ = 0u;
  clear_has_face_point_num();
}
 ::google::protobuf::uint32 ImageDataParameter::face_point_num() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.face_point_num)
  return face_point_num_;
}
 void ImageDataParameter::set_face_point_num(::google::protobuf::uint32 value) {
  set_has_face_point_num();
  face_point_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.face_point_num)
}

// optional float scale = 2 [default = 1];
bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00010000u;
}
void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00010000u;
}
void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
 void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00020000u;
}
void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00020000u;
}
void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
 const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
 void ImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
 void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
 ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00040000u;
}
void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00040000u;
}
void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
 ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
 void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00080000u;
}
void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00080000u;
}
void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
 bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
 void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00100000u;
}
void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00100000u;
}
void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
 const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
 void ImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
 void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
 ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

// optional bool balance_class = 22 [default = false];
bool ImageDataParameter::has_balance_class() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ImageDataParameter::set_has_balance_class() {
  _has_bits_[0] |= 0x00200000u;
}
void ImageDataParameter::clear_has_balance_class() {
  _has_bits_[0] &= ~0x00200000u;
}
void ImageDataParameter::clear_balance_class() {
  balance_class_ = false;
  clear_has_balance_class();
}
 bool ImageDataParameter::balance_class() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.balance_class)
  return balance_class_;
}
 void ImageDataParameter::set_balance_class(bool value) {
  set_has_balance_class();
  balance_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.balance_class)
}

// optional uint32 balance_by = 23 [default = 0];
bool ImageDataParameter::has_balance_by() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ImageDataParameter::set_has_balance_by() {
  _has_bits_[0] |= 0x00400000u;
}
void ImageDataParameter::clear_has_balance_by() {
  _has_bits_[0] &= ~0x00400000u;
}
void ImageDataParameter::clear_balance_by() {
  balance_by_ = 0u;
  clear_has_balance_by();
}
 ::google::protobuf::uint32 ImageDataParameter::balance_by() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.balance_by)
  return balance_by_;
}
 void ImageDataParameter::set_balance_by(::google::protobuf::uint32 value) {
  set_has_balance_by();
  balance_by_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.balance_by)
}

// optional uint32 label_cut_start = 24 [default = 0];
bool ImageDataParameter::has_label_cut_start() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ImageDataParameter::set_has_label_cut_start() {
  _has_bits_[0] |= 0x00800000u;
}
void ImageDataParameter::clear_has_label_cut_start() {
  _has_bits_[0] &= ~0x00800000u;
}
void ImageDataParameter::clear_label_cut_start() {
  label_cut_start_ = 0u;
  clear_has_label_cut_start();
}
 ::google::protobuf::uint32 ImageDataParameter::label_cut_start() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.label_cut_start)
  return label_cut_start_;
}
 void ImageDataParameter::set_label_cut_start(::google::protobuf::uint32 value) {
  set_has_label_cut_start();
  label_cut_start_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.label_cut_start)
}

// optional uint32 label_cut_end = 25 [default = 0];
bool ImageDataParameter::has_label_cut_end() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ImageDataParameter::set_has_label_cut_end() {
  _has_bits_[0] |= 0x01000000u;
}
void ImageDataParameter::clear_has_label_cut_end() {
  _has_bits_[0] &= ~0x01000000u;
}
void ImageDataParameter::clear_label_cut_end() {
  label_cut_end_ = 0u;
  clear_has_label_cut_end();
}
 ::google::protobuf::uint32 ImageDataParameter::label_cut_end() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.label_cut_end)
  return label_cut_end_;
}
 void ImageDataParameter::set_label_cut_end(::google::protobuf::uint32 value) {
  set_has_label_cut_end();
  label_cut_end_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.label_cut_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfogainLossParameter::kSourceFieldNumber;
const int InfogainLossParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfogainLossParameter::InfogainLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::InitAsDefaultInstance() {
}

InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  axis_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfogainLossParameter::~InfogainLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.InfogainLossParameter)
  SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InfogainLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfogainLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfogainLossParameter_descriptor_;
}

const InfogainLossParameter& InfogainLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InfogainLossParameter* InfogainLossParameter::default_instance_ = NULL;

InfogainLossParameter* InfogainLossParameter::New(::google::protobuf::Arena* arena) const {
  InfogainLossParameter* n = new InfogainLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InfogainLossParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    axis_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InfogainLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InfogainLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InfogainLossParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InfogainLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InfogainLossParameter)
  return false;
#undef DO_
}

void InfogainLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InfogainLossParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InfogainLossParameter)
}

::google::protobuf::uint8* InfogainLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InfogainLossParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InfogainLossParameter)
  return target;
}

int InfogainLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InfogainLossParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfogainLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InfogainLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InfogainLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InfogainLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InfogainLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InfogainLossParameter)
    MergeFrom(*source);
  }
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InfogainLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InfogainLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {

  return true;
}

void InfogainLossParameter::Swap(InfogainLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
  source_.Swap(&other->source_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfogainLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfogainLossParameter_descriptor_;
  metadata.reflection = InfogainLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfogainLossParameter

// optional string source = 1;
bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
 void InfogainLossParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
 void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
 ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// optional int32 axis = 2 [default = 1];
bool InfogainLossParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InfogainLossParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void InfogainLossParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void InfogainLossParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 InfogainLossParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.axis)
  return axis_;
}
 void InfogainLossParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
const int InnerProductParameter::kBiasFillerFieldNumber;
const int InnerProductParameter::kAxisFieldNumber;
const int InnerProductParameter::kTransposeFieldNumber;
const int InnerProductParameter::kNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  axis_ = 1;
  transpose_ = false;
  normalize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerProductParameter_descriptor_;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InnerProductParameter* InnerProductParameter::default_instance_ = NULL;

InnerProductParameter* InnerProductParameter::New(::google::protobuf::Arena* arena) const {
  InnerProductParameter* n = new InnerProductParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerProductParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InnerProductParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InnerProductParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(transpose_, normalize_);
    num_output_ = 0u;
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_axis;
        break;
      }

      // optional int32 axis = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transpose;
        break;
      }

      // optional bool transpose = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_transpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
          set_has_transpose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_normalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
          set_has_normalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerProductParameter)
  return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->transpose(), output);
  }

  // optional bool normalize = 7 [default = false];
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->normalize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->weight_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->bias_filler_, target);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->transpose(), target);
  }

  // optional bool normalize = 7 [default = false];
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->normalize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductParameter)
  return target;
}

int InnerProductParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerProductParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional int32 axis = 5 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool transpose = 6 [default = false];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

    // optional bool normalize = 7 [default = false];
    if (has_normalize()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerProductParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InnerProductParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerProductParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerProductParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerProductParameter)
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerProductParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_transpose()) {
      set_transpose(from.transpose());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {

  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(axis_, other->axis_);
  std::swap(transpose_, other->transpose_);
  std::swap(normalize_, other->normalize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerProductParameter_descriptor_;
  metadata.reflection = InnerProductParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerProductParameter

// optional uint32 num_output = 1;
bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
 void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
 bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
 void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
 void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
 bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.transpose)
  return transpose_;
}
 void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.transpose)
}

// optional bool normalize = 7 [default = false];
bool InnerProductParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InnerProductParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000040u;
}
void InnerProductParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000040u;
}
void InnerProductParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
 bool InnerProductParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.normalize)
  return normalize_;
}
 void InnerProductParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.normalize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* InnerDistanceParameter::_default_distance_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerDistanceParameter::kNumOutputFieldNumber;
const int InnerDistanceParameter::kBiasTermFieldNumber;
const int InnerDistanceParameter::kWeightFillerFieldNumber;
const int InnerDistanceParameter::kBiasFillerFieldNumber;
const int InnerDistanceParameter::kAxisFieldNumber;
const int InnerDistanceParameter::kTransposeFieldNumber;
const int InnerDistanceParameter::kDistanceTypeFieldNumber;
const int InnerDistanceParameter::kNormalizeFieldNumber;
const int InnerDistanceParameter::kUpdateCenterOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerDistanceParameter::InnerDistanceParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerDistanceParameter)
}

void InnerDistanceParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

InnerDistanceParameter::InnerDistanceParameter(const InnerDistanceParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InnerDistanceParameter)
}

void InnerDistanceParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  axis_ = 1;
  transpose_ = false;
  distance_type_.UnsafeSetDefault(_default_distance_type_);
  normalize_ = false;
  update_center_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerDistanceParameter::~InnerDistanceParameter() {
  // @@protoc_insertion_point(destructor:caffe.InnerDistanceParameter)
  SharedDtor();
}

void InnerDistanceParameter::SharedDtor() {
  distance_type_.DestroyNoArena(_default_distance_type_);
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void InnerDistanceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerDistanceParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerDistanceParameter_descriptor_;
}

const InnerDistanceParameter& InnerDistanceParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InnerDistanceParameter* InnerDistanceParameter::default_instance_ = NULL;

InnerDistanceParameter* InnerDistanceParameter::New(::google::protobuf::Arena* arena) const {
  InnerDistanceParameter* n = new InnerDistanceParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerDistanceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerDistanceParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InnerDistanceParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InnerDistanceParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(transpose_, normalize_);
    num_output_ = 0u;
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    if (has_distance_type()) {
      distance_type_.ClearToDefaultNoArena(_default_distance_type_);
    }
  }
  update_center_only_ = false;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnerDistanceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerDistanceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_axis;
        break;
      }

      // optional int32 axis = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transpose;
        break;
      }

      // optional bool transpose = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_transpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
          set_has_transpose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_distance_type;
        break;
      }

      // optional string distance_type = 7 [default = "L2"];
      case 7: {
        if (tag == 58) {
         parse_distance_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distance_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->distance_type().data(), this->distance_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InnerDistanceParameter.distance_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_normalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
          set_has_normalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_update_center_only;
        break;
      }

      // optional bool update_center_only = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_update_center_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_center_only_)));
          set_has_update_center_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerDistanceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerDistanceParameter)
  return false;
#undef DO_
}

void InnerDistanceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerDistanceParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->transpose(), output);
  }

  // optional string distance_type = 7 [default = "L2"];
  if (has_distance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->distance_type().data(), this->distance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InnerDistanceParameter.distance_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->distance_type(), output);
  }

  // optional bool normalize = 8 [default = false];
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->normalize(), output);
  }

  // optional bool update_center_only = 9 [default = false];
  if (has_update_center_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->update_center_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerDistanceParameter)
}

::google::protobuf::uint8* InnerDistanceParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerDistanceParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->weight_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->bias_filler_, target);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->transpose(), target);
  }

  // optional string distance_type = 7 [default = "L2"];
  if (has_distance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->distance_type().data(), this->distance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InnerDistanceParameter.distance_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->distance_type(), target);
  }

  // optional bool normalize = 8 [default = false];
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->normalize(), target);
  }

  // optional bool update_center_only = 9 [default = false];
  if (has_update_center_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->update_center_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerDistanceParameter)
  return target;
}

int InnerDistanceParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerDistanceParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional int32 axis = 5 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool transpose = 6 [default = false];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

    // optional string distance_type = 7 [default = "L2"];
    if (has_distance_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->distance_type());
    }

    // optional bool normalize = 8 [default = false];
    if (has_normalize()) {
      total_size += 1 + 1;
    }

  }
  // optional bool update_center_only = 9 [default = false];
  if (has_update_center_only()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerDistanceParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerDistanceParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InnerDistanceParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerDistanceParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerDistanceParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerDistanceParameter)
    MergeFrom(*source);
  }
}

void InnerDistanceParameter::MergeFrom(const InnerDistanceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerDistanceParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_transpose()) {
      set_transpose(from.transpose());
    }
    if (from.has_distance_type()) {
      set_has_distance_type();
      distance_type_.AssignWithDefault(_default_distance_type_, from.distance_type_);
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_center_only()) {
      set_update_center_only(from.update_center_only());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnerDistanceParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerDistanceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerDistanceParameter::CopyFrom(const InnerDistanceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerDistanceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerDistanceParameter::IsInitialized() const {

  return true;
}

void InnerDistanceParameter::Swap(InnerDistanceParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerDistanceParameter::InternalSwap(InnerDistanceParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(axis_, other->axis_);
  std::swap(transpose_, other->transpose_);
  distance_type_.Swap(&other->distance_type_);
  std::swap(normalize_, other->normalize_);
  std::swap(update_center_only_, other->update_center_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerDistanceParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerDistanceParameter_descriptor_;
  metadata.reflection = InnerDistanceParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerDistanceParameter

// optional uint32 num_output = 1;
bool InnerDistanceParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerDistanceParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerDistanceParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerDistanceParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 InnerDistanceParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.num_output)
  return num_output_;
}
 void InnerDistanceParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool InnerDistanceParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerDistanceParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerDistanceParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerDistanceParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
 bool InnerDistanceParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.bias_term)
  return bias_term_;
}
 void InnerDistanceParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool InnerDistanceParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerDistanceParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerDistanceParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerDistanceParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InnerDistanceParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* InnerDistanceParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerDistanceParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InnerDistanceParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerDistanceParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InnerDistanceParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerDistanceParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool InnerDistanceParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnerDistanceParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
void InnerDistanceParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnerDistanceParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& InnerDistanceParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* InnerDistanceParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerDistanceParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* InnerDistanceParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerDistanceParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void InnerDistanceParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerDistanceParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
bool InnerDistanceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InnerDistanceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
void InnerDistanceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
void InnerDistanceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 InnerDistanceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.axis)
  return axis_;
}
 void InnerDistanceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.axis)
}

// optional bool transpose = 6 [default = false];
bool InnerDistanceParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InnerDistanceParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
void InnerDistanceParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
void InnerDistanceParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
 bool InnerDistanceParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.transpose)
  return transpose_;
}
 void InnerDistanceParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.transpose)
}

// optional string distance_type = 7 [default = "L2"];
bool InnerDistanceParameter::has_distance_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InnerDistanceParameter::set_has_distance_type() {
  _has_bits_[0] |= 0x00000040u;
}
void InnerDistanceParameter::clear_has_distance_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void InnerDistanceParameter::clear_distance_type() {
  distance_type_.ClearToDefaultNoArena(_default_distance_type_);
  clear_has_distance_type();
}
 const ::std::string& InnerDistanceParameter::distance_type() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.distance_type)
  return distance_type_.GetNoArena(_default_distance_type_);
}
 void InnerDistanceParameter::set_distance_type(const ::std::string& value) {
  set_has_distance_type();
  distance_type_.SetNoArena(_default_distance_type_, value);
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.distance_type)
}
 void InnerDistanceParameter::set_distance_type(const char* value) {
  set_has_distance_type();
  distance_type_.SetNoArena(_default_distance_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InnerDistanceParameter.distance_type)
}
 void InnerDistanceParameter::set_distance_type(const char* value, size_t size) {
  set_has_distance_type();
  distance_type_.SetNoArena(_default_distance_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InnerDistanceParameter.distance_type)
}
 ::std::string* InnerDistanceParameter::mutable_distance_type() {
  set_has_distance_type();
  // @@protoc_insertion_point(field_mutable:caffe.InnerDistanceParameter.distance_type)
  return distance_type_.MutableNoArena(_default_distance_type_);
}
 ::std::string* InnerDistanceParameter::release_distance_type() {
  // @@protoc_insertion_point(field_release:caffe.InnerDistanceParameter.distance_type)
  clear_has_distance_type();
  return distance_type_.ReleaseNoArena(_default_distance_type_);
}
 void InnerDistanceParameter::set_allocated_distance_type(::std::string* distance_type) {
  if (distance_type != NULL) {
    set_has_distance_type();
  } else {
    clear_has_distance_type();
  }
  distance_type_.SetAllocatedNoArena(_default_distance_type_, distance_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerDistanceParameter.distance_type)
}

// optional bool normalize = 8 [default = false];
bool InnerDistanceParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InnerDistanceParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000080u;
}
void InnerDistanceParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000080u;
}
void InnerDistanceParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
 bool InnerDistanceParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.normalize)
  return normalize_;
}
 void InnerDistanceParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.normalize)
}

// optional bool update_center_only = 9 [default = false];
bool InnerDistanceParameter::has_update_center_only() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InnerDistanceParameter::set_has_update_center_only() {
  _has_bits_[0] |= 0x00000100u;
}
void InnerDistanceParameter::clear_has_update_center_only() {
  _has_bits_[0] &= ~0x00000100u;
}
void InnerDistanceParameter::clear_update_center_only() {
  update_center_only_ = false;
  clear_has_update_center_only();
}
 bool InnerDistanceParameter::update_center_only() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.update_center_only)
  return update_center_only_;
}
 void InnerDistanceParameter::set_update_center_only(bool value) {
  set_has_update_center_only();
  update_center_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.update_center_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputParameter::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputParameter::InputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InputParameter)
}

void InputParameter::InitAsDefaultInstance() {
}

InputParameter::InputParameter(const InputParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InputParameter)
}

void InputParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:caffe.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputParameter_descriptor_;
}

const InputParameter& InputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InputParameter* InputParameter::default_instance_ = NULL;

InputParameter* InputParameter::New(::google::protobuf::Arena* arena) const {
  InputParameter* n = new InputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InputParameter)
  shape_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_shape;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InputParameter)
  return false;
#undef DO_
}

void InputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InputParameter)
  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InputParameter)
}

::google::protobuf::uint8* InputParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InputParameter)
  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InputParameter)
  return target;
}

int InputParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InputParameter)
  int total_size = 0;

  // repeated .caffe.BlobShape shape = 1;
  total_size += 1 * this->shape_size();
  for (int i = 0; i < this->shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InputParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InputParameter)
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  shape_.MergeFrom(from.shape_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {

  return true;
}

void InputParameter::Swap(InputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputParameter::InternalSwap(InputParameter* other) {
  shape_.UnsafeArenaSwap(&other->shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputParameter_descriptor_;
  metadata.reflection = InputParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputParameter

// repeated .caffe.BlobShape shape = 1;
int InputParameter::shape_size() const {
  return shape_.size();
}
void InputParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogParameter::kBaseFieldNumber;
const int LogParameter::kScaleFieldNumber;
const int LogParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogParameter::LogParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LogParameter)
}

void LogParameter::InitAsDefaultInstance() {
}

LogParameter::LogParameter(const LogParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LogParameter)
}

void LogParameter::SharedCtor() {
  _cached_size_ = 0;
  base_ = -1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogParameter::~LogParameter() {
  // @@protoc_insertion_point(destructor:caffe.LogParameter)
  SharedDtor();
}

void LogParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogParameter_descriptor_;
}

const LogParameter& LogParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LogParameter* LogParameter::default_instance_ = NULL;

LogParameter* LogParameter::New(::google::protobuf::Arena* arena) const {
  LogParameter* n = new LogParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LogParameter)
  if (_has_bits_[0 / 32] & 7u) {
    base_ = -1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LogParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LogParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LogParameter)
  return false;
#undef DO_
}

void LogParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LogParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LogParameter)
}

::google::protobuf::uint8* LogParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LogParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LogParameter)
  return target;
}

int LogParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LogParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LogParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LogParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LogParameter)
    MergeFrom(*source);
  }
}

void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LogParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogParameter::CopyFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogParameter::IsInitialized() const {

  return true;
}

void LogParameter::Swap(LogParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogParameter::InternalSwap(LogParameter* other) {
  std::swap(base_, other->base_);
  std::swap(scale_, other->scale_);
  std::swap(shift_, other->shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogParameter_descriptor_;
  metadata.reflection = LogParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogParameter

// optional float base = 1 [default = -1];
bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
 float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
 void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
 void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
 float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
 void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_NormRegion_descriptor_;
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
const LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
const LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
const int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_Engine_descriptor_;
}
bool LRNParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_Engine LRNParameter::DEFAULT;
const LRNParameter_Engine LRNParameter::CAFFE;
const LRNParameter_Engine LRNParameter::CUDNN;
const LRNParameter_Engine LRNParameter::Engine_MIN;
const LRNParameter_Engine LRNParameter::Engine_MAX;
const int LRNParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kNormRegionFieldNumber;
const int LRNParameter::kKFieldNumber;
const int LRNParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRNParameter::LRNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LRNParameter)
}

void LRNParameter::InitAsDefaultInstance() {
}

LRNParameter::LRNParameter(const LRNParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LRNParameter)
}

void LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  norm_region_ = 0;
  k_ = 1;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:caffe.LRNParameter)
  SharedDtor();
}

void LRNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_descriptor_;
}

const LRNParameter& LRNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LRNParameter* LRNParameter::default_instance_ = NULL;

LRNParameter* LRNParameter::New(::google::protobuf::Arena* arena) const {
  LRNParameter* n = new LRNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LRNParameter)
  if (_has_bits_[0 / 32] & 63u) {
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    norm_region_ = 0;
    k_ = 1;
    engine_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LRNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_alpha;
        break;
      }

      // optional float alpha = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_beta;
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (tag == 29) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_norm_region;
        break;
      }

      // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (tag == 32) {
         parse_norm_region:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::caffe::LRNParameter_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_k;
        break;
      }

      // optional float k = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_engine;
        break;
      }

      // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::LRNParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LRNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LRNParameter)
  return false;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LRNParameter)
}

::google::protobuf::uint8* LRNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LRNParameter)
  return target;
}

int LRNParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LRNParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }

    // optional float k = 5 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

    // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LRNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LRNParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LRNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LRNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LRNParameter)
    MergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LRNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_norm_region()) {
      set_norm_region(from.norm_region());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {

  return true;
}

void LRNParameter::Swap(LRNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRNParameter::InternalSwap(LRNParameter* other) {
  std::swap(local_size_, other->local_size_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(norm_region_, other->norm_region_);
  std::swap(k_, other->k_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LRNParameter_descriptor_;
  metadata.reflection = LRNParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LRNParameter

// optional uint32 local_size = 1 [default = 5];
bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
 ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
 void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
 float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
 void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
 float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
 void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
 ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
 void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
 float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
 void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
 void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDataParameter::kBatchSizeFieldNumber;
const int MemoryDataParameter::kChannelsFieldNumber;
const int MemoryDataParameter::kHeightFieldNumber;
const int MemoryDataParameter::kWidthFieldNumber;
const int MemoryDataParameter::kTransposeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDataParameter::MemoryDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::InitAsDefaultInstance() {
}

MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::SharedCtor() {
  _cached_size_ = 0;
  batch_size_ = 0u;
  channels_ = 0u;
  height_ = 0u;
  width_ = 0u;
  transpose_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryDataParameter::~MemoryDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.MemoryDataParameter)
  SharedDtor();
}

void MemoryDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemoryDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryDataParameter_descriptor_;
}

const MemoryDataParameter& MemoryDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

MemoryDataParameter* MemoryDataParameter::default_instance_ = NULL;

MemoryDataParameter* MemoryDataParameter::New(::google::protobuf::Arena* arena) const {
  MemoryDataParameter* n = new MemoryDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MemoryDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MemoryDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemoryDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(batch_size_, transpose_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MemoryDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MemoryDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transpose;
        break;
      }

      // optional bool transpose = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_transpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
          set_has_transpose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MemoryDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MemoryDataParameter)
  return false;
#undef DO_
}

void MemoryDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MemoryDataParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional bool transpose = 5 [default = false];
  if (has_transpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->transpose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MemoryDataParameter)
}

::google::protobuf::uint8* MemoryDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MemoryDataParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional bool transpose = 5 [default = false];
  if (has_transpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->transpose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MemoryDataParameter)
  return target;
}

int MemoryDataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MemoryDataParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional bool transpose = 5 [default = false];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MemoryDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemoryDataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MemoryDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MemoryDataParameter)
    MergeFrom(*source);
  }
}

void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MemoryDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_transpose()) {
      set_transpose(from.transpose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MemoryDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {

  return true;
}

void MemoryDataParameter::Swap(MemoryDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
  std::swap(batch_size_, other->batch_size_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(transpose_, other->transpose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryDataParameter_descriptor_;
  metadata.reflection = MemoryDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryDataParameter

// optional uint32 batch_size = 1;
bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
 ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
 void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
 ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
 void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
 void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
 ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
 void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

// optional bool transpose = 5 [default = false];
bool MemoryDataParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MemoryDataParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000010u;
}
void MemoryDataParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000010u;
}
void MemoryDataParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
 bool MemoryDataParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.transpose)
  return transpose_;
}
 void MemoryDataParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.transpose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVNParameter::kNormalizeVarianceFieldNumber;
const int MVNParameter::kAcrossChannelsFieldNumber;
const int MVNParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVNParameter::MVNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MVNParameter)
}

void MVNParameter::InitAsDefaultInstance() {
}

MVNParameter::MVNParameter(const MVNParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MVNParameter)
}

void MVNParameter::SharedCtor() {
  _cached_size_ = 0;
  normalize_variance_ = true;
  across_channels_ = false;
  eps_ = 1e-09f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVNParameter::~MVNParameter() {
  // @@protoc_insertion_point(destructor:caffe.MVNParameter)
  SharedDtor();
}

void MVNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVNParameter_descriptor_;
}

const MVNParameter& MVNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

MVNParameter* MVNParameter::default_instance_ = NULL;

MVNParameter* MVNParameter::New(::google::protobuf::Arena* arena) const {
  MVNParameter* n = new MVNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MVNParameter)
  if (_has_bits_[0 / 32] & 7u) {
    normalize_variance_ = true;
    across_channels_ = false;
    eps_ = 1e-09f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MVNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool normalize_variance = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_variance_)));
          set_has_normalize_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_across_channels;
        break;
      }

      // optional bool across_channels = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_across_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &across_channels_)));
          set_has_across_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eps;
        break;
      }

      // optional float eps = 3 [default = 1e-09];
      case 3: {
        if (tag == 29) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MVNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MVNParameter)
  return false;
#undef DO_
}

void MVNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MVNParameter)
  // optional bool normalize_variance = 1 [default = true];
  if (has_normalize_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalize_variance(), output);
  }

  // optional bool across_channels = 2 [default = false];
  if (has_across_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->across_channels(), output);
  }

  // optional float eps = 3 [default = 1e-09];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MVNParameter)
}

::google::protobuf::uint8* MVNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MVNParameter)
  // optional bool normalize_variance = 1 [default = true];
  if (has_normalize_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (has_across_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-09];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MVNParameter)
  return target;
}

int MVNParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MVNParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool normalize_variance = 1 [default = true];
    if (has_normalize_variance()) {
      total_size += 1 + 1;
    }

    // optional bool across_channels = 2 [default = false];
    if (has_across_channels()) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-09];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MVNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MVNParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MVNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MVNParameter)
    MergeFrom(*source);
  }
}

void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MVNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normalize_variance()) {
      set_normalize_variance(from.normalize_variance());
    }
    if (from.has_across_channels()) {
      set_across_channels(from.across_channels());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVNParameter::IsInitialized() const {

  return true;
}

void MVNParameter::Swap(MVNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVNParameter::InternalSwap(MVNParameter* other) {
  std::swap(normalize_variance_, other->normalize_variance_);
  std::swap(across_channels_, other->across_channels_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVNParameter_descriptor_;
  metadata.reflection = MVNParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVNParameter

// optional bool normalize_variance = 1 [default = true];
bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000001u;
}
void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
 bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
 void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
 bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
 void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
 float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
 void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterParameter::kShapeFieldNumber;
const int ParameterParameter::kBlobFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterParameter::ParameterParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParameterParameter)
}

void ParameterParameter::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(&::caffe::BlobShape::default_instance());
  blob_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

ParameterParameter::ParameterParameter(const ParameterParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ParameterParameter)
}

void ParameterParameter::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  blob_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParameterParameter::~ParameterParameter() {
  // @@protoc_insertion_point(destructor:caffe.ParameterParameter)
  SharedDtor();
}

void ParameterParameter::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
    delete blob_filler_;
  }
}

void ParameterParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterParameter_descriptor_;
}

const ParameterParameter& ParameterParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ParameterParameter* ParameterParameter::default_instance_ = NULL;

ParameterParameter* ParameterParameter::New(::google::protobuf::Arena* arena) const {
  ParameterParameter* n = new ParameterParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParameterParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_shape()) {
      if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
    }
    if (has_blob_filler()) {
      if (blob_filler_ != NULL) blob_filler_->::caffe::FillerParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ParameterParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParameterParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blob_filler;
        break;
      }

      // optional .caffe.FillerParameter blob_filler = 2;
      case 2: {
        if (tag == 18) {
         parse_blob_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blob_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParameterParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParameterParameter)
  return false;
#undef DO_
}

void ParameterParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParameterParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // optional .caffe.FillerParameter blob_filler = 2;
  if (has_blob_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->blob_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParameterParameter)
}

::google::protobuf::uint8* ParameterParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParameterParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->shape_, target);
  }

  // optional .caffe.FillerParameter blob_filler = 2;
  if (has_blob_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->blob_filler_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParameterParameter)
  return target;
}

int ParameterParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParameterParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional .caffe.FillerParameter blob_filler = 2;
    if (has_blob_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blob_filler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParameterParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ParameterParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParameterParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParameterParameter)
    MergeFrom(*source);
  }
}

void ParameterParameter::MergeFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParameterParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_blob_filler()) {
      mutable_blob_filler()->::caffe::FillerParameter::MergeFrom(from.blob_filler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ParameterParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParameterParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterParameter::CopyFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParameterParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterParameter::IsInitialized() const {

  return true;
}

void ParameterParameter::Swap(ParameterParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterParameter::InternalSwap(ParameterParameter* other) {
  std::swap(shape_, other->shape_);
  std::swap(blob_filler_, other->blob_filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterParameter_descriptor_;
  metadata.reflection = ParameterParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterParameter

// optional .caffe.BlobShape shape = 1;
bool ParameterParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParameterParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void ParameterParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParameterParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& ParameterParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
::caffe::BlobShape* ParameterParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.shape)
  return shape_;
}
::caffe::BlobShape* ParameterParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ParameterParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ParameterParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.shape)
}

// optional .caffe.FillerParameter blob_filler = 2;
bool ParameterParameter::has_blob_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParameterParameter::set_has_blob_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void ParameterParameter::clear_has_blob_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParameterParameter::clear_blob_filler() {
  if (blob_filler_ != NULL) blob_filler_->::caffe::FillerParameter::Clear();
  clear_has_blob_filler();
}
const ::caffe::FillerParameter& ParameterParameter::blob_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.blob_filler)
  return blob_filler_ != NULL ? *blob_filler_ : *default_instance_->blob_filler_;
}
::caffe::FillerParameter* ParameterParameter::mutable_blob_filler() {
  set_has_blob_filler();
  if (blob_filler_ == NULL) {
    blob_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.blob_filler)
  return blob_filler_;
}
::caffe::FillerParameter* ParameterParameter::release_blob_filler() {
  // @@protoc_insertion_point(field_release:caffe.ParameterParameter.blob_filler)
  clear_has_blob_filler();
  ::caffe::FillerParameter* temp = blob_filler_;
  blob_filler_ = NULL;
  return temp;
}
void ParameterParameter::set_allocated_blob_filler(::caffe::FillerParameter* blob_filler) {
  delete blob_filler_;
  blob_filler_ = blob_filler;
  if (blob_filler) {
    set_has_blob_filler();
  } else {
    clear_has_blob_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.blob_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_PoolMethod_descriptor_;
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_PoolMethod PoolingParameter::MAX;
const PoolingParameter_PoolMethod PoolingParameter::AVE;
const PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
const PoolingParameter_PoolMethod PoolingParameter::DEF;
const PoolingParameter_PoolMethod PoolingParameter::DEF_ALL;
const PoolingParameter_PoolMethod PoolingParameter::DEF_ALL2;
const PoolingParameter_PoolMethod PoolingParameter::DEF_ALL3;
const PoolingParameter_PoolMethod PoolingParameter::DEF_ALL4;
const PoolingParameter_PoolMethod PoolingParameter::LOWRES;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
const int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_Engine_descriptor_;
}
bool PoolingParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_Engine PoolingParameter::DEFAULT;
const PoolingParameter_Engine PoolingParameter::CAFFE;
const PoolingParameter_Engine PoolingParameter::CUDNN;
const PoolingParameter_Engine PoolingParameter::Engine_MIN;
const PoolingParameter_Engine PoolingParameter::Engine_MAX;
const int PoolingParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kPadHFieldNumber;
const int PoolingParameter::kPadWFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kKernelHFieldNumber;
const int PoolingParameter::kKernelWFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kStrideHFieldNumber;
const int PoolingParameter::kStrideWFieldNumber;
const int PoolingParameter::kEngineFieldNumber;
const int PoolingParameter::kGlobalPoolingFieldNumber;
const int PoolingParameter::kBlobsLrFieldNumber;
const int PoolingParameter::kBlobsAMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PoolingParameter)
}

void PoolingParameter::InitAsDefaultInstance() {
}

PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  pool_ = 0;
  pad_ = 0u;
  pad_h_ = 0u;
  pad_w_ = 0u;
  kernel_size_ = 0u;
  kernel_h_ = 0u;
  kernel_w_ = 0u;
  stride_ = 1u;
  stride_h_ = 0u;
  stride_w_ = 0u;
  engine_ = 0;
  global_pooling_ = false;
  blobs_lr_ = 0;
  blobs_a_min_ = 0.0001f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_descriptor_;
}

const PoolingParameter& PoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PoolingParameter* PoolingParameter::default_instance_ = NULL;

PoolingParameter* PoolingParameter::New(::google::protobuf::Arena* arena) const {
  PoolingParameter* n = new PoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PoolingParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PoolingParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PoolingParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(pool_, kernel_w_);
    stride_ = 1u;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(stride_h_, blobs_lr_);
    blobs_a_min_ = 0.0001f;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::PoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kernel_size;
        break;
      }

      // optional uint32 kernel_size = 2;
      case 2: {
        if (tag == 16) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kernel_h;
        break;
      }

      // optional uint32 kernel_h = 5;
      case 5: {
        if (tag == 40) {
         parse_kernel_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
          set_has_kernel_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kernel_w;
        break;
      }

      // optional uint32 kernel_w = 6;
      case 6: {
        if (tag == 48) {
         parse_kernel_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
          set_has_kernel_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 7;
      case 7: {
        if (tag == 56) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 8;
      case 8: {
        if (tag == 64) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_engine;
        break;
      }

      // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      case 11: {
        if (tag == 88) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::PoolingParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_global_pooling;
        break;
      }

      // optional bool global_pooling = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_global_pooling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pooling_)));
          set_has_global_pooling();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_blobs_lr;
        break;
      }

      // optional float blobs_lr = 13;
      case 13: {
        if (tag == 109) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blobs_lr_)));
          set_has_blobs_lr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_blobs_a_min;
        break;
      }

      // optional float blobs_a_min = 14 [default = 0.0001];
      case 14: {
        if (tag == 117) {
         parse_blobs_a_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blobs_a_min_)));
          set_has_blobs_a_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PoolingParameter)
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad(), output);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_h(), output);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stride_w(), output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->engine(), output);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->global_pooling(), output);
  }

  // optional float blobs_lr = 13;
  if (has_blobs_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->blobs_lr(), output);
  }

  // optional float blobs_a_min = 14 [default = 0.0001];
  if (has_blobs_a_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->blobs_a_min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingParameter)
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->global_pooling(), target);
  }

  // optional float blobs_lr = 13;
  if (has_blobs_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->blobs_lr(), target);
  }

  // optional float blobs_a_min = 14 [default = 0.0001];
  if (has_blobs_a_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->blobs_a_min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingParameter)
  return target;
}

int PoolingParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PoolingParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 pad = 4 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 kernel_h = 5;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 6;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride = 3 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 stride_h = 7;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 8;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (has_global_pooling()) {
      total_size += 1 + 1;
    }

    // optional float blobs_lr = 13;
    if (has_blobs_lr()) {
      total_size += 1 + 4;
    }

    // optional float blobs_a_min = 14 [default = 0.0001];
    if (has_blobs_a_min()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PoolingParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PoolingParameter)
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_global_pooling()) {
      set_global_pooling(from.global_pooling());
    }
    if (from.has_blobs_lr()) {
      set_blobs_lr(from.blobs_lr());
    }
    if (from.has_blobs_a_min()) {
      set_blobs_a_min(from.blobs_a_min());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {

  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParameter::InternalSwap(PoolingParameter* other) {
  std::swap(pool_, other->pool_);
  std::swap(pad_, other->pad_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_, other->stride_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(engine_, other->engine_);
  std::swap(global_pooling_, other->global_pooling_);
  std::swap(blobs_lr_, other->blobs_lr_);
  std::swap(blobs_a_min_, other->blobs_a_min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolingParameter_descriptor_;
  metadata.reflection = PoolingParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
 ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
 void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
 ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
 void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
 ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
 void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
 ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
 void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
 ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
 void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
 ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
 void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
 ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
 void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
 ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
 void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
 ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
 void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
 ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
 void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
 void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
 bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
 void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

// optional float blobs_lr = 13;
bool PoolingParameter::has_blobs_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PoolingParameter::set_has_blobs_lr() {
  _has_bits_[0] |= 0x00001000u;
}
void PoolingParameter::clear_has_blobs_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
void PoolingParameter::clear_blobs_lr() {
  blobs_lr_ = 0;
  clear_has_blobs_lr();
}
 float PoolingParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.blobs_lr)
  return blobs_lr_;
}
 void PoolingParameter::set_blobs_lr(float value) {
  set_has_blobs_lr();
  blobs_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.blobs_lr)
}

// optional float blobs_a_min = 14 [default = 0.0001];
bool PoolingParameter::has_blobs_a_min() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PoolingParameter::set_has_blobs_a_min() {
  _has_bits_[0] |= 0x00002000u;
}
void PoolingParameter::clear_has_blobs_a_min() {
  _has_bits_[0] &= ~0x00002000u;
}
void PoolingParameter::clear_blobs_a_min() {
  blobs_a_min_ = 0.0001f;
  clear_has_blobs_a_min();
}
 float PoolingParameter::blobs_a_min() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.blobs_a_min)
  return blobs_a_min_;
}
 void PoolingParameter::set_blobs_a_min(float value) {
  set_has_blobs_a_min();
  blobs_a_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.blobs_a_min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerParameter::kPowerFieldNumber;
const int PowerParameter::kScaleFieldNumber;
const int PowerParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerParameter::PowerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PowerParameter)
}

void PowerParameter::InitAsDefaultInstance() {
}

PowerParameter::PowerParameter(const PowerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PowerParameter)
}

void PowerParameter::SharedCtor() {
  _cached_size_ = 0;
  power_ = 1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerParameter::~PowerParameter() {
  // @@protoc_insertion_point(destructor:caffe.PowerParameter)
  SharedDtor();
}

void PowerParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerParameter_descriptor_;
}

const PowerParameter& PowerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PowerParameter* PowerParameter::default_instance_ = NULL;

PowerParameter* PowerParameter::New(::google::protobuf::Arena* arena) const {
  PowerParameter* n = new PowerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PowerParameter)
  if (_has_bits_[0 / 32] & 7u) {
    power_ = 1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PowerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PowerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float power = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PowerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PowerParameter)
  return false;
#undef DO_
}

void PowerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PowerParameter)
}

::google::protobuf::uint8* PowerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PowerParameter)
  return target;
}

int PowerParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PowerParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float power = 1 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PowerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PowerParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PowerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PowerParameter)
    MergeFrom(*source);
  }
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PowerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {

  return true;
}

void PowerParameter::Swap(PowerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerParameter::InternalSwap(PowerParameter* other) {
  std::swap(power_, other->power_);
  std::swap(scale_, other->scale_);
  std::swap(shift_, other->shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerParameter_descriptor_;
  metadata.reflection = PowerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerParameter

// optional float power = 1 [default = 1];
bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
 float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
 void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
 void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
 float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
 void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PythonParameter::kModuleFieldNumber;
const int PythonParameter::kLayerFieldNumber;
const int PythonParameter::kParamStrFieldNumber;
const int PythonParameter::kShareInParallelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PythonParameter::PythonParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PythonParameter)
}

void PythonParameter::InitAsDefaultInstance() {
}

PythonParameter::PythonParameter(const PythonParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PythonParameter)
}

void PythonParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_in_parallel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PythonParameter::~PythonParameter() {
  // @@protoc_insertion_point(destructor:caffe.PythonParameter)
  SharedDtor();
}

void PythonParameter::SharedDtor() {
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PythonParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PythonParameter_descriptor_;
}

const PythonParameter& PythonParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PythonParameter* PythonParameter::default_instance_ = NULL;

PythonParameter* PythonParameter::New(::google::protobuf::Arena* arena) const {
  PythonParameter* n = new PythonParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PythonParameter)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_module()) {
      module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_layer()) {
      layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_param_str()) {
      param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    share_in_parallel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PythonParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PythonParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.module");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // optional string layer = 2;
      case 2: {
        if (tag == 18) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param_str;
        break;
      }

      // optional string param_str = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_param_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_str().data(), this->param_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.param_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_share_in_parallel;
        break;
      }

      // optional bool share_in_parallel = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_share_in_parallel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_in_parallel_)));
          set_has_share_in_parallel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PythonParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PythonParameter)
  return false;
#undef DO_
}

void PythonParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PythonParameter)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // optional string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_str(), output);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (has_share_in_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->share_in_parallel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PythonParameter)
}

::google::protobuf::uint8* PythonParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PythonParameter)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // optional string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_str(), target);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (has_share_in_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->share_in_parallel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PythonParameter)
  return target;
}

int PythonParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PythonParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional string layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer());
    }

    // optional string param_str = 3 [default = ""];
    if (has_param_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_str());
    }

    // optional bool share_in_parallel = 4 [default = false];
    if (has_share_in_parallel()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PythonParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PythonParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PythonParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PythonParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PythonParameter)
    MergeFrom(*source);
  }
}

void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PythonParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_has_module();
      module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
    }
    if (from.has_layer()) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (from.has_param_str()) {
      set_has_param_str();
      param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
    }
    if (from.has_share_in_parallel()) {
      set_share_in_parallel(from.share_in_parallel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PythonParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonParameter::IsInitialized() const {

  return true;
}

void PythonParameter::Swap(PythonParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PythonParameter::InternalSwap(PythonParameter* other) {
  module_.Swap(&other->module_);
  layer_.Swap(&other->layer_);
  param_str_.Swap(&other->param_str_);
  std::swap(share_in_parallel_, other->share_in_parallel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PythonParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PythonParameter_descriptor_;
  metadata.reflection = PythonParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PythonParameter

// optional string module = 1;
bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
 const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
 void PythonParameter::set_module(const char* value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
 void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
 ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
 const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
 void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
 void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
 ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
 const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
 void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
 void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
 ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
 bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
 void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecurrentParameter::kNumOutputFieldNumber;
const int RecurrentParameter::kWeightFillerFieldNumber;
const int RecurrentParameter::kBiasFillerFieldNumber;
const int RecurrentParameter::kDebugInfoFieldNumber;
const int RecurrentParameter::kExposeHiddenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecurrentParameter::RecurrentParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RecurrentParameter)
}

void RecurrentParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

RecurrentParameter::RecurrentParameter(const RecurrentParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.RecurrentParameter)
}

void RecurrentParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  debug_info_ = false;
  expose_hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecurrentParameter::~RecurrentParameter() {
  // @@protoc_insertion_point(destructor:caffe.RecurrentParameter)
  SharedDtor();
}

void RecurrentParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void RecurrentParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecurrentParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecurrentParameter_descriptor_;
}

const RecurrentParameter& RecurrentParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

RecurrentParameter* RecurrentParameter::default_instance_ = NULL;

RecurrentParameter* RecurrentParameter::New(::google::protobuf::Arena* arena) const {
  RecurrentParameter* n = new RecurrentParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RecurrentParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecurrentParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecurrentParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(num_output_, expose_hidden_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RecurrentParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RecurrentParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 2;
      case 2: {
        if (tag == 18) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_debug_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
          set_has_debug_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expose_hidden;
        break;
      }

      // optional bool expose_hidden = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_expose_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expose_hidden_)));
          set_has_expose_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RecurrentParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RecurrentParameter)
  return false;
#undef DO_
}

void RecurrentParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RecurrentParameter)
  // optional uint32 num_output = 1 [default = 0];
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bias_filler_, output);
  }

  // optional bool debug_info = 4 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->debug_info(), output);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (has_expose_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->expose_hidden(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RecurrentParameter)
}

::google::protobuf::uint8* RecurrentParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RecurrentParameter)
  // optional uint32 num_output = 1 [default = 0];
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->weight_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->bias_filler_, target);
  }

  // optional bool debug_info = 4 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->debug_info(), target);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (has_expose_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->expose_hidden(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RecurrentParameter)
  return target;
}

int RecurrentParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RecurrentParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 num_output = 1 [default = 0];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.FillerParameter weight_filler = 2;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 3;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional bool debug_info = 4 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

    // optional bool expose_hidden = 5 [default = false];
    if (has_expose_hidden()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecurrentParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RecurrentParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecurrentParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecurrentParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RecurrentParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RecurrentParameter)
    MergeFrom(*source);
  }
}

void RecurrentParameter::MergeFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RecurrentParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_expose_hidden()) {
      set_expose_hidden(from.expose_hidden());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RecurrentParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecurrentParameter::CopyFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecurrentParameter::IsInitialized() const {

  return true;
}

void RecurrentParameter::Swap(RecurrentParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecurrentParameter::InternalSwap(RecurrentParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(expose_hidden_, other->expose_hidden_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecurrentParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecurrentParameter_descriptor_;
  metadata.reflection = RecurrentParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
bool RecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void RecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.num_output)
  return num_output_;
}
 void RecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.num_output)
}

// optional .caffe.FillerParameter weight_filler = 2;
bool RecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void RecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& RecurrentParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* RecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* RecurrentParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void RecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 3;
bool RecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void RecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& RecurrentParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* RecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* RecurrentParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void RecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
bool RecurrentParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecurrentParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
void RecurrentParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecurrentParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
 bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.debug_info)
  return debug_info_;
}
 void RecurrentParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.debug_info)
}

// optional bool expose_hidden = 5 [default = false];
bool RecurrentParameter::has_expose_hidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RecurrentParameter::set_has_expose_hidden() {
  _has_bits_[0] |= 0x00000010u;
}
void RecurrentParameter::clear_has_expose_hidden() {
  _has_bits_[0] &= ~0x00000010u;
}
void RecurrentParameter::clear_expose_hidden() {
  expose_hidden_ = false;
  clear_has_expose_hidden();
}
 bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.expose_hidden)
  return expose_hidden_;
}
 void RecurrentParameter::set_expose_hidden(bool value) {
  set_has_expose_hidden();
  expose_hidden_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.expose_hidden)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReductionParameter_ReductionOp_descriptor_;
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReductionParameter_ReductionOp ReductionParameter::SUM;
const ReductionParameter_ReductionOp ReductionParameter::ASUM;
const ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
const ReductionParameter_ReductionOp ReductionParameter::MEAN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
const int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReductionParameter::kOperationFieldNumber;
const int ReductionParameter::kAxisFieldNumber;
const int ReductionParameter::kCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReductionParameter::ReductionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReductionParameter)
}

void ReductionParameter::InitAsDefaultInstance() {
}

ReductionParameter::ReductionParameter(const ReductionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReductionParameter)
}

void ReductionParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  axis_ = 0;
  coeff_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReductionParameter::~ReductionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReductionParameter)
  SharedDtor();
}

void ReductionParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReductionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReductionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReductionParameter_descriptor_;
}

const ReductionParameter& ReductionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ReductionParameter* ReductionParameter::default_instance_ = NULL;

ReductionParameter* ReductionParameter::New(::google::protobuf::Arena* arena) const {
  ReductionParameter* n = new ReductionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReductionParameter)
  if (_has_bits_[0 / 32] & 7u) {
    operation_ = 1;
    axis_ = 0;
    coeff_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReductionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReductionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReductionParameter_ReductionOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::ReductionParameter_ReductionOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_coeff;
        break;
      }

      // optional float coeff = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_)));
          set_has_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReductionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReductionParameter)
  return false;
#undef DO_
}

void ReductionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReductionParameter)
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional float coeff = 3 [default = 1];
  if (has_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coeff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReductionParameter)
}

::google::protobuf::uint8* ReductionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReductionParameter)
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (has_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coeff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReductionParameter)
  return target;
}

int ReductionParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReductionParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float coeff = 3 [default = 1];
    if (has_coeff()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReductionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReductionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReductionParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReductionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReductionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReductionParameter)
    MergeFrom(*source);
  }
}

void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReductionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_coeff()) {
      set_coeff(from.coeff());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReductionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {

  return true;
}

void ReductionParameter::Swap(ReductionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReductionParameter::InternalSwap(ReductionParameter* other) {
  std::swap(operation_, other->operation_);
  std::swap(axis_, other->axis_);
  std::swap(coeff_, other->coeff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReductionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReductionParameter_descriptor_;
  metadata.reflection = ReductionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
 ::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
 void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
 ::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
 void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
 float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
 void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLUParameter_Engine_descriptor_;
}
bool ReLUParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReLUParameter_Engine ReLUParameter::DEFAULT;
const ReLUParameter_Engine ReLUParameter::CAFFE;
const ReLUParameter_Engine ReLUParameter::CUDNN;
const ReLUParameter_Engine ReLUParameter::Engine_MIN;
const ReLUParameter_Engine ReLUParameter::Engine_MAX;
const int ReLUParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLUParameter::kNegativeSlopeFieldNumber;
const int ReLUParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLUParameter::ReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReLUParameter)
}

void ReLUParameter::InitAsDefaultInstance() {
}

ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  negative_slope_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReLUParameter)
  SharedDtor();
}

void ReLUParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLUParameter_descriptor_;
}

const ReLUParameter& ReLUParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ReLUParameter* ReLUParameter::default_instance_ = NULL;

ReLUParameter* ReLUParameter::New(::google::protobuf::Arena* arena) const {
  ReLUParameter* n = new ReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReLUParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReLUParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReLUParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(negative_slope_, engine_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
          set_has_negative_slope();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_engine;
        break;
      }

      // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2: {
        if (tag == 16) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReLUParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ReLUParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReLUParameter)
  return false;
#undef DO_
}

void ReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReLUParameter)
}

::google::protobuf::uint8* ReLUParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUParameter)
  return target;
}

int ReLUParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReLUParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float negative_slope = 1 [default = 0];
    if (has_negative_slope()) {
      total_size += 1 + 4;
    }

    // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReLUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReLUParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReLUParameter)
    MergeFrom(*source);
  }
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReLUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative_slope()) {
      set_negative_slope(from.negative_slope());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {

  return true;
}

void ReLUParameter::Swap(ReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReLUParameter::InternalSwap(ReLUParameter* other) {
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReLUParameter_descriptor_;
  metadata.reflection = ReLUParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReLUParameter

// optional float negative_slope = 1 [default = 0];
bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
 float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
 void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
 void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReshapeParameter::kShapeFieldNumber;
const int ReshapeParameter::kAxisFieldNumber;
const int ReshapeParameter::kNumAxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReshapeParameter::ReshapeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(&::caffe::BlobShape::default_instance());
}

ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  axis_ = 0;
  num_axes_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReshapeParameter::~ReshapeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReshapeParameter)
  SharedDtor();
}

void ReshapeParameter::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void ReshapeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReshapeParameter_descriptor_;
}

const ReshapeParameter& ReshapeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ReshapeParameter* ReshapeParameter::default_instance_ = NULL;

ReshapeParameter* ReshapeParameter::New(::google::protobuf::Arena* arena) const {
  ReshapeParameter* n = new ReshapeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReshapeParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_shape()) {
      if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
    }
    axis_ = 0;
    num_axes_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReshapeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReshapeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_num_axes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
          set_has_num_axes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReshapeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReshapeParameter)
  return false;
#undef DO_
}

void ReshapeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReshapeParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_axes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReshapeParameter)
}

::google::protobuf::uint8* ReshapeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReshapeParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->shape_, target);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_axes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReshapeParameter)
  return target;
}

int ReshapeParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReshapeParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReshapeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReshapeParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReshapeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReshapeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReshapeParameter)
    MergeFrom(*source);
  }
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReshapeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReshapeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {

  return true;
}

void ReshapeParameter::Swap(ReshapeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
  std::swap(shape_, other->shape_);
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReshapeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReshapeParameter_descriptor_;
  metadata.reflection = ReshapeParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
 ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
 void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
 ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
 void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScaleParameter::kAxisFieldNumber;
const int ScaleParameter::kNumAxesFieldNumber;
const int ScaleParameter::kFillerFieldNumber;
const int ScaleParameter::kBiasTermFieldNumber;
const int ScaleParameter::kBiasFillerFieldNumber;
const int ScaleParameter::kMinValueFieldNumber;
const int ScaleParameter::kMaxValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScaleParameter::ScaleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ScaleParameter)
}

void ScaleParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

ScaleParameter::ScaleParameter(const ScaleParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ScaleParameter)
}

void ScaleParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  num_axes_ = 1;
  filler_ = NULL;
  bias_term_ = false;
  bias_filler_ = NULL;
  min_value_ = 0;
  max_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScaleParameter::~ScaleParameter() {
  // @@protoc_insertion_point(destructor:caffe.ScaleParameter)
  SharedDtor();
}

void ScaleParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filler_;
    delete bias_filler_;
  }
}

void ScaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScaleParameter_descriptor_;
}

const ScaleParameter& ScaleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ScaleParameter* ScaleParameter::default_instance_ = NULL;

ScaleParameter* ScaleParameter::New(::google::protobuf::Arena* arena) const {
  ScaleParameter* n = new ScaleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ScaleParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScaleParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScaleParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(bias_term_, max_value_);
    axis_ = 1;
    num_axes_ = 1;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ScaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_num_axes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
          set_has_num_axes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filler;
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (tag == 26) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_min_value;
        break;
      }

      // optional float min_value = 6;
      case 6: {
        if (tag == 53) {
         parse_min_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_value_)));
          set_has_min_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_max_value;
        break;
      }

      // optional float max_value = 7;
      case 7: {
        if (tag == 61) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ScaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ScaleParameter)
  return false;
#undef DO_
}

void ScaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ScaleParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  // optional bool bias_term = 4 [default = false];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  // optional float min_value = 6;
  if (has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min_value(), output);
  }

  // optional float max_value = 7;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ScaleParameter)
}

::google::protobuf::uint8* ScaleParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ScaleParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->filler_, target);
  }

  // optional bool bias_term = 4 [default = false];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->bias_filler_, target);
  }

  // optional float min_value = 6;
  if (has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min_value(), target);
  }

  // optional float max_value = 7;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ScaleParameter)
  return target;
}

int ScaleParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ScaleParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional bool bias_term = 4 [default = false];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional float min_value = 6;
    if (has_min_value()) {
      total_size += 1 + 4;
    }

    // optional float max_value = 7;
    if (has_max_value()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ScaleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScaleParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScaleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ScaleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ScaleParameter)
    MergeFrom(*source);
  }
}

void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ScaleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_min_value()) {
      set_min_value(from.min_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {

  return true;
}

void ScaleParameter::Swap(ScaleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScaleParameter::InternalSwap(ScaleParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(filler_, other->filler_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(min_value_, other->min_value_);
  std::swap(max_value_, other->max_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScaleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScaleParameter_descriptor_;
  metadata.reflection = ScaleParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScaleParameter

// optional int32 axis = 1 [default = 1];
bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
 void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
 ::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
 void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
 bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
 void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

// optional float min_value = 6;
bool ScaleParameter::has_min_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ScaleParameter::set_has_min_value() {
  _has_bits_[0] |= 0x00000020u;
}
void ScaleParameter::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void ScaleParameter::clear_min_value() {
  min_value_ = 0;
  clear_has_min_value();
}
 float ScaleParameter::min_value() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.min_value)
  return min_value_;
}
 void ScaleParameter::set_min_value(float value) {
  set_has_min_value();
  min_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.min_value)
}

// optional float max_value = 7;
bool ScaleParameter::has_max_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ScaleParameter::set_has_max_value() {
  _has_bits_[0] |= 0x00000040u;
}
void ScaleParameter::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void ScaleParameter::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
 float ScaleParameter::max_value() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.max_value)
  return max_value_;
}
 void ScaleParameter::set_max_value(float value) {
  set_has_max_value();
  max_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.max_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParameter_Engine_descriptor_;
}
bool SigmoidParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SigmoidParameter_Engine SigmoidParameter::DEFAULT;
const SigmoidParameter_Engine SigmoidParameter::CAFFE;
const SigmoidParameter_Engine SigmoidParameter::CUDNN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
const int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidParameter::SigmoidParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::InitAsDefaultInstance() {
}

SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:caffe.SigmoidParameter)
  SharedDtor();
}

void SigmoidParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SigmoidParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParameter_descriptor_;
}

const SigmoidParameter& SigmoidParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SigmoidParameter* SigmoidParameter::default_instance_ = NULL;

SigmoidParameter* SigmoidParameter::New(::google::protobuf::Arena* arena) const {
  SigmoidParameter* n = new SigmoidParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SigmoidParameter)
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SigmoidParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SigmoidParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SigmoidParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SigmoidParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SigmoidParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SigmoidParameter)
  return false;
#undef DO_
}

void SigmoidParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SigmoidParameter)
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SigmoidParameter)
}

::google::protobuf::uint8* SigmoidParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SigmoidParameter)
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SigmoidParameter)
  return target;
}

int SigmoidParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SigmoidParameter)
  int total_size = 0;

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SigmoidParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SigmoidParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SigmoidParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SigmoidParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SigmoidParameter)
    MergeFrom(*source);
  }
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SigmoidParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {

  return true;
}

void SigmoidParameter::Swap(SigmoidParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigmoidParameter_descriptor_;
  metadata.reflection = SigmoidParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
 void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SliceParameter::kAxisFieldNumber;
const int SliceParameter::kSlicePointFieldNumber;
const int SliceParameter::kSliceDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SliceParameter::SliceParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SliceParameter)
}

void SliceParameter::InitAsDefaultInstance() {
}

SliceParameter::SliceParameter(const SliceParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SliceParameter)
}

void SliceParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  slice_dim_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SliceParameter::~SliceParameter() {
  // @@protoc_insertion_point(destructor:caffe.SliceParameter)
  SharedDtor();
}

void SliceParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SliceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliceParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SliceParameter_descriptor_;
}

const SliceParameter& SliceParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SliceParameter* SliceParameter::default_instance_ = NULL;

SliceParameter* SliceParameter::New(::google::protobuf::Arena* arena) const {
  SliceParameter* n = new SliceParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SliceParameter)
  if (_has_bits_[0 / 32] & 5u) {
    axis_ = 1;
    slice_dim_ = 1u;
  }
  slice_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SliceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SliceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_dim_)));
          set_has_slice_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        break;
      }

      // repeated uint32 slice_point = 2;
      case 2: {
        if (tag == 16) {
         parse_slice_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_slice_point())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slice_point())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        if (input->ExpectTag(24)) goto parse_axis;
        break;
      }

      // optional int32 axis = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SliceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SliceParameter)
  return false;
#undef DO_
}

void SliceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SliceParameter)
  // optional uint32 slice_dim = 1 [default = 1];
  if (has_slice_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slice_dim(), output);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->slice_point(i), output);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SliceParameter)
}

::google::protobuf::uint8* SliceParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SliceParameter)
  // optional uint32 slice_dim = 1 [default = 1];
  if (has_slice_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->slice_point(i), target);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SliceParameter)
  return target;
}

int SliceParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SliceParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 axis = 3 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 slice_dim = 1 [default = 1];
    if (has_slice_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_dim());
    }

  }
  // repeated uint32 slice_point = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->slice_point_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->slice_point(i));
    }
    total_size += 1 * this->slice_point_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliceParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SliceParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SliceParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SliceParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SliceParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SliceParameter)
    MergeFrom(*source);
  }
}

void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SliceParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  slice_point_.MergeFrom(from.slice_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_slice_dim()) {
      set_slice_dim(from.slice_dim());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SliceParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceParameter::IsInitialized() const {

  return true;
}

void SliceParameter::Swap(SliceParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SliceParameter::InternalSwap(SliceParameter* other) {
  std::swap(axis_, other->axis_);
  slice_point_.UnsafeArenaSwap(&other->slice_point_);
  std::swap(slice_dim_, other->slice_dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SliceParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SliceParameter_descriptor_;
  metadata.reflection = SliceParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SliceParameter

// optional int32 axis = 3 [default = 1];
bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
 void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
 ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
 void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
 void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
 ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
 void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_Engine_descriptor_;
}
bool SoftmaxParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
const SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
const int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* SoftmaxParameter::_default_normalize_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxParameter::kEngineFieldNumber;
const int SoftmaxParameter::kAxisFieldNumber;
const int SoftmaxParameter::kHardRatioFieldNumber;
const int SoftmaxParameter::kClassWeightFieldNumber;
const int SoftmaxParameter::kHardMiningLabelFieldNumber;
const int SoftmaxParameter::kCuttingPointFieldNumber;
const int SoftmaxParameter::kNormalizeTypeFieldNumber;
const int SoftmaxParameter::kLabelSmoothFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::InitAsDefaultInstance() {
}

SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  engine_ = 0;
  axis_ = 1;
  hard_ratio_ = 1;
  hard_mining_label_ = 0;
  cutting_point_ = 0;
  normalize_type_.UnsafeSetDefault(_default_normalize_type_);
  label_smooth_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
  normalize_type_.DestroyNoArena(_default_normalize_type_);
  if (this != default_instance_) {
  }
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_descriptor_;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SoftmaxParameter* SoftmaxParameter::default_instance_ = NULL;

SoftmaxParameter* SoftmaxParameter::New(::google::protobuf::Arena* arena) const {
  SoftmaxParameter* n = new SoftmaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftmaxParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SoftmaxParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SoftmaxParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247u) {
    ZR_(cutting_point_, label_smooth_factor_);
    engine_ = 0;
    axis_ = 1;
    hard_ratio_ = 1;
    hard_mining_label_ = 0;
    if (has_normalize_type()) {
      normalize_type_.ClearToDefaultNoArena(_default_normalize_type_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  class_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SoftmaxParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SoftmaxParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_hard_ratio;
        break;
      }

      // optional float hard_ratio = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_hard_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hard_ratio_)));
          set_has_hard_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_class_weight;
        break;
      }

      // repeated float class_weight = 4;
      case 4: {
        if (tag == 37) {
         parse_class_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_class_weight())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_class_weight;
        if (input->ExpectTag(40)) goto parse_hard_mining_label;
        break;
      }

      // optional int32 hard_mining_label = 5;
      case 5: {
        if (tag == 40) {
         parse_hard_mining_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hard_mining_label_)));
          set_has_hard_mining_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cutting_point;
        break;
      }

      // optional float cutting_point = 6;
      case 6: {
        if (tag == 53) {
         parse_cutting_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cutting_point_)));
          set_has_cutting_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_normalize_type;
        break;
      }

      // optional string normalize_type = 7 [default = "Softmax"];
      case 7: {
        if (tag == 58) {
         parse_normalize_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalize_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normalize_type().data(), this->normalize_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SoftmaxParameter.normalize_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_label_smooth_factor;
        break;
      }

      // optional float label_smooth_factor = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_label_smooth_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &label_smooth_factor_)));
          set_has_label_smooth_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftmaxParameter)
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional float hard_ratio = 3 [default = 1];
  if (has_hard_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->hard_ratio(), output);
  }

  // repeated float class_weight = 4;
  for (int i = 0; i < this->class_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->class_weight(i), output);
  }

  // optional int32 hard_mining_label = 5;
  if (has_hard_mining_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hard_mining_label(), output);
  }

  // optional float cutting_point = 6;
  if (has_cutting_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cutting_point(), output);
  }

  // optional string normalize_type = 7 [default = "Softmax"];
  if (has_normalize_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalize_type().data(), this->normalize_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SoftmaxParameter.normalize_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->normalize_type(), output);
  }

  // optional float label_smooth_factor = 8 [default = 0];
  if (has_label_smooth_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->label_smooth_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftmaxParameter)
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional float hard_ratio = 3 [default = 1];
  if (has_hard_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->hard_ratio(), target);
  }

  // repeated float class_weight = 4;
  for (int i = 0; i < this->class_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->class_weight(i), target);
  }

  // optional int32 hard_mining_label = 5;
  if (has_hard_mining_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hard_mining_label(), target);
  }

  // optional float cutting_point = 6;
  if (has_cutting_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cutting_point(), target);
  }

  // optional string normalize_type = 7 [default = "Softmax"];
  if (has_normalize_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalize_type().data(), this->normalize_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SoftmaxParameter.normalize_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->normalize_type(), target);
  }

  // optional float label_smooth_factor = 8 [default = 0];
  if (has_label_smooth_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->label_smooth_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftmaxParameter)
  return target;
}

int SoftmaxParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftmaxParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 247u) {
    // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float hard_ratio = 3 [default = 1];
    if (has_hard_ratio()) {
      total_size += 1 + 4;
    }

    // optional int32 hard_mining_label = 5;
    if (has_hard_mining_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hard_mining_label());
    }

    // optional float cutting_point = 6;
    if (has_cutting_point()) {
      total_size += 1 + 4;
    }

    // optional string normalize_type = 7 [default = "Softmax"];
    if (has_normalize_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalize_type());
    }

    // optional float label_smooth_factor = 8 [default = 0];
    if (has_label_smooth_factor()) {
      total_size += 1 + 4;
    }

  }
  // repeated float class_weight = 4;
  {
    int data_size = 0;
    data_size = 4 * this->class_weight_size();
    total_size += 1 * this->class_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftmaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SoftmaxParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftmaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftmaxParameter)
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftmaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  class_weight_.MergeFrom(from.class_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_hard_ratio()) {
      set_hard_ratio(from.hard_ratio());
    }
    if (from.has_hard_mining_label()) {
      set_hard_mining_label(from.hard_mining_label());
    }
    if (from.has_cutting_point()) {
      set_cutting_point(from.cutting_point());
    }
    if (from.has_normalize_type()) {
      set_has_normalize_type();
      normalize_type_.AssignWithDefault(_default_normalize_type_, from.normalize_type_);
    }
    if (from.has_label_smooth_factor()) {
      set_label_smooth_factor(from.label_smooth_factor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {

  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(axis_, other->axis_);
  std::swap(hard_ratio_, other->hard_ratio_);
  class_weight_.UnsafeArenaSwap(&other->class_weight_);
  std::swap(hard_mining_label_, other->hard_mining_label_);
  std::swap(cutting_point_, other->cutting_point_);
  normalize_type_.Swap(&other->normalize_type_);
  std::swap(label_smooth_factor_, other->label_smooth_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftmaxParameter_descriptor_;
  metadata.reflection = SoftmaxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
 void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
 void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

// optional float hard_ratio = 3 [default = 1];
bool SoftmaxParameter::has_hard_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SoftmaxParameter::set_has_hard_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void SoftmaxParameter::clear_has_hard_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void SoftmaxParameter::clear_hard_ratio() {
  hard_ratio_ = 1;
  clear_has_hard_ratio();
}
 float SoftmaxParameter::hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.hard_ratio)
  return hard_ratio_;
}
 void SoftmaxParameter::set_hard_ratio(float value) {
  set_has_hard_ratio();
  hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.hard_ratio)
}

// repeated float class_weight = 4;
int SoftmaxParameter::class_weight_size() const {
  return class_weight_.size();
}
void SoftmaxParameter::clear_class_weight() {
  class_weight_.Clear();
}
 float SoftmaxParameter::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.class_weight)
  return class_weight_.Get(index);
}
 void SoftmaxParameter::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.class_weight)
}
 void SoftmaxParameter::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SoftmaxParameter.class_weight)
}
 const ::google::protobuf::RepeatedField< float >&
SoftmaxParameter::class_weight() const {
  // @@protoc_insertion_point(field_list:caffe.SoftmaxParameter.class_weight)
  return class_weight_;
}
 ::google::protobuf::RepeatedField< float >*
SoftmaxParameter::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SoftmaxParameter.class_weight)
  return &class_weight_;
}

// optional int32 hard_mining_label = 5;
bool SoftmaxParameter::has_hard_mining_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SoftmaxParameter::set_has_hard_mining_label() {
  _has_bits_[0] |= 0x00000010u;
}
void SoftmaxParameter::clear_has_hard_mining_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void SoftmaxParameter::clear_hard_mining_label() {
  hard_mining_label_ = 0;
  clear_has_hard_mining_label();
}
 ::google::protobuf::int32 SoftmaxParameter::hard_mining_label() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.hard_mining_label)
  return hard_mining_label_;
}
 void SoftmaxParameter::set_hard_mining_label(::google::protobuf::int32 value) {
  set_has_hard_mining_label();
  hard_mining_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.hard_mining_label)
}

// optional float cutting_point = 6;
bool SoftmaxParameter::has_cutting_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SoftmaxParameter::set_has_cutting_point() {
  _has_bits_[0] |= 0x00000020u;
}
void SoftmaxParameter::clear_has_cutting_point() {
  _has_bits_[0] &= ~0x00000020u;
}
void SoftmaxParameter::clear_cutting_point() {
  cutting_point_ = 0;
  clear_has_cutting_point();
}
 float SoftmaxParameter::cutting_point() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.cutting_point)
  return cutting_point_;
}
 void SoftmaxParameter::set_cutting_point(float value) {
  set_has_cutting_point();
  cutting_point_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.cutting_point)
}

// optional string normalize_type = 7 [default = "Softmax"];
bool SoftmaxParameter::has_normalize_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SoftmaxParameter::set_has_normalize_type() {
  _has_bits_[0] |= 0x00000040u;
}
void SoftmaxParameter::clear_has_normalize_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void SoftmaxParameter::clear_normalize_type() {
  normalize_type_.ClearToDefaultNoArena(_default_normalize_type_);
  clear_has_normalize_type();
}
 const ::std::string& SoftmaxParameter::normalize_type() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.normalize_type)
  return normalize_type_.GetNoArena(_default_normalize_type_);
}
 void SoftmaxParameter::set_normalize_type(const ::std::string& value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(_default_normalize_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.normalize_type)
}
 void SoftmaxParameter::set_normalize_type(const char* value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(_default_normalize_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SoftmaxParameter.normalize_type)
}
 void SoftmaxParameter::set_normalize_type(const char* value, size_t size) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(_default_normalize_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SoftmaxParameter.normalize_type)
}
 ::std::string* SoftmaxParameter::mutable_normalize_type() {
  set_has_normalize_type();
  // @@protoc_insertion_point(field_mutable:caffe.SoftmaxParameter.normalize_type)
  return normalize_type_.MutableNoArena(_default_normalize_type_);
}
 ::std::string* SoftmaxParameter::release_normalize_type() {
  // @@protoc_insertion_point(field_release:caffe.SoftmaxParameter.normalize_type)
  clear_has_normalize_type();
  return normalize_type_.ReleaseNoArena(_default_normalize_type_);
}
 void SoftmaxParameter::set_allocated_normalize_type(::std::string* normalize_type) {
  if (normalize_type != NULL) {
    set_has_normalize_type();
  } else {
    clear_has_normalize_type();
  }
  normalize_type_.SetAllocatedNoArena(_default_normalize_type_, normalize_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SoftmaxParameter.normalize_type)
}

// optional float label_smooth_factor = 8 [default = 0];
bool SoftmaxParameter::has_label_smooth_factor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SoftmaxParameter::set_has_label_smooth_factor() {
  _has_bits_[0] |= 0x00000080u;
}
void SoftmaxParameter::clear_has_label_smooth_factor() {
  _has_bits_[0] &= ~0x00000080u;
}
void SoftmaxParameter::clear_label_smooth_factor() {
  label_smooth_factor_ = 0;
  clear_has_label_smooth_factor();
}
 float SoftmaxParameter::label_smooth_factor() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.label_smooth_factor)
  return label_smooth_factor_;
}
 void SoftmaxParameter::set_label_smooth_factor(float value) {
  set_has_label_smooth_factor();
  label_smooth_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.label_smooth_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TanHParameter_Engine_descriptor_;
}
bool TanHParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TanHParameter_Engine TanHParameter::DEFAULT;
const TanHParameter_Engine TanHParameter::CAFFE;
const TanHParameter_Engine TanHParameter::CUDNN;
const TanHParameter_Engine TanHParameter::Engine_MIN;
const TanHParameter_Engine TanHParameter::Engine_MAX;
const int TanHParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TanHParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TanHParameter::TanHParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TanHParameter)
}

void TanHParameter::InitAsDefaultInstance() {
}

TanHParameter::TanHParameter(const TanHParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TanHParameter)
}

void TanHParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TanHParameter::~TanHParameter() {
  // @@protoc_insertion_point(destructor:caffe.TanHParameter)
  SharedDtor();
}

void TanHParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TanHParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TanHParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TanHParameter_descriptor_;
}

const TanHParameter& TanHParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TanHParameter* TanHParameter::default_instance_ = NULL;

TanHParameter* TanHParameter::New(::google::protobuf::Arena* arena) const {
  TanHParameter* n = new TanHParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TanHParameter)
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TanHParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TanHParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TanHParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::TanHParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TanHParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TanHParameter)
  return false;
#undef DO_
}

void TanHParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TanHParameter)
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TanHParameter)
}

::google::protobuf::uint8* TanHParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TanHParameter)
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TanHParameter)
  return target;
}

int TanHParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TanHParameter)
  int total_size = 0;

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TanHParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TanHParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TanHParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TanHParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TanHParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TanHParameter)
    MergeFrom(*source);
  }
}

void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TanHParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TanHParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TanHParameter::IsInitialized() const {

  return true;
}

void TanHParameter::Swap(TanHParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TanHParameter::InternalSwap(TanHParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TanHParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TanHParameter_descriptor_;
  metadata.reflection = TanHParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
 void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileParameter::kAxisFieldNumber;
const int TileParameter::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileParameter::TileParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TileParameter)
}

void TileParameter::InitAsDefaultInstance() {
}

TileParameter::TileParameter(const TileParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TileParameter)
}

void TileParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  tiles_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileParameter::~TileParameter() {
  // @@protoc_insertion_point(destructor:caffe.TileParameter)
  SharedDtor();
}

void TileParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TileParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileParameter_descriptor_;
}

const TileParameter& TileParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TileParameter* TileParameter::default_instance_ = NULL;

TileParameter* TileParameter::New(::google::protobuf::Arena* arena) const {
  TileParameter* n = new TileParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TileParameter)
  if (_has_bits_[0 / 32] & 3u) {
    axis_ = 1;
    tiles_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TileParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TileParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tiles;
        break;
      }

      // optional int32 tiles = 2;
      case 2: {
        if (tag == 16) {
         parse_tiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiles_)));
          set_has_tiles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TileParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TileParameter)
  return false;
#undef DO_
}

void TileParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TileParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 tiles = 2;
  if (has_tiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tiles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TileParameter)
}

::google::protobuf::uint8* TileParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TileParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 tiles = 2;
  if (has_tiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tiles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TileParameter)
  return target;
}

int TileParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TileParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 tiles = 2;
    if (has_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiles());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TileParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TileParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TileParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TileParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TileParameter)
    MergeFrom(*source);
  }
}

void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TileParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_tiles()) {
      set_tiles(from.tiles());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TileParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileParameter::CopyFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileParameter::IsInitialized() const {

  return true;
}

void TileParameter::Swap(TileParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileParameter::InternalSwap(TileParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(tiles_, other->tiles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileParameter_descriptor_;
  metadata.reflection = TileParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileParameter

// optional int32 axis = 1 [default = 1];
bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
 void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
 ::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
 void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThresholdParameter::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThresholdParameter::ThresholdParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::InitAsDefaultInstance() {
}

ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::SharedCtor() {
  _cached_size_ = 0;
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThresholdParameter::~ThresholdParameter() {
  // @@protoc_insertion_point(destructor:caffe.ThresholdParameter)
  SharedDtor();
}

void ThresholdParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThresholdParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThresholdParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThresholdParameter_descriptor_;
}

const ThresholdParameter& ThresholdParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ThresholdParameter* ThresholdParameter::default_instance_ = NULL;

ThresholdParameter* ThresholdParameter::New(::google::protobuf::Arena* arena) const {
  ThresholdParameter* n = new ThresholdParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ThresholdParameter)
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ThresholdParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ThresholdParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float threshold = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ThresholdParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ThresholdParameter)
  return false;
#undef DO_
}

void ThresholdParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ThresholdParameter)
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ThresholdParameter)
}

::google::protobuf::uint8* ThresholdParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ThresholdParameter)
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ThresholdParameter)
  return target;
}

int ThresholdParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ThresholdParameter)
  int total_size = 0;

  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThresholdParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ThresholdParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ThresholdParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ThresholdParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ThresholdParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ThresholdParameter)
    MergeFrom(*source);
  }
}

void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ThresholdParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ThresholdParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {

  return true;
}

void ThresholdParameter::Swap(ThresholdParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
  std::swap(threshold_, other->threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThresholdParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThresholdParameter_descriptor_;
  metadata.reflection = ThresholdParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThresholdParameter

// optional float threshold = 1 [default = 0];
bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
 float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
 void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MILParameter_MILType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MILParameter_MILType_descriptor_;
}
bool MILParameter_MILType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MILParameter_MILType MILParameter::MAX;
const MILParameter_MILType MILParameter::NOR;
const MILParameter_MILType MILParameter::MILType_MIN;
const MILParameter_MILType MILParameter::MILType_MAX;
const int MILParameter::MILType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MILParameter::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MILParameter::MILParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MILParameter)
}

void MILParameter::InitAsDefaultInstance() {
}

MILParameter::MILParameter(const MILParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MILParameter)
}

void MILParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MILParameter::~MILParameter() {
  // @@protoc_insertion_point(destructor:caffe.MILParameter)
  SharedDtor();
}

void MILParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MILParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MILParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MILParameter_descriptor_;
}

const MILParameter& MILParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

MILParameter* MILParameter::default_instance_ = NULL;

MILParameter* MILParameter::New(::google::protobuf::Arena* arena) const {
  MILParameter* n = new MILParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MILParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MILParameter)
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MILParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MILParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.MILParameter.MILType type = 1 [default = MAX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::MILParameter_MILType_IsValid(value)) {
            set_type(static_cast< ::caffe::MILParameter_MILType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MILParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MILParameter)
  return false;
#undef DO_
}

void MILParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MILParameter)
  // optional .caffe.MILParameter.MILType type = 1 [default = MAX];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MILParameter)
}

::google::protobuf::uint8* MILParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MILParameter)
  // optional .caffe.MILParameter.MILType type = 1 [default = MAX];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MILParameter)
  return target;
}

int MILParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MILParameter)
  int total_size = 0;

  // optional .caffe.MILParameter.MILType type = 1 [default = MAX];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MILParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MILParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MILParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MILParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MILParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MILParameter)
    MergeFrom(*source);
  }
}

void MILParameter::MergeFrom(const MILParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MILParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MILParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MILParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MILParameter::CopyFrom(const MILParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MILParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MILParameter::IsInitialized() const {

  return true;
}

void MILParameter::Swap(MILParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MILParameter::InternalSwap(MILParameter* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MILParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MILParameter_descriptor_;
  metadata.reflection = MILParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MILParameter

// optional .caffe.MILParameter.MILType type = 1 [default = MAX];
bool MILParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MILParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MILParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MILParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::caffe::MILParameter_MILType MILParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.MILParameter.type)
  return static_cast< ::caffe::MILParameter_MILType >(type_);
}
 void MILParameter::set_type(::caffe::MILParameter_MILType value) {
  assert(::caffe::MILParameter_MILType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILParameter.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* WindowDataParameter::_default_crop_mode_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowDataParameter::kSourceFieldNumber;
const int WindowDataParameter::kScaleFieldNumber;
const int WindowDataParameter::kMeanFileFieldNumber;
const int WindowDataParameter::kBatchSizeFieldNumber;
const int WindowDataParameter::kCropSizeFieldNumber;
const int WindowDataParameter::kMirrorFieldNumber;
const int WindowDataParameter::kFgThresholdFieldNumber;
const int WindowDataParameter::kBgThresholdFieldNumber;
const int WindowDataParameter::kFgFractionFieldNumber;
const int WindowDataParameter::kContextPadFieldNumber;
const int WindowDataParameter::kCropModeFieldNumber;
const int WindowDataParameter::kCacheImagesFieldNumber;
const int WindowDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowDataParameter::WindowDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::InitAsDefaultInstance() {
}

WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 1;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  crop_size_ = 0u;
  mirror_ = false;
  fg_threshold_ = 0.5f;
  bg_threshold_ = 0.5f;
  fg_fraction_ = 0.25f;
  context_pad_ = 0u;
  crop_mode_.UnsafeSetDefault(_default_crop_mode_);
  cache_images_ = false;
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WindowDataParameter::~WindowDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.WindowDataParameter)
  SharedDtor();
}

void WindowDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_mode_.DestroyNoArena(_default_crop_mode_);
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WindowDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindowDataParameter_descriptor_;
}

const WindowDataParameter& WindowDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

WindowDataParameter* WindowDataParameter::default_instance_ = NULL;

WindowDataParameter* WindowDataParameter::New(::google::protobuf::Arena* arena) const {
  WindowDataParameter* n = new WindowDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WindowDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WindowDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WindowDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(batch_size_, crop_size_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scale_ = 1;
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mirror_ = false;
    fg_threshold_ = 0.5f;
    bg_threshold_ = 0.5f;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(cache_images_, context_pad_);
    fg_fraction_ = 0.25f;
    if (has_crop_mode()) {
      crop_mode_.ClearToDefaultNoArena(_default_crop_mode_);
    }
    if (has_root_folder()) {
      root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WindowDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.WindowDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_fg_threshold;
        break;
      }

      // optional float fg_threshold = 7 [default = 0.5];
      case 7: {
        if (tag == 61) {
         parse_fg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_threshold_)));
          set_has_fg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_bg_threshold;
        break;
      }

      // optional float bg_threshold = 8 [default = 0.5];
      case 8: {
        if (tag == 69) {
         parse_bg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bg_threshold_)));
          set_has_bg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_fg_fraction;
        break;
      }

      // optional float fg_fraction = 9 [default = 0.25];
      case 9: {
        if (tag == 77) {
         parse_fg_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_fraction_)));
          set_has_fg_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_context_pad;
        break;
      }

      // optional uint32 context_pad = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_context_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_pad_)));
          set_has_context_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_crop_mode;
        break;
      }

      // optional string crop_mode = 11 [default = "warp"];
      case 11: {
        if (tag == 90) {
         parse_crop_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crop_mode().data(), this->crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.crop_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cache_images;
        break;
      }

      // optional bool cache_images = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_cache_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_images_)));
          set_has_cache_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_root_folder;
        break;
      }

      // optional string root_folder = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_root_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.WindowDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.WindowDataParameter)
  return false;
#undef DO_
}

void WindowDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.WindowDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (has_fg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fg_threshold(), output);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (has_bg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bg_threshold(), output);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (has_fg_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fg_fraction(), output);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (has_context_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->context_pad(), output);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (has_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->crop_mode(), output);
  }

  // optional bool cache_images = 12 [default = false];
  if (has_cache_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cache_images(), output);
  }

  // optional string root_folder = 13 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->root_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.WindowDataParameter)
}

::google::protobuf::uint8* WindowDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.WindowDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (has_fg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fg_threshold(), target);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (has_bg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bg_threshold(), target);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (has_fg_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fg_fraction(), target);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (has_context_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->context_pad(), target);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (has_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->crop_mode(), target);
  }

  // optional bool cache_images = 12 [default = false];
  if (has_cache_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cache_images(), target);
  }

  // optional string root_folder = 13 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.WindowDataParameter)
  return target;
}

int WindowDataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WindowDataParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    if (has_fg_threshold()) {
      total_size += 1 + 4;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    if (has_bg_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional float fg_fraction = 9 [default = 0.25];
    if (has_fg_fraction()) {
      total_size += 1 + 4;
    }

    // optional uint32 context_pad = 10 [default = 0];
    if (has_context_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context_pad());
    }

    // optional string crop_mode = 11 [default = "warp"];
    if (has_crop_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crop_mode());
    }

    // optional bool cache_images = 12 [default = false];
    if (has_cache_images()) {
      total_size += 1 + 1;
    }

    // optional string root_folder = 13 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WindowDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WindowDataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WindowDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WindowDataParameter)
    MergeFrom(*source);
  }
}

void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WindowDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_fg_threshold()) {
      set_fg_threshold(from.fg_threshold());
    }
    if (from.has_bg_threshold()) {
      set_bg_threshold(from.bg_threshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fg_fraction()) {
      set_fg_fraction(from.fg_fraction());
    }
    if (from.has_context_pad()) {
      set_context_pad(from.context_pad());
    }
    if (from.has_crop_mode()) {
      set_has_crop_mode();
      crop_mode_.AssignWithDefault(_default_crop_mode_, from.crop_mode_);
    }
    if (from.has_cache_images()) {
      set_cache_images(from.cache_images());
    }
    if (from.has_root_folder()) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WindowDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {

  return true;
}

void WindowDataParameter::Swap(WindowDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(scale_, other->scale_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  std::swap(fg_threshold_, other->fg_threshold_);
  std::swap(bg_threshold_, other->bg_threshold_);
  std::swap(fg_fraction_, other->fg_fraction_);
  std::swap(context_pad_, other->context_pad_);
  crop_mode_.Swap(&other->crop_mode_);
  std::swap(cache_images_, other->cache_images_);
  root_folder_.Swap(&other->root_folder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WindowDataParameter_descriptor_;
  metadata.reflection = WindowDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowDataParameter

// optional string source = 1;
bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
 void WindowDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
 void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
 ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
 void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
 const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
 void WindowDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
 void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
 ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
 ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
 void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
 ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
 void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
 bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
 void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
 float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
 void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
 float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
 void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00000100u;
}
void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00000100u;
}
void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
 float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
 void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000200u;
}
void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
 ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
 void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(_default_crop_mode_);
  clear_has_crop_mode();
}
 const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena(_default_crop_mode_);
}
 void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
 void WindowDataParameter::set_crop_mode(const char* value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
 void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
 ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(_default_crop_mode_);
}
 ::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(_default_crop_mode_);
}
 void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(_default_crop_mode_, crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000800u;
}
void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000800u;
}
void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
 bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
 void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00001000u;
}
void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00001000u;
}
void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
 const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
 void WindowDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
 void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
 ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MILDataParameter::kSourceFieldNumber;
const int MILDataParameter::kNumScalesFieldNumber;
const int MILDataParameter::kScaleFactorFieldNumber;
const int MILDataParameter::kChannelsFieldNumber;
const int MILDataParameter::kImagesPerBatchFieldNumber;
const int MILDataParameter::kNClassesFieldNumber;
const int MILDataParameter::kLabelFileFieldNumber;
const int MILDataParameter::kRootDirFieldNumber;
const int MILDataParameter::kExtFieldNumber;
const int MILDataParameter::kRandomizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MILDataParameter::MILDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MILDataParameter)
}

void MILDataParameter::InitAsDefaultInstance() {
}

MILDataParameter::MILDataParameter(const MILDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MILDataParameter)
}

void MILDataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_scales_ = 1u;
  scale_factor_ = 1;
  channels_ = 3u;
  images_per_batch_ = 0u;
  n_classes_ = 0u;
  label_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randomize_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MILDataParameter::~MILDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.MILDataParameter)
  SharedDtor();
}

void MILDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MILDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MILDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MILDataParameter_descriptor_;
}

const MILDataParameter& MILDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

MILDataParameter* MILDataParameter::default_instance_ = NULL;

MILDataParameter* MILDataParameter::New(::google::protobuf::Arena* arena) const {
  MILDataParameter* n = new MILDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MILDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MILDataParameter)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    num_scales_ = 1u;
    scale_factor_ = 1;
    channels_ = 3u;
    images_per_batch_ = 0u;
    n_classes_ = 0u;
    if (has_label_file()) {
      label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_root_dir()) {
      root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_ext()) {
      ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    randomize_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MILDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MILDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MILDataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_scales;
        break;
      }

      // optional uint32 num_scales = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_num_scales:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_scales_)));
          set_has_num_scales();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_images_per_batch;
        break;
      }

      // optional uint32 images_per_batch = 3;
      case 3: {
        if (tag == 24) {
         parse_images_per_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &images_per_batch_)));
          set_has_images_per_batch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 4 [default = 3];
      case 4: {
        if (tag == 32) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_n_classes;
        break;
      }

      // optional uint32 n_classes = 5;
      case 5: {
        if (tag == 40) {
         parse_n_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_classes_)));
          set_has_n_classes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_scale_factor;
        break;
      }

      // optional float scale_factor = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_factor_)));
          set_has_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_label_file;
        break;
      }

      // optional string label_file = 7;
      case 7: {
        if (tag == 58) {
         parse_label_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_file().data(), this->label_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MILDataParameter.label_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_root_dir;
        break;
      }

      // optional string root_dir = 11;
      case 11: {
        if (tag == 90) {
         parse_root_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_dir().data(), this->root_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MILDataParameter.root_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ext;
        break;
      }

      // optional string ext = 12;
      case 12: {
        if (tag == 98) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MILDataParameter.ext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_randomize;
        break;
      }

      // optional bool randomize = 13 [default = true];
      case 13: {
        if (tag == 104) {
         parse_randomize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_)));
          set_has_randomize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MILDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MILDataParameter)
  return false;
#undef DO_
}

void MILDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MILDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 num_scales = 2 [default = 1];
  if (has_num_scales()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_scales(), output);
  }

  // optional uint32 images_per_batch = 3;
  if (has_images_per_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->images_per_batch(), output);
  }

  // optional uint32 channels = 4 [default = 3];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channels(), output);
  }

  // optional uint32 n_classes = 5;
  if (has_n_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->n_classes(), output);
  }

  // optional float scale_factor = 6 [default = 1];
  if (has_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale_factor(), output);
  }

  // optional string label_file = 7;
  if (has_label_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_file().data(), this->label_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.label_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->label_file(), output);
  }

  // optional string root_dir = 11;
  if (has_root_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_dir().data(), this->root_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.root_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->root_dir(), output);
  }

  // optional string ext = 12;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ext(), output);
  }

  // optional bool randomize = 13 [default = true];
  if (has_randomize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->randomize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MILDataParameter)
}

::google::protobuf::uint8* MILDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MILDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 num_scales = 2 [default = 1];
  if (has_num_scales()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_scales(), target);
  }

  // optional uint32 images_per_batch = 3;
  if (has_images_per_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->images_per_batch(), target);
  }

  // optional uint32 channels = 4 [default = 3];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channels(), target);
  }

  // optional uint32 n_classes = 5;
  if (has_n_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->n_classes(), target);
  }

  // optional float scale_factor = 6 [default = 1];
  if (has_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scale_factor(), target);
  }

  // optional string label_file = 7;
  if (has_label_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_file().data(), this->label_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.label_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->label_file(), target);
  }

  // optional string root_dir = 11;
  if (has_root_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_dir().data(), this->root_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.root_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->root_dir(), target);
  }

  // optional string ext = 12;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MILDataParameter.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ext(), target);
  }

  // optional bool randomize = 13 [default = true];
  if (has_randomize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->randomize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MILDataParameter)
  return target;
}

int MILDataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MILDataParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 num_scales = 2 [default = 1];
    if (has_num_scales()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_scales());
    }

    // optional float scale_factor = 6 [default = 1];
    if (has_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional uint32 channels = 4 [default = 3];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional uint32 images_per_batch = 3;
    if (has_images_per_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->images_per_batch());
    }

    // optional uint32 n_classes = 5;
    if (has_n_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_classes());
    }

    // optional string label_file = 7;
    if (has_label_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label_file());
    }

    // optional string root_dir = 11;
    if (has_root_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_dir());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string ext = 12;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext());
    }

    // optional bool randomize = 13 [default = true];
    if (has_randomize()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MILDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MILDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MILDataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MILDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MILDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MILDataParameter)
    MergeFrom(*source);
  }
}

void MILDataParameter::MergeFrom(const MILDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MILDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_num_scales()) {
      set_num_scales(from.num_scales());
    }
    if (from.has_scale_factor()) {
      set_scale_factor(from.scale_factor());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_images_per_batch()) {
      set_images_per_batch(from.images_per_batch());
    }
    if (from.has_n_classes()) {
      set_n_classes(from.n_classes());
    }
    if (from.has_label_file()) {
      set_has_label_file();
      label_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_file_);
    }
    if (from.has_root_dir()) {
      set_has_root_dir();
      root_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_dir_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ext()) {
      set_has_ext();
      ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
    }
    if (from.has_randomize()) {
      set_randomize(from.randomize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MILDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MILDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MILDataParameter::CopyFrom(const MILDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MILDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MILDataParameter::IsInitialized() const {

  return true;
}

void MILDataParameter::Swap(MILDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MILDataParameter::InternalSwap(MILDataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(num_scales_, other->num_scales_);
  std::swap(scale_factor_, other->scale_factor_);
  std::swap(channels_, other->channels_);
  std::swap(images_per_batch_, other->images_per_batch_);
  std::swap(n_classes_, other->n_classes_);
  label_file_.Swap(&other->label_file_);
  root_dir_.Swap(&other->root_dir_);
  ext_.Swap(&other->ext_);
  std::swap(randomize_, other->randomize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MILDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MILDataParameter_descriptor_;
  metadata.reflection = MILDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MILDataParameter

// optional string source = 1;
bool MILDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MILDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void MILDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void MILDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& MILDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.source)
}
 void MILDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.source)
}
 void MILDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.source)
}
 ::std::string* MILDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MILDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.source)
}

// optional uint32 num_scales = 2 [default = 1];
bool MILDataParameter::has_num_scales() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MILDataParameter::set_has_num_scales() {
  _has_bits_[0] |= 0x00000002u;
}
void MILDataParameter::clear_has_num_scales() {
  _has_bits_[0] &= ~0x00000002u;
}
void MILDataParameter::clear_num_scales() {
  num_scales_ = 1u;
  clear_has_num_scales();
}
 ::google::protobuf::uint32 MILDataParameter::num_scales() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.num_scales)
  return num_scales_;
}
 void MILDataParameter::set_num_scales(::google::protobuf::uint32 value) {
  set_has_num_scales();
  num_scales_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.num_scales)
}

// optional float scale_factor = 6 [default = 1];
bool MILDataParameter::has_scale_factor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MILDataParameter::set_has_scale_factor() {
  _has_bits_[0] |= 0x00000004u;
}
void MILDataParameter::clear_has_scale_factor() {
  _has_bits_[0] &= ~0x00000004u;
}
void MILDataParameter::clear_scale_factor() {
  scale_factor_ = 1;
  clear_has_scale_factor();
}
 float MILDataParameter::scale_factor() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.scale_factor)
  return scale_factor_;
}
 void MILDataParameter::set_scale_factor(float value) {
  set_has_scale_factor();
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.scale_factor)
}

// optional uint32 channels = 4 [default = 3];
bool MILDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MILDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000008u;
}
void MILDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000008u;
}
void MILDataParameter::clear_channels() {
  channels_ = 3u;
  clear_has_channels();
}
 ::google::protobuf::uint32 MILDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.channels)
  return channels_;
}
 void MILDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.channels)
}

// optional uint32 images_per_batch = 3;
bool MILDataParameter::has_images_per_batch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MILDataParameter::set_has_images_per_batch() {
  _has_bits_[0] |= 0x00000010u;
}
void MILDataParameter::clear_has_images_per_batch() {
  _has_bits_[0] &= ~0x00000010u;
}
void MILDataParameter::clear_images_per_batch() {
  images_per_batch_ = 0u;
  clear_has_images_per_batch();
}
 ::google::protobuf::uint32 MILDataParameter::images_per_batch() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.images_per_batch)
  return images_per_batch_;
}
 void MILDataParameter::set_images_per_batch(::google::protobuf::uint32 value) {
  set_has_images_per_batch();
  images_per_batch_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.images_per_batch)
}

// optional uint32 n_classes = 5;
bool MILDataParameter::has_n_classes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MILDataParameter::set_has_n_classes() {
  _has_bits_[0] |= 0x00000020u;
}
void MILDataParameter::clear_has_n_classes() {
  _has_bits_[0] &= ~0x00000020u;
}
void MILDataParameter::clear_n_classes() {
  n_classes_ = 0u;
  clear_has_n_classes();
}
 ::google::protobuf::uint32 MILDataParameter::n_classes() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.n_classes)
  return n_classes_;
}
 void MILDataParameter::set_n_classes(::google::protobuf::uint32 value) {
  set_has_n_classes();
  n_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.n_classes)
}

// optional string label_file = 7;
bool MILDataParameter::has_label_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MILDataParameter::set_has_label_file() {
  _has_bits_[0] |= 0x00000040u;
}
void MILDataParameter::clear_has_label_file() {
  _has_bits_[0] &= ~0x00000040u;
}
void MILDataParameter::clear_label_file() {
  label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_file();
}
 const ::std::string& MILDataParameter::label_file() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.label_file)
  return label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_label_file(const ::std::string& value) {
  set_has_label_file();
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.label_file)
}
 void MILDataParameter::set_label_file(const char* value) {
  set_has_label_file();
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.label_file)
}
 void MILDataParameter::set_label_file(const char* value, size_t size) {
  set_has_label_file();
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.label_file)
}
 ::std::string* MILDataParameter::mutable_label_file() {
  set_has_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.label_file)
  return label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MILDataParameter::release_label_file() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.label_file)
  clear_has_label_file();
  return label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_allocated_label_file(::std::string* label_file) {
  if (label_file != NULL) {
    set_has_label_file();
  } else {
    clear_has_label_file();
  }
  label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.label_file)
}

// optional string root_dir = 11;
bool MILDataParameter::has_root_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MILDataParameter::set_has_root_dir() {
  _has_bits_[0] |= 0x00000080u;
}
void MILDataParameter::clear_has_root_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
void MILDataParameter::clear_root_dir() {
  root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_dir();
}
 const ::std::string& MILDataParameter::root_dir() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.root_dir)
  return root_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_root_dir(const ::std::string& value) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.root_dir)
}
 void MILDataParameter::set_root_dir(const char* value) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.root_dir)
}
 void MILDataParameter::set_root_dir(const char* value, size_t size) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.root_dir)
}
 ::std::string* MILDataParameter::mutable_root_dir() {
  set_has_root_dir();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.root_dir)
  return root_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MILDataParameter::release_root_dir() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.root_dir)
  clear_has_root_dir();
  return root_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_allocated_root_dir(::std::string* root_dir) {
  if (root_dir != NULL) {
    set_has_root_dir();
  } else {
    clear_has_root_dir();
  }
  root_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.root_dir)
}

// optional string ext = 12;
bool MILDataParameter::has_ext() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MILDataParameter::set_has_ext() {
  _has_bits_[0] |= 0x00000100u;
}
void MILDataParameter::clear_has_ext() {
  _has_bits_[0] &= ~0x00000100u;
}
void MILDataParameter::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ext();
}
 const ::std::string& MILDataParameter::ext() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.ext)
  return ext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_ext(const ::std::string& value) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.ext)
}
 void MILDataParameter::set_ext(const char* value) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.ext)
}
 void MILDataParameter::set_ext(const char* value, size_t size) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.ext)
}
 ::std::string* MILDataParameter::mutable_ext() {
  set_has_ext();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MILDataParameter::release_ext() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.ext)
  clear_has_ext();
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MILDataParameter::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.ext)
}

// optional bool randomize = 13 [default = true];
bool MILDataParameter::has_randomize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MILDataParameter::set_has_randomize() {
  _has_bits_[0] |= 0x00000200u;
}
void MILDataParameter::clear_has_randomize() {
  _has_bits_[0] &= ~0x00000200u;
}
void MILDataParameter::clear_randomize() {
  randomize_ = true;
  clear_has_randomize();
}
 bool MILDataParameter::randomize() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.randomize)
  return randomize_;
}
 void MILDataParameter::set_randomize(bool value) {
  set_has_randomize();
  randomize_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.randomize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_PoolMethod_descriptor_;
}
bool SPPParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_PoolMethod SPPParameter::MAX;
const SPPParameter_PoolMethod SPPParameter::AVE;
const SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
const int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_Engine_descriptor_;
}
bool SPPParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_Engine SPPParameter::DEFAULT;
const SPPParameter_Engine SPPParameter::CAFFE;
const SPPParameter_Engine SPPParameter::CUDNN;
const SPPParameter_Engine SPPParameter::Engine_MIN;
const SPPParameter_Engine SPPParameter::Engine_MAX;
const int SPPParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SPPParameter::kPyramidHeightFieldNumber;
const int SPPParameter::kPoolFieldNumber;
const int SPPParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SPPParameter::SPPParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SPPParameter)
}

void SPPParameter::InitAsDefaultInstance() {
}

SPPParameter::SPPParameter(const SPPParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SPPParameter)
}

void SPPParameter::SharedCtor() {
  _cached_size_ = 0;
  pyramid_height_ = 0u;
  pool_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPPParameter::~SPPParameter() {
  // @@protoc_insertion_point(destructor:caffe.SPPParameter)
  SharedDtor();
}

void SPPParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPPParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_descriptor_;
}

const SPPParameter& SPPParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SPPParameter* SPPParameter::default_instance_ = NULL;

SPPParameter* SPPParameter::New(::google::protobuf::Arena* arena) const {
  SPPParameter* n = new SPPParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SPPParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SPPParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SPPParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pyramid_height_, engine_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SPPParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SPPParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pyramid_height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyramid_height_)));
          set_has_pyramid_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pool;
        break;
      }

      // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2: {
        if (tag == 16) {
         parse_pool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::SPPParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_engine;
        break;
      }

      // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SPPParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SPPParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SPPParameter)
  return false;
#undef DO_
}

void SPPParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SPPParameter)
  // optional uint32 pyramid_height = 1;
  if (has_pyramid_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pyramid_height(), output);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pool(), output);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SPPParameter)
}

::google::protobuf::uint8* SPPParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SPPParameter)
  // optional uint32 pyramid_height = 1;
  if (has_pyramid_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pyramid_height(), target);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pool(), target);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SPPParameter)
  return target;
}

int SPPParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SPPParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 pyramid_height = 1;
    if (has_pyramid_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyramid_height());
    }

    // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPPParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SPPParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SPPParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SPPParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SPPParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SPPParameter)
    MergeFrom(*source);
  }
}

void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SPPParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pyramid_height()) {
      set_pyramid_height(from.pyramid_height());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SPPParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPParameter::IsInitialized() const {

  return true;
}

void SPPParameter::Swap(SPPParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SPPParameter::InternalSwap(SPPParameter* other) {
  std::swap(pyramid_height_, other->pyramid_height_);
  std::swap(pool_, other->pool_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SPPParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPPParameter_descriptor_;
  metadata.reflection = SPPParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SPPParameter

// optional uint32 pyramid_height = 1;
bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
 ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
 void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
 ::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
 void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
 void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_LayerType_descriptor_;
}
bool V1LayerParameter_LayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_LayerType V1LayerParameter::NONE;
const V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
const V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
const V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
const V1LayerParameter_LayerType V1LayerParameter::BNLL;
const V1LayerParameter_LayerType V1LayerParameter::CONCAT;
const V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DATA;
const V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
const V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
const V1LayerParameter_LayerType V1LayerParameter::EXP;
const V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
const V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::IM2COL;
const V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
const V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
const V1LayerParameter_LayerType V1LayerParameter::LRN;
const V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::MVN;
const V1LayerParameter_LayerType V1LayerParameter::POOLING;
const V1LayerParameter_LayerType V1LayerParameter::POWER;
const V1LayerParameter_LayerType V1LayerParameter::RELU;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SILENCE;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SPLIT;
const V1LayerParameter_LayerType V1LayerParameter::SLICE;
const V1LayerParameter_LayerType V1LayerParameter::TANH;
const V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
const V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
const V1LayerParameter_LayerType V1LayerParameter::LOCAL;
const V1LayerParameter_LayerType V1LayerParameter::BN;
const V1LayerParameter_LayerType V1LayerParameter::NORMALIZE;
const V1LayerParameter_LayerType V1LayerParameter::INSANITY;
const V1LayerParameter_LayerType V1LayerParameter::TRIPLET_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::ROIPOOLING;
const V1LayerParameter_LayerType V1LayerParameter::BATCH_NORM;
const V1LayerParameter_LayerType V1LayerParameter::ELTWISE_AFFINE;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
const int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_DimCheckMode_descriptor_;
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
const int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V1LayerParameter::kBottomFieldNumber;
const int V1LayerParameter::kTopFieldNumber;
const int V1LayerParameter::kNameFieldNumber;
const int V1LayerParameter::kIncludeFieldNumber;
const int V1LayerParameter::kExcludeFieldNumber;
const int V1LayerParameter::kTypeFieldNumber;
const int V1LayerParameter::kBlobsFieldNumber;
const int V1LayerParameter::kParamFieldNumber;
const int V1LayerParameter::kBlobShareModeFieldNumber;
const int V1LayerParameter::kBlobsLrFieldNumber;
const int V1LayerParameter::kWeightDecayFieldNumber;
const int V1LayerParameter::kLossWeightFieldNumber;
const int V1LayerParameter::kAccuracyParamFieldNumber;
const int V1LayerParameter::kArgmaxParamFieldNumber;
const int V1LayerParameter::kConcatParamFieldNumber;
const int V1LayerParameter::kContrastiveLossParamFieldNumber;
const int V1LayerParameter::kConvolutionParamFieldNumber;
const int V1LayerParameter::kDataParamFieldNumber;
const int V1LayerParameter::kDropoutParamFieldNumber;
const int V1LayerParameter::kDummyDataParamFieldNumber;
const int V1LayerParameter::kEltwiseParamFieldNumber;
const int V1LayerParameter::kExpParamFieldNumber;
const int V1LayerParameter::kHdf5DataParamFieldNumber;
const int V1LayerParameter::kHdf5OutputParamFieldNumber;
const int V1LayerParameter::kHingeLossParamFieldNumber;
const int V1LayerParameter::kImageDataParamFieldNumber;
const int V1LayerParameter::kInfogainLossParamFieldNumber;
const int V1LayerParameter::kInnerProductParamFieldNumber;
const int V1LayerParameter::kLrnParamFieldNumber;
const int V1LayerParameter::kMemoryDataParamFieldNumber;
const int V1LayerParameter::kMvnParamFieldNumber;
const int V1LayerParameter::kPoolingParamFieldNumber;
const int V1LayerParameter::kPowerParamFieldNumber;
const int V1LayerParameter::kReluParamFieldNumber;
const int V1LayerParameter::kSigmoidParamFieldNumber;
const int V1LayerParameter::kSoftmaxParamFieldNumber;
const int V1LayerParameter::kSliceParamFieldNumber;
const int V1LayerParameter::kTanhParamFieldNumber;
const int V1LayerParameter::kThresholdParamFieldNumber;
const int V1LayerParameter::kWindowDataParamFieldNumber;
const int V1LayerParameter::kTransformParamFieldNumber;
const int V1LayerParameter::kLossParamFieldNumber;
const int V1LayerParameter::kLayerFieldNumber;
const int V1LayerParameter::kBnParamFieldNumber;
const int V1LayerParameter::kLocalParamFieldNumber;
const int V1LayerParameter::kPreluParamFieldNumber;
const int V1LayerParameter::kInsanityParamFieldNumber;
const int V1LayerParameter::kTripletLossParamFieldNumber;
const int V1LayerParameter::kRoiPoolingParamFieldNumber;
const int V1LayerParameter::kEltwiseAffineParamFieldNumber;
const int V1LayerParameter::kSubRegionParamFieldNumber;
const int V1LayerParameter::kNoiseParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V1LayerParameter::V1LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::InitAsDefaultInstance() {
  accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(&::caffe::AccuracyParameter::default_instance());
  argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(&::caffe::ArgMaxParameter::default_instance());
  concat_param_ = const_cast< ::caffe::ConcatParameter*>(&::caffe::ConcatParameter::default_instance());
  contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(&::caffe::ContrastiveLossParameter::default_instance());
  convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(&::caffe::ConvolutionParameter::default_instance());
  data_param_ = const_cast< ::caffe::DataParameter*>(&::caffe::DataParameter::default_instance());
  dropout_param_ = const_cast< ::caffe::DropoutParameter*>(&::caffe::DropoutParameter::default_instance());
  dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(&::caffe::DummyDataParameter::default_instance());
  eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(&::caffe::EltwiseParameter::default_instance());
  exp_param_ = const_cast< ::caffe::ExpParameter*>(&::caffe::ExpParameter::default_instance());
  hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(&::caffe::HDF5DataParameter::default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(&::caffe::HDF5OutputParameter::default_instance());
  hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(&::caffe::HingeLossParameter::default_instance());
  image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(&::caffe::ImageDataParameter::default_instance());
  infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(&::caffe::InfogainLossParameter::default_instance());
  inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(&::caffe::InnerProductParameter::default_instance());
  lrn_param_ = const_cast< ::caffe::LRNParameter*>(&::caffe::LRNParameter::default_instance());
  memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(&::caffe::MemoryDataParameter::default_instance());
  mvn_param_ = const_cast< ::caffe::MVNParameter*>(&::caffe::MVNParameter::default_instance());
  pooling_param_ = const_cast< ::caffe::PoolingParameter*>(&::caffe::PoolingParameter::default_instance());
  power_param_ = const_cast< ::caffe::PowerParameter*>(&::caffe::PowerParameter::default_instance());
  relu_param_ = const_cast< ::caffe::ReLUParameter*>(&::caffe::ReLUParameter::default_instance());
  sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(&::caffe::SigmoidParameter::default_instance());
  softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(&::caffe::SoftmaxParameter::default_instance());
  slice_param_ = const_cast< ::caffe::SliceParameter*>(&::caffe::SliceParameter::default_instance());
  tanh_param_ = const_cast< ::caffe::TanHParameter*>(&::caffe::TanHParameter::default_instance());
  threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(&::caffe::ThresholdParameter::default_instance());
  window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(&::caffe::WindowDataParameter::default_instance());
  transform_param_ = const_cast< ::caffe::TransformationParameter*>(&::caffe::TransformationParameter::default_instance());
  loss_param_ = const_cast< ::caffe::LossParameter*>(&::caffe::LossParameter::default_instance());
  layer_ = const_cast< ::caffe::V0LayerParameter*>(&::caffe::V0LayerParameter::default_instance());
  bn_param_ = const_cast< ::caffe::BNParameter*>(&::caffe::BNParameter::default_instance());
  local_param_ = const_cast< ::caffe::LocalParameter*>(&::caffe::LocalParameter::default_instance());
  prelu_param_ = const_cast< ::caffe::PReLUParameter*>(&::caffe::PReLUParameter::default_instance());
  insanity_param_ = const_cast< ::caffe::InsanityParameter*>(&::caffe::InsanityParameter::default_instance());
  triplet_loss_param_ = const_cast< ::caffe::TripletLossParameter*>(&::caffe::TripletLossParameter::default_instance());
  roi_pooling_param_ = const_cast< ::caffe::ROIPoolingParameter*>(&::caffe::ROIPoolingParameter::default_instance());
  eltwise_affine_param_ = const_cast< ::caffe::EltwiseAffineParameter*>(&::caffe::EltwiseAffineParameter::default_instance());
  sub_region_param_ = const_cast< ::caffe::SubRegionParameter*>(&::caffe::SubRegionParameter::default_instance());
  noise_param_ = const_cast< ::caffe::NoiseParameter*>(&::caffe::NoiseParameter::default_instance());
}

V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  accuracy_param_ = NULL;
  argmax_param_ = NULL;
  concat_param_ = NULL;
  contrastive_loss_param_ = NULL;
  convolution_param_ = NULL;
  data_param_ = NULL;
  dropout_param_ = NULL;
  dummy_data_param_ = NULL;
  eltwise_param_ = NULL;
  exp_param_ = NULL;
  hdf5_data_param_ = NULL;
  hdf5_output_param_ = NULL;
  hinge_loss_param_ = NULL;
  image_data_param_ = NULL;
  infogain_loss_param_ = NULL;
  inner_product_param_ = NULL;
  lrn_param_ = NULL;
  memory_data_param_ = NULL;
  mvn_param_ = NULL;
  pooling_param_ = NULL;
  power_param_ = NULL;
  relu_param_ = NULL;
  sigmoid_param_ = NULL;
  softmax_param_ = NULL;
  slice_param_ = NULL;
  tanh_param_ = NULL;
  threshold_param_ = NULL;
  window_data_param_ = NULL;
  transform_param_ = NULL;
  loss_param_ = NULL;
  layer_ = NULL;
  bn_param_ = NULL;
  local_param_ = NULL;
  prelu_param_ = NULL;
  insanity_param_ = NULL;
  triplet_loss_param_ = NULL;
  roi_pooling_param_ = NULL;
  eltwise_affine_param_ = NULL;
  sub_region_param_ = NULL;
  noise_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

V1LayerParameter::~V1LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V1LayerParameter)
  SharedDtor();
}

void V1LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete accuracy_param_;
    delete argmax_param_;
    delete concat_param_;
    delete contrastive_loss_param_;
    delete convolution_param_;
    delete data_param_;
    delete dropout_param_;
    delete dummy_data_param_;
    delete eltwise_param_;
    delete exp_param_;
    delete hdf5_data_param_;
    delete hdf5_output_param_;
    delete hinge_loss_param_;
    delete image_data_param_;
    delete infogain_loss_param_;
    delete inner_product_param_;
    delete lrn_param_;
    delete memory_data_param_;
    delete mvn_param_;
    delete pooling_param_;
    delete power_param_;
    delete relu_param_;
    delete sigmoid_param_;
    delete softmax_param_;
    delete slice_param_;
    delete tanh_param_;
    delete threshold_param_;
    delete window_data_param_;
    delete transform_param_;
    delete loss_param_;
    delete layer_;
    delete bn_param_;
    delete local_param_;
    delete prelu_param_;
    delete insanity_param_;
    delete triplet_loss_param_;
    delete roi_pooling_param_;
    delete eltwise_affine_param_;
    delete sub_region_param_;
    delete noise_param_;
  }
}

void V1LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V1LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_descriptor_;
}

const V1LayerParameter& V1LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

V1LayerParameter* V1LayerParameter::default_instance_ = NULL;

V1LayerParameter* V1LayerParameter::New(::google::protobuf::Arena* arena) const {
  V1LayerParameter* n = new V1LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V1LayerParameter)
  if (_has_bits_[0 / 32] & 36u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
  }
  if (_has_bits_[8 / 32] & 61440u) {
    if (has_accuracy_param()) {
      if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_argmax_param()) {
      if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_convolution_param()) {
      if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_dummy_data_param()) {
      if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
    if (has_eltwise_param()) {
      if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_hinge_loss_param()) {
      if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
    if (has_image_data_param()) {
      if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (has_mvn_param()) {
      if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_slice_param()) {
      if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
    }
    if (has_tanh_param()) {
      if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_threshold_param()) {
      if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
    }
    if (has_window_data_param()) {
      if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280u) {
    if (has_transform_param()) {
      if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_loss_param()) {
      if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_layer()) {
      if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
    }
    if (has_bn_param()) {
      if (bn_param_ != NULL) bn_param_->::caffe::BNParameter::Clear();
    }
    if (has_local_param()) {
      if (local_param_ != NULL) local_param_->::caffe::LocalParameter::Clear();
    }
    if (has_prelu_param()) {
      if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
    }
    if (has_insanity_param()) {
      if (insanity_param_ != NULL) insanity_param_->::caffe::InsanityParameter::Clear();
    }
    if (has_triplet_loss_param()) {
      if (triplet_loss_param_ != NULL) triplet_loss_param_->::caffe::TripletLossParameter::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 983040u) {
    if (has_roi_pooling_param()) {
      if (roi_pooling_param_ != NULL) roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
    }
    if (has_eltwise_affine_param()) {
      if (eltwise_affine_param_ != NULL) eltwise_affine_param_->::caffe::EltwiseAffineParameter::Clear();
    }
    if (has_sub_region_param()) {
      if (sub_region_param_ != NULL) sub_region_param_->::caffe::SubRegionParameter::Clear();
    }
    if (has_noise_param()) {
      if (noise_param_ != NULL) noise_param_->::caffe::NoiseParameter::Clear();
    }
  }
  bottom_.Clear();
  top_.Clear();
  include_.Clear();
  exclude_.Clear();
  blobs_.Clear();
  param_.Clear();
  blob_share_mode_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  loss_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool V1LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V1LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.V0LayerParameter layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        if (input->ExpectTag(26)) goto parse_top;
        break;
      }

      // repeated string top = 3;
      case 3: {
        if (tag == 26) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_top;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .caffe.V1LayerParameter.LayerType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_LayerType_IsValid(value)) {
            set_type(static_cast< ::caffe::V1LayerParameter_LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_blobs;
        break;
      }

      // repeated .caffe.BlobProto blobs = 6;
      case 6: {
        if (tag == 50) {
         parse_blobs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(61)) goto parse_blobs_lr;
        break;
      }

      // repeated float blobs_lr = 7;
      case 7: {
        if (tag == 61) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_blobs_lr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_blobs_lr;
        if (input->ExpectTag(69)) goto parse_weight_decay;
        break;
      }

      // repeated float weight_decay = 8;
      case 8: {
        if (tag == 69) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_weight_decay())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_weight_decay;
        if (input->ExpectTag(74)) goto parse_concat_param;
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 9;
      case 9: {
        if (tag == 74) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_convolution_param;
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 10;
      case 10: {
        if (tag == 82) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data_param;
        break;
      }

      // optional .caffe.DataParameter data_param = 11;
      case 11: {
        if (tag == 90) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_dropout_param;
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 12;
      case 12: {
        if (tag == 98) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_hdf5_data_param;
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
      case 13: {
        if (tag == 106) {
         parse_hdf5_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
      case 14: {
        if (tag == 114) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_image_data_param;
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 15;
      case 15: {
        if (tag == 122) {
         parse_image_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_infogain_loss_param;
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
      case 16: {
        if (tag == 130) {
         parse_infogain_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_inner_product_param;
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 17;
      case 17: {
        if (tag == 138) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_lrn_param;
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 18;
      case 18: {
        if (tag == 146) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_pooling_param;
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 19;
      case 19: {
        if (tag == 154) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_window_data_param;
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 20;
      case 20: {
        if (tag == 162) {
         parse_window_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_power_param;
        break;
      }

      // optional .caffe.PowerParameter power_param = 21;
      case 21: {
        if (tag == 170) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_memory_data_param;
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 22;
      case 22: {
        if (tag == 178) {
         parse_memory_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_argmax_param;
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 23;
      case 23: {
        if (tag == 186) {
         parse_argmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_eltwise_param;
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 24;
      case 24: {
        if (tag == 194) {
         parse_eltwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_threshold_param;
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 25;
      case 25: {
        if (tag == 202) {
         parse_threshold_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_dummy_data_param;
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 26;
      case 26: {
        if (tag == 210) {
         parse_dummy_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_accuracy_param;
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 27;
      case 27: {
        if (tag == 218) {
         parse_accuracy_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_hinge_loss_param;
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 29;
      case 29: {
        if (tag == 234) {
         parse_hinge_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_relu_param;
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 30;
      case 30: {
        if (tag == 242) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_slice_param;
        break;
      }

      // optional .caffe.SliceParameter slice_param = 31;
      case 31: {
        if (tag == 250) {
         parse_slice_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_include;
        break;
      }

      // repeated .caffe.NetStateRule include = 32;
      case 32: {
        if (tag == 258) {
         parse_include:
          DO_(input->IncrementRecursionDepth());
         parse_loop_include:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_loop_include;
        if (input->ExpectTag(266)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.NetStateRule exclude = 33;
      case 33: {
        if (tag == 266) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exclude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(274)) goto parse_mvn_param;
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 34;
      case 34: {
        if (tag == 274) {
         parse_mvn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_loss_weight;
        break;
      }

      // repeated float loss_weight = 35;
      case 35: {
        if (tag == 285) {
         parse_loss_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 285, input, this->mutable_loss_weight())));
        } else if (tag == 282) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_loss_weight;
        if (input->ExpectTag(290)) goto parse_transform_param;
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 36;
      case 36: {
        if (tag == 290) {
         parse_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_tanh_param;
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 37;
      case 37: {
        if (tag == 298) {
         parse_tanh_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_sigmoid_param;
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 38;
      case 38: {
        if (tag == 306) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_softmax_param;
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 39;
      case 39: {
        if (tag == 314) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_contrastive_loss_param;
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
      case 40: {
        if (tag == 322) {
         parse_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_exp_param;
        break;
      }

      // optional .caffe.ExpParameter exp_param = 41;
      case 41: {
        if (tag == 330) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_loss_param;
        break;
      }

      // optional .caffe.LossParameter loss_param = 42;
      case 42: {
        if (tag == 338) {
         parse_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_bn_param;
        break;
      }

      // optional .caffe.BNParameter bn_param = 43;
      case 43: {
        if (tag == 346) {
         parse_bn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_local_param;
        break;
      }

      // optional .caffe.LocalParameter local_param = 44;
      case 44: {
        if (tag == 354) {
         parse_local_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_prelu_param;
        break;
      }

      // optional .caffe.PReLUParameter prelu_param = 45;
      case 45: {
        if (tag == 362) {
         parse_prelu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_insanity_param;
        break;
      }

      // optional .caffe.InsanityParameter insanity_param = 46;
      case 46: {
        if (tag == 370) {
         parse_insanity_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insanity_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_triplet_loss_param;
        break;
      }

      // optional .caffe.TripletLossParameter triplet_loss_param = 47;
      case 47: {
        if (tag == 378) {
         parse_triplet_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triplet_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_roi_pooling_param;
        break;
      }

      // optional .caffe.ROIPoolingParameter roi_pooling_param = 48;
      case 48: {
        if (tag == 386) {
         parse_roi_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_eltwise_affine_param;
        break;
      }

      // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 49;
      case 49: {
        if (tag == 394) {
         parse_eltwise_affine_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_affine_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_sub_region_param;
        break;
      }

      // optional .caffe.SubRegionParameter sub_region_param = 50;
      case 50: {
        if (tag == 402) {
         parse_sub_region_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_region_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_noise_param;
        break;
      }

      // optional .caffe.NoiseParameter noise_param = 51;
      case 51: {
        if (tag == 410) {
         parse_noise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_param;
        break;
      }

      // repeated string param = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_param;
        if (input->ExpectTag(8016)) goto parse_blob_share_mode;
        break;
      }

      // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      case 1002: {
        if (tag == 8016) {
         parse_blob_share_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_DimCheckMode_IsValid(value)) {
            add_blob_share_mode(static_cast< ::caffe::V1LayerParameter_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1002, value);
          }
        } else if (tag == 8018) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1002,
                 ::caffe::V1LayerParameter_DimCheckMode_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_blob_share_mode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8016)) goto parse_blob_share_mode;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V1LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V1LayerParameter)
  return false;
#undef DO_
}

void V1LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V1LayerParameter)
  // optional .caffe.V0LayerParameter layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->layer_, output);
  }

  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bottom(i), output);
  }

  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->top(i), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blobs(i), output);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 8;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->weight_decay(i), output);
  }

  // optional .caffe.ConcatParameter concat_param = 9;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->concat_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->dropout_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (has_hdf5_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->hdf5_output_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (has_image_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->lrn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->pooling_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (has_window_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->window_data_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->power_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (has_memory_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->memory_data_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (has_argmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->argmax_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->eltwise_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (has_threshold_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->threshold_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (has_dummy_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->dummy_data_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (has_accuracy_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->accuracy_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (has_hinge_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->relu_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (has_slice_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->slice_param_, output);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->exclude(i), output);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (has_mvn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->mvn_param_, output);
  }

  // repeated float loss_weight = 35;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      35, this->loss_weight(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->transform_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (has_tanh_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->tanh_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->softmax_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (has_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->exp_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->loss_param_, output);
  }

  // optional .caffe.BNParameter bn_param = 43;
  if (has_bn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->bn_param_, output);
  }

  // optional .caffe.LocalParameter local_param = 44;
  if (has_local_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *this->local_param_, output);
  }

  // optional .caffe.PReLUParameter prelu_param = 45;
  if (has_prelu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->prelu_param_, output);
  }

  // optional .caffe.InsanityParameter insanity_param = 46;
  if (has_insanity_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->insanity_param_, output);
  }

  // optional .caffe.TripletLossParameter triplet_loss_param = 47;
  if (has_triplet_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *this->triplet_loss_param_, output);
  }

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 48;
  if (has_roi_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->roi_pooling_param_, output);
  }

  // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 49;
  if (has_eltwise_affine_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *this->eltwise_affine_param_, output);
  }

  // optional .caffe.SubRegionParameter sub_region_param = 50;
  if (has_sub_region_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->sub_region_param_, output);
  }

  // optional .caffe.NoiseParameter noise_param = 51;
  if (has_noise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->noise_param_, output);
  }

  // repeated string param = 1001;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1001, this->param(i), output);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0; i < this->blob_share_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1002, this->blob_share_mode(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V1LayerParameter)
}

::google::protobuf::uint8* V1LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V1LayerParameter)
  // optional .caffe.V0LayerParameter layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->layer_, target);
  }

  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->bottom(i), target);
  }

  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->top(i), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->blobs(i), target);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->blobs_lr(i), target);
  }

  // repeated float weight_decay = 8;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->weight_decay(i), target);
  }

  // optional .caffe.ConcatParameter concat_param = 9;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->concat_param_, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->convolution_param_, target);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->data_param_, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->dropout_param_, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (has_hdf5_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->hdf5_data_param_, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->hdf5_output_param_, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (has_image_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->image_data_param_, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->infogain_loss_param_, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *this->inner_product_param_, target);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *this->lrn_param_, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *this->pooling_param_, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (has_window_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->window_data_param_, target);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->power_param_, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (has_memory_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *this->memory_data_param_, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (has_argmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, *this->argmax_param_, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, *this->eltwise_param_, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (has_threshold_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, *this->threshold_param_, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (has_dummy_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, *this->dummy_data_param_, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (has_accuracy_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, *this->accuracy_param_, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (has_hinge_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, *this->hinge_loss_param_, target);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *this->relu_param_, target);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (has_slice_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, *this->slice_param_, target);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->include(i), target);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->exclude(i), target);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (has_mvn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, *this->mvn_param_, target);
  }

  // repeated float loss_weight = 35;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(35, this->loss_weight(i), target);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, *this->transform_param_, target);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (has_tanh_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, *this->tanh_param_, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, *this->sigmoid_param_, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, *this->softmax_param_, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (has_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, *this->contrastive_loss_param_, target);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, *this->exp_param_, target);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, *this->loss_param_, target);
  }

  // optional .caffe.BNParameter bn_param = 43;
  if (has_bn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, *this->bn_param_, target);
  }

  // optional .caffe.LocalParameter local_param = 44;
  if (has_local_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, *this->local_param_, target);
  }

  // optional .caffe.PReLUParameter prelu_param = 45;
  if (has_prelu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, *this->prelu_param_, target);
  }

  // optional .caffe.InsanityParameter insanity_param = 46;
  if (has_insanity_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, *this->insanity_param_, target);
  }

  // optional .caffe.TripletLossParameter triplet_loss_param = 47;
  if (has_triplet_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, *this->triplet_loss_param_, target);
  }

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 48;
  if (has_roi_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, *this->roi_pooling_param_, target);
  }

  // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 49;
  if (has_eltwise_affine_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, *this->eltwise_affine_param_, target);
  }

  // optional .caffe.SubRegionParameter sub_region_param = 50;
  if (has_sub_region_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, *this->sub_region_param_, target);
  }

  // optional .caffe.NoiseParameter noise_param = 51;
  if (has_noise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, *this->noise_param_, target);
  }

  // repeated string param = 1001;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1001, this->param(i), target);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0; i < this->blob_share_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1002, this->blob_share_mode(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V1LayerParameter)
  return target;
}

int V1LayerParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V1LayerParameter)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 36u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.V1LayerParameter.LayerType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[12 / 32] & 61440u) {
    // optional .caffe.AccuracyParameter accuracy_param = 27;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.ArgMaxParameter argmax_param = 23;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.ConcatParameter concat_param = 9;
    if (has_concat_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.ConvolutionParameter convolution_param = 10;
    if (has_convolution_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.DataParameter data_param = 11;
    if (has_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 12;
    if (has_dropout_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 26;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

    // optional .caffe.EltwiseParameter eltwise_param = 24;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ExpParameter exp_param = 41;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
    if (has_hdf5_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
    if (has_hdf5_output_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.HingeLossParameter hinge_loss_param = 29;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

    // optional .caffe.ImageDataParameter image_data_param = 15;
    if (has_image_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 17;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 18;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 22;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

    // optional .caffe.MVNParameter mvn_param = 34;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 19;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.PowerParameter power_param = 21;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 30;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 38;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 39;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.SliceParameter slice_param = 31;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 37;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 25;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 20;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .caffe.TransformationParameter transform_param = 36;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.LossParameter loss_param = 42;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

    // optional .caffe.V0LayerParameter layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->layer_);
    }

    // optional .caffe.BNParameter bn_param = 43;
    if (has_bn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bn_param_);
    }

    // optional .caffe.LocalParameter local_param = 44;
    if (has_local_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->local_param_);
    }

    // optional .caffe.PReLUParameter prelu_param = 45;
    if (has_prelu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prelu_param_);
    }

    // optional .caffe.InsanityParameter insanity_param = 46;
    if (has_insanity_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->insanity_param_);
    }

    // optional .caffe.TripletLossParameter triplet_loss_param = 47;
    if (has_triplet_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->triplet_loss_param_);
    }

  }
  if (_has_bits_[48 / 32] & 983040u) {
    // optional .caffe.ROIPoolingParameter roi_pooling_param = 48;
    if (has_roi_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_pooling_param_);
    }

    // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 49;
    if (has_eltwise_affine_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_affine_param_);
    }

    // optional .caffe.SubRegionParameter sub_region_param = 50;
    if (has_sub_region_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sub_region_param_);
    }

    // optional .caffe.NoiseParameter noise_param = 51;
    if (has_noise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->noise_param_);
    }

  }
  // repeated string bottom = 2;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 3;
  total_size += 1 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated .caffe.NetStateRule include = 32;
  total_size += 2 * this->include_size();
  for (int i = 0; i < this->include_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->include(i));
  }

  // repeated .caffe.NetStateRule exclude = 33;
  total_size += 2 * this->exclude_size();
  for (int i = 0; i < this->exclude_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclude(i));
  }

  // repeated .caffe.BlobProto blobs = 6;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated string param = 1001;
  total_size += 2 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  {
    int data_size = 0;
    for (int i = 0; i < this->blob_share_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->blob_share_mode(i));
    }
    total_size += 2 * this->blob_share_mode_size() + data_size;
  }

  // repeated float blobs_lr = 7;
  {
    int data_size = 0;
    data_size = 4 * this->blobs_lr_size();
    total_size += 1 * this->blobs_lr_size() + data_size;
  }

  // repeated float weight_decay = 8;
  {
    int data_size = 0;
    data_size = 4 * this->weight_decay_size();
    total_size += 1 * this->weight_decay_size() + data_size;
  }

  // repeated float loss_weight = 35;
  {
    int data_size = 0;
    data_size = 4 * this->loss_weight_size();
    total_size += 2 * this->loss_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V1LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V1LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const V1LayerParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const V1LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V1LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V1LayerParameter)
    MergeFrom(*source);
  }
}

void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V1LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  blobs_.MergeFrom(from.blobs_);
  param_.MergeFrom(from.param_);
  blob_share_mode_.MergeFrom(from.blob_share_mode_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  loss_weight_.MergeFrom(from.loss_weight_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_accuracy_param()) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (from.has_argmax_param()) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_contrastive_loss_param()) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_dummy_data_param()) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_hdf5_data_param()) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_hinge_loss_param()) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
    if (from.has_image_data_param()) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (from.has_infogain_loss_param()) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_memory_data_param()) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (from.has_mvn_param()) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_power_param()) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_slice_param()) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (from.has_tanh_param()) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (from.has_threshold_param()) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
    if (from.has_window_data_param()) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_transform_param()) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_layer()) {
      mutable_layer()->::caffe::V0LayerParameter::MergeFrom(from.layer());
    }
    if (from.has_bn_param()) {
      mutable_bn_param()->::caffe::BNParameter::MergeFrom(from.bn_param());
    }
    if (from.has_local_param()) {
      mutable_local_param()->::caffe::LocalParameter::MergeFrom(from.local_param());
    }
    if (from.has_prelu_param()) {
      mutable_prelu_param()->::caffe::PReLUParameter::MergeFrom(from.prelu_param());
    }
    if (from.has_insanity_param()) {
      mutable_insanity_param()->::caffe::InsanityParameter::MergeFrom(from.insanity_param());
    }
    if (from.has_triplet_loss_param()) {
      mutable_triplet_loss_param()->::caffe::TripletLossParameter::MergeFrom(from.triplet_loss_param());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_roi_pooling_param()) {
      mutable_roi_pooling_param()->::caffe::ROIPoolingParameter::MergeFrom(from.roi_pooling_param());
    }
    if (from.has_eltwise_affine_param()) {
      mutable_eltwise_affine_param()->::caffe::EltwiseAffineParameter::MergeFrom(from.eltwise_affine_param());
    }
    if (from.has_sub_region_param()) {
      mutable_sub_region_param()->::caffe::SubRegionParameter::MergeFrom(from.sub_region_param());
    }
    if (from.has_noise_param()) {
      mutable_noise_param()->::caffe::NoiseParameter::MergeFrom(from.noise_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void V1LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {

  return true;
}

void V1LayerParameter::Swap(V1LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
  bottom_.UnsafeArenaSwap(&other->bottom_);
  top_.UnsafeArenaSwap(&other->top_);
  name_.Swap(&other->name_);
  include_.UnsafeArenaSwap(&other->include_);
  exclude_.UnsafeArenaSwap(&other->exclude_);
  std::swap(type_, other->type_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  param_.UnsafeArenaSwap(&other->param_);
  blob_share_mode_.UnsafeArenaSwap(&other->blob_share_mode_);
  blobs_lr_.UnsafeArenaSwap(&other->blobs_lr_);
  weight_decay_.UnsafeArenaSwap(&other->weight_decay_);
  loss_weight_.UnsafeArenaSwap(&other->loss_weight_);
  std::swap(accuracy_param_, other->accuracy_param_);
  std::swap(argmax_param_, other->argmax_param_);
  std::swap(concat_param_, other->concat_param_);
  std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(data_param_, other->data_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(dummy_data_param_, other->dummy_data_param_);
  std::swap(eltwise_param_, other->eltwise_param_);
  std::swap(exp_param_, other->exp_param_);
  std::swap(hdf5_data_param_, other->hdf5_data_param_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(hinge_loss_param_, other->hinge_loss_param_);
  std::swap(image_data_param_, other->image_data_param_);
  std::swap(infogain_loss_param_, other->infogain_loss_param_);
  std::swap(inner_product_param_, other->inner_product_param_);
  std::swap(lrn_param_, other->lrn_param_);
  std::swap(memory_data_param_, other->memory_data_param_);
  std::swap(mvn_param_, other->mvn_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(power_param_, other->power_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(sigmoid_param_, other->sigmoid_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(slice_param_, other->slice_param_);
  std::swap(tanh_param_, other->tanh_param_);
  std::swap(threshold_param_, other->threshold_param_);
  std::swap(window_data_param_, other->window_data_param_);
  std::swap(transform_param_, other->transform_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(layer_, other->layer_);
  std::swap(bn_param_, other->bn_param_);
  std::swap(local_param_, other->local_param_);
  std::swap(prelu_param_, other->prelu_param_);
  std::swap(insanity_param_, other->insanity_param_);
  std::swap(triplet_loss_param_, other->triplet_loss_param_);
  std::swap(roi_pooling_param_, other->roi_pooling_param_);
  std::swap(eltwise_affine_param_, other->eltwise_affine_param_);
  std::swap(sub_region_param_, other->sub_region_param_);
  std::swap(noise_param_, other->noise_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V1LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = V1LayerParameter_descriptor_;
  metadata.reflection = V1LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V1LayerParameter

// repeated string bottom = 2;
int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
 const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
 ::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
 void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
 void V1LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
 void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
 ::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
 void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
 void V1LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
 void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
int V1LayerParameter::top_size() const {
  return top_.size();
}
void V1LayerParameter::clear_top() {
  top_.Clear();
}
 const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
 ::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
 void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
 void V1LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
 void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
 ::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
 void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
 void V1LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
 void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
 void V1LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
 void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
 ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
int V1LayerParameter::include_size() const {
  return include_.size();
}
void V1LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
bool V1LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V1LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void V1LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
 void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
int V1LayerParameter::param_size() const {
  return param_.size();
}
void V1LayerParameter::clear_param() {
  param_.Clear();
}
 const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
 ::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
 void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
 void V1LayerParameter::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
 void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
 ::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
 void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
 void V1LayerParameter::add_param(const char* value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
 void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
 ::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
 void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
 void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
 const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
 ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
 float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
 void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
 void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
 const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
 ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
 float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
 void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
 void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
 const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
 ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
 float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
 void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
 void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
 const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
 ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00001000u;
}
void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00002000u;
}
void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00100000u;
}
void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00200000u;
}
void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00800000u;
}
void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x02000000u;
}
void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x04000000u;
}
void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x08000000u;
}
void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x10000000u;
}
void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x40000000u;
}
void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x80000000u;
}
void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V1LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000001u;
}
void V1LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000001u;
}
void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void V1LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00000002u;
}
void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00000004u;
}
void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00000004u;
}
void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00000008u;
}
void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00000008u;
}
void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void V1LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00000010u;
}
void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00000010u;
}
void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00000020u;
}
void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00000040u;
}
void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00000040u;
}
void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00000080u;
}
void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00000080u;
}
void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void V1LayerParameter::set_has_transform_param() {
  _has_bits_[1] |= 0x00000100u;
}
void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[1] &= ~0x00000100u;
}
void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void V1LayerParameter::set_has_loss_param() {
  _has_bits_[1] |= 0x00000200u;
}
void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[1] &= ~0x00000200u;
}
void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
bool V1LayerParameter::has_layer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void V1LayerParameter::set_has_layer() {
  _has_bits_[1] |= 0x00000400u;
}
void V1LayerParameter::clear_has_layer() {
  _has_bits_[1] &= ~0x00000400u;
}
void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

// optional .caffe.BNParameter bn_param = 43;
bool V1LayerParameter::has_bn_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void V1LayerParameter::set_has_bn_param() {
  _has_bits_[1] |= 0x00000800u;
}
void V1LayerParameter::clear_has_bn_param() {
  _has_bits_[1] &= ~0x00000800u;
}
void V1LayerParameter::clear_bn_param() {
  if (bn_param_ != NULL) bn_param_->::caffe::BNParameter::Clear();
  clear_has_bn_param();
}
const ::caffe::BNParameter& V1LayerParameter::bn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bn_param)
  return bn_param_ != NULL ? *bn_param_ : *default_instance_->bn_param_;
}
::caffe::BNParameter* V1LayerParameter::mutable_bn_param() {
  set_has_bn_param();
  if (bn_param_ == NULL) {
    bn_param_ = new ::caffe::BNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bn_param)
  return bn_param_;
}
::caffe::BNParameter* V1LayerParameter::release_bn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.bn_param)
  clear_has_bn_param();
  ::caffe::BNParameter* temp = bn_param_;
  bn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_bn_param(::caffe::BNParameter* bn_param) {
  delete bn_param_;
  bn_param_ = bn_param;
  if (bn_param) {
    set_has_bn_param();
  } else {
    clear_has_bn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.bn_param)
}

// optional .caffe.LocalParameter local_param = 44;
bool V1LayerParameter::has_local_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void V1LayerParameter::set_has_local_param() {
  _has_bits_[1] |= 0x00001000u;
}
void V1LayerParameter::clear_has_local_param() {
  _has_bits_[1] &= ~0x00001000u;
}
void V1LayerParameter::clear_local_param() {
  if (local_param_ != NULL) local_param_->::caffe::LocalParameter::Clear();
  clear_has_local_param();
}
const ::caffe::LocalParameter& V1LayerParameter::local_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.local_param)
  return local_param_ != NULL ? *local_param_ : *default_instance_->local_param_;
}
::caffe::LocalParameter* V1LayerParameter::mutable_local_param() {
  set_has_local_param();
  if (local_param_ == NULL) {
    local_param_ = new ::caffe::LocalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.local_param)
  return local_param_;
}
::caffe::LocalParameter* V1LayerParameter::release_local_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.local_param)
  clear_has_local_param();
  ::caffe::LocalParameter* temp = local_param_;
  local_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_local_param(::caffe::LocalParameter* local_param) {
  delete local_param_;
  local_param_ = local_param;
  if (local_param) {
    set_has_local_param();
  } else {
    clear_has_local_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.local_param)
}

// optional .caffe.PReLUParameter prelu_param = 45;
bool V1LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void V1LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00002000u;
}
void V1LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00002000u;
}
void V1LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
const ::caffe::PReLUParameter& V1LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
::caffe::PReLUParameter* V1LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.prelu_param)
  return prelu_param_;
}
::caffe::PReLUParameter* V1LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.prelu_param)
}

// optional .caffe.InsanityParameter insanity_param = 46;
bool V1LayerParameter::has_insanity_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void V1LayerParameter::set_has_insanity_param() {
  _has_bits_[1] |= 0x00004000u;
}
void V1LayerParameter::clear_has_insanity_param() {
  _has_bits_[1] &= ~0x00004000u;
}
void V1LayerParameter::clear_insanity_param() {
  if (insanity_param_ != NULL) insanity_param_->::caffe::InsanityParameter::Clear();
  clear_has_insanity_param();
}
const ::caffe::InsanityParameter& V1LayerParameter::insanity_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.insanity_param)
  return insanity_param_ != NULL ? *insanity_param_ : *default_instance_->insanity_param_;
}
::caffe::InsanityParameter* V1LayerParameter::mutable_insanity_param() {
  set_has_insanity_param();
  if (insanity_param_ == NULL) {
    insanity_param_ = new ::caffe::InsanityParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.insanity_param)
  return insanity_param_;
}
::caffe::InsanityParameter* V1LayerParameter::release_insanity_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.insanity_param)
  clear_has_insanity_param();
  ::caffe::InsanityParameter* temp = insanity_param_;
  insanity_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_insanity_param(::caffe::InsanityParameter* insanity_param) {
  delete insanity_param_;
  insanity_param_ = insanity_param;
  if (insanity_param) {
    set_has_insanity_param();
  } else {
    clear_has_insanity_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.insanity_param)
}

// optional .caffe.TripletLossParameter triplet_loss_param = 47;
bool V1LayerParameter::has_triplet_loss_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void V1LayerParameter::set_has_triplet_loss_param() {
  _has_bits_[1] |= 0x00008000u;
}
void V1LayerParameter::clear_has_triplet_loss_param() {
  _has_bits_[1] &= ~0x00008000u;
}
void V1LayerParameter::clear_triplet_loss_param() {
  if (triplet_loss_param_ != NULL) triplet_loss_param_->::caffe::TripletLossParameter::Clear();
  clear_has_triplet_loss_param();
}
const ::caffe::TripletLossParameter& V1LayerParameter::triplet_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.triplet_loss_param)
  return triplet_loss_param_ != NULL ? *triplet_loss_param_ : *default_instance_->triplet_loss_param_;
}
::caffe::TripletLossParameter* V1LayerParameter::mutable_triplet_loss_param() {
  set_has_triplet_loss_param();
  if (triplet_loss_param_ == NULL) {
    triplet_loss_param_ = new ::caffe::TripletLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.triplet_loss_param)
  return triplet_loss_param_;
}
::caffe::TripletLossParameter* V1LayerParameter::release_triplet_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.triplet_loss_param)
  clear_has_triplet_loss_param();
  ::caffe::TripletLossParameter* temp = triplet_loss_param_;
  triplet_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param) {
  delete triplet_loss_param_;
  triplet_loss_param_ = triplet_loss_param;
  if (triplet_loss_param) {
    set_has_triplet_loss_param();
  } else {
    clear_has_triplet_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.triplet_loss_param)
}

// optional .caffe.ROIPoolingParameter roi_pooling_param = 48;
bool V1LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void V1LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[1] |= 0x00010000u;
}
void V1LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[1] &= ~0x00010000u;
}
void V1LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
  clear_has_roi_pooling_param();
}
const ::caffe::ROIPoolingParameter& V1LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.roi_pooling_param)
  return roi_pooling_param_ != NULL ? *roi_pooling_param_ : *default_instance_->roi_pooling_param_;
}
::caffe::ROIPoolingParameter* V1LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
::caffe::ROIPoolingParameter* V1LayerParameter::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.roi_pooling_param)
  clear_has_roi_pooling_param();
  ::caffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param) {
  delete roi_pooling_param_;
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.roi_pooling_param)
}

// optional .caffe.EltwiseAffineParameter eltwise_affine_param = 49;
bool V1LayerParameter::has_eltwise_affine_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void V1LayerParameter::set_has_eltwise_affine_param() {
  _has_bits_[1] |= 0x00020000u;
}
void V1LayerParameter::clear_has_eltwise_affine_param() {
  _has_bits_[1] &= ~0x00020000u;
}
void V1LayerParameter::clear_eltwise_affine_param() {
  if (eltwise_affine_param_ != NULL) eltwise_affine_param_->::caffe::EltwiseAffineParameter::Clear();
  clear_has_eltwise_affine_param();
}
const ::caffe::EltwiseAffineParameter& V1LayerParameter::eltwise_affine_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_affine_param)
  return eltwise_affine_param_ != NULL ? *eltwise_affine_param_ : *default_instance_->eltwise_affine_param_;
}
::caffe::EltwiseAffineParameter* V1LayerParameter::mutable_eltwise_affine_param() {
  set_has_eltwise_affine_param();
  if (eltwise_affine_param_ == NULL) {
    eltwise_affine_param_ = new ::caffe::EltwiseAffineParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_affine_param)
  return eltwise_affine_param_;
}
::caffe::EltwiseAffineParameter* V1LayerParameter::release_eltwise_affine_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_affine_param)
  clear_has_eltwise_affine_param();
  ::caffe::EltwiseAffineParameter* temp = eltwise_affine_param_;
  eltwise_affine_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_eltwise_affine_param(::caffe::EltwiseAffineParameter* eltwise_affine_param) {
  delete eltwise_affine_param_;
  eltwise_affine_param_ = eltwise_affine_param;
  if (eltwise_affine_param) {
    set_has_eltwise_affine_param();
  } else {
    clear_has_eltwise_affine_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_affine_param)
}

// optional .caffe.SubRegionParameter sub_region_param = 50;
bool V1LayerParameter::has_sub_region_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void V1LayerParameter::set_has_sub_region_param() {
  _has_bits_[1] |= 0x00040000u;
}
void V1LayerParameter::clear_has_sub_region_param() {
  _has_bits_[1] &= ~0x00040000u;
}
void V1LayerParameter::clear_sub_region_param() {
  if (sub_region_param_ != NULL) sub_region_param_->::caffe::SubRegionParameter::Clear();
  clear_has_sub_region_param();
}
const ::caffe::SubRegionParameter& V1LayerParameter::sub_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sub_region_param)
  return sub_region_param_ != NULL ? *sub_region_param_ : *default_instance_->sub_region_param_;
}
::caffe::SubRegionParameter* V1LayerParameter::mutable_sub_region_param() {
  set_has_sub_region_param();
  if (sub_region_param_ == NULL) {
    sub_region_param_ = new ::caffe::SubRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sub_region_param)
  return sub_region_param_;
}
::caffe::SubRegionParameter* V1LayerParameter::release_sub_region_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sub_region_param)
  clear_has_sub_region_param();
  ::caffe::SubRegionParameter* temp = sub_region_param_;
  sub_region_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_sub_region_param(::caffe::SubRegionParameter* sub_region_param) {
  delete sub_region_param_;
  sub_region_param_ = sub_region_param;
  if (sub_region_param) {
    set_has_sub_region_param();
  } else {
    clear_has_sub_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sub_region_param)
}

// optional .caffe.NoiseParameter noise_param = 51;
bool V1LayerParameter::has_noise_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void V1LayerParameter::set_has_noise_param() {
  _has_bits_[1] |= 0x00080000u;
}
void V1LayerParameter::clear_has_noise_param() {
  _has_bits_[1] &= ~0x00080000u;
}
void V1LayerParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::caffe::NoiseParameter::Clear();
  clear_has_noise_param();
}
const ::caffe::NoiseParameter& V1LayerParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_ : *default_instance_->noise_param_;
}
::caffe::NoiseParameter* V1LayerParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.noise_param)
  return noise_param_;
}
::caffe::NoiseParameter* V1LayerParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.noise_param)
  clear_has_noise_param();
  ::caffe::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_noise_param(::caffe::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.noise_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V0LayerParameter_PoolMethod_descriptor_;
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V0LayerParameter_PoolMethod V0LayerParameter::MAX;
const V0LayerParameter_PoolMethod V0LayerParameter::AVE;
const V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
const int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* V0LayerParameter::_default_det_crop_mode_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V0LayerParameter::kNameFieldNumber;
const int V0LayerParameter::kTypeFieldNumber;
const int V0LayerParameter::kNumOutputFieldNumber;
const int V0LayerParameter::kBiastermFieldNumber;
const int V0LayerParameter::kWeightFillerFieldNumber;
const int V0LayerParameter::kBiasFillerFieldNumber;
const int V0LayerParameter::kPadFieldNumber;
const int V0LayerParameter::kKernelsizeFieldNumber;
const int V0LayerParameter::kGroupFieldNumber;
const int V0LayerParameter::kStrideFieldNumber;
const int V0LayerParameter::kPoolFieldNumber;
const int V0LayerParameter::kDropoutRatioFieldNumber;
const int V0LayerParameter::kLocalSizeFieldNumber;
const int V0LayerParameter::kAlphaFieldNumber;
const int V0LayerParameter::kBetaFieldNumber;
const int V0LayerParameter::kKFieldNumber;
const int V0LayerParameter::kSourceFieldNumber;
const int V0LayerParameter::kScaleFieldNumber;
const int V0LayerParameter::kMeanfileFieldNumber;
const int V0LayerParameter::kBatchsizeFieldNumber;
const int V0LayerParameter::kCropsizeFieldNumber;
const int V0LayerParameter::kMirrorFieldNumber;
const int V0LayerParameter::kBlobsFieldNumber;
const int V0LayerParameter::kBlobsLrFieldNumber;
const int V0LayerParameter::kWeightDecayFieldNumber;
const int V0LayerParameter::kRandSkipFieldNumber;
const int V0LayerParameter::kDetFgThresholdFieldNumber;
const int V0LayerParameter::kDetBgThresholdFieldNumber;
const int V0LayerParameter::kDetFgFractionFieldNumber;
const int V0LayerParameter::kDetContextPadFieldNumber;
const int V0LayerParameter::kDetCropModeFieldNumber;
const int V0LayerParameter::kNewNumFieldNumber;
const int V0LayerParameter::kNewChannelsFieldNumber;
const int V0LayerParameter::kNewHeightFieldNumber;
const int V0LayerParameter::kNewWidthFieldNumber;
const int V0LayerParameter::kShuffleImagesFieldNumber;
const int V0LayerParameter::kConcatDimFieldNumber;
const int V0LayerParameter::kHdf5OutputParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V0LayerParameter::V0LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(&::caffe::HDF5OutputParameter::default_instance());
}

V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_output_ = 0u;
  biasterm_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  pad_ = 0u;
  kernelsize_ = 0u;
  group_ = 1u;
  stride_ = 1u;
  pool_ = 0;
  dropout_ratio_ = 0.5f;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 1;
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchsize_ = 0u;
  cropsize_ = 0u;
  mirror_ = false;
  rand_skip_ = 0u;
  det_fg_threshold_ = 0.5f;
  det_bg_threshold_ = 0.5f;
  det_fg_fraction_ = 0.25f;
  det_context_pad_ = 0u;
  det_crop_mode_.UnsafeSetDefault(_default_det_crop_mode_);
  new_num_ = 0;
  new_channels_ = 0;
  new_height_ = 0;
  new_width_ = 0;
  shuffle_images_ = false;
  concat_dim_ = 1u;
  hdf5_output_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

V0LayerParameter::~V0LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V0LayerParameter)
  SharedDtor();
}

void V0LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.DestroyNoArena(_default_det_crop_mode_);
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
    delete hdf5_output_param_;
  }
}

void V0LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V0LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V0LayerParameter_descriptor_;
}

const V0LayerParameter& V0LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

V0LayerParameter* V0LayerParameter::default_instance_ = NULL;

V0LayerParameter* V0LayerParameter::New(::google::protobuf::Arena* arena) const {
  V0LayerParameter* n = new V0LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V0LayerParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(V0LayerParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<V0LayerParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_output_, pad_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    biasterm_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    kernelsize_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    group_ = 1u;
    stride_ = 1u;
    pool_ = 0;
    dropout_ratio_ = 0.5f;
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scale_ = 1;
    if (has_meanfile()) {
      meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    batchsize_ = 0u;
    cropsize_ = 0u;
    mirror_ = false;
  }
  if (_has_bits_[24 / 32] & 4261412864u) {
    rand_skip_ = 0u;
    det_fg_threshold_ = 0.5f;
    det_bg_threshold_ = 0.5f;
    det_fg_fraction_ = 0.25f;
    det_context_pad_ = 0u;
    if (has_det_crop_mode()) {
      det_crop_mode_.ClearToDefaultNoArena(_default_det_crop_mode_);
    }
    new_num_ = 0;
  }
  if (_has_bits_[32 / 32] & 63u) {
    ZR_(new_channels_, new_width_);
    shuffle_images_ = false;
    concat_dim_ = 1u;
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool V0LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V0LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_output;
        break;
      }

      // optional uint32 num_output = 3;
      case 3: {
        if (tag == 24) {
         parse_num_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_biasterm;
        break;
      }

      // optional bool biasterm = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_biasterm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biasterm_)));
          set_has_biasterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 6;
      case 6: {
        if (tag == 50) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kernelsize;
        break;
      }

      // optional uint32 kernelsize = 8;
      case 8: {
        if (tag == 64) {
         parse_kernelsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernelsize_)));
          set_has_kernelsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_group;
        break;
      }

      // optional uint32 group = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 10 [default = 1];
      case 10: {
        if (tag == 80) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pool;
        break;
      }

      // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      case 11: {
        if (tag == 88) {
         parse_pool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V0LayerParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::V0LayerParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_dropout_ratio;
        break;
      }

      // optional float dropout_ratio = 12 [default = 0.5];
      case 12: {
        if (tag == 101) {
         parse_dropout_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
          set_has_dropout_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_local_size;
        break;
      }

      // optional uint32 local_size = 13 [default = 5];
      case 13: {
        if (tag == 104) {
         parse_local_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_alpha;
        break;
      }

      // optional float alpha = 14 [default = 1];
      case 14: {
        if (tag == 117) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_beta;
        break;
      }

      // optional float beta = 15 [default = 0.75];
      case 15: {
        if (tag == 125) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_source;
        break;
      }

      // optional string source = 16;
      case 16: {
        if (tag == 130) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_scale;
        break;
      }

      // optional float scale = 17 [default = 1];
      case 17: {
        if (tag == 141) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_meanfile;
        break;
      }

      // optional string meanfile = 18;
      case 18: {
        if (tag == 146) {
         parse_meanfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meanfile().data(), this->meanfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.meanfile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_batchsize;
        break;
      }

      // optional uint32 batchsize = 19;
      case 19: {
        if (tag == 152) {
         parse_batchsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batchsize_)));
          set_has_batchsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_cropsize;
        break;
      }

      // optional uint32 cropsize = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_cropsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cropsize_)));
          set_has_cropsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 21 [default = false];
      case 21: {
        if (tag == 168) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_k;
        break;
      }

      // optional float k = 22 [default = 1];
      case 22: {
        if (tag == 181) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_blobs;
        break;
      }

      // repeated .caffe.BlobProto blobs = 50;
      case 50: {
        if (tag == 402) {
         parse_blobs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(413)) goto parse_blobs_lr;
        break;
      }

      // repeated float blobs_lr = 51;
      case 51: {
        if (tag == 413) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 413, input, this->mutable_blobs_lr())));
        } else if (tag == 410) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(413)) goto parse_blobs_lr;
        if (input->ExpectTag(421)) goto parse_weight_decay;
        break;
      }

      // repeated float weight_decay = 52;
      case 52: {
        if (tag == 421) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 421, input, this->mutable_weight_decay())));
        } else if (tag == 418) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(421)) goto parse_weight_decay;
        if (input->ExpectTag(424)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 53 [default = 0];
      case 53: {
        if (tag == 424) {
         parse_rand_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
          set_has_rand_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(437)) goto parse_det_fg_threshold;
        break;
      }

      // optional float det_fg_threshold = 54 [default = 0.5];
      case 54: {
        if (tag == 437) {
         parse_det_fg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_threshold_)));
          set_has_det_fg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(445)) goto parse_det_bg_threshold;
        break;
      }

      // optional float det_bg_threshold = 55 [default = 0.5];
      case 55: {
        if (tag == 445) {
         parse_det_bg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_bg_threshold_)));
          set_has_det_bg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(453)) goto parse_det_fg_fraction;
        break;
      }

      // optional float det_fg_fraction = 56 [default = 0.25];
      case 56: {
        if (tag == 453) {
         parse_det_fg_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_fraction_)));
          set_has_det_fg_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_det_context_pad;
        break;
      }

      // optional uint32 det_context_pad = 58 [default = 0];
      case 58: {
        if (tag == 464) {
         parse_det_context_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &det_context_pad_)));
          set_has_det_context_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_det_crop_mode;
        break;
      }

      // optional string det_crop_mode = 59 [default = "warp"];
      case 59: {
        if (tag == 474) {
         parse_det_crop_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det_crop_mode().data(), this->det_crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.det_crop_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_new_num;
        break;
      }

      // optional int32 new_num = 60 [default = 0];
      case 60: {
        if (tag == 480) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_new_channels;
        break;
      }

      // optional int32 new_channels = 61 [default = 0];
      case 61: {
        if (tag == 488) {
         parse_new_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_channels_)));
          set_has_new_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_new_height;
        break;
      }

      // optional int32 new_height = 62 [default = 0];
      case 62: {
        if (tag == 496) {
         parse_new_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_height_)));
          set_has_new_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_new_width;
        break;
      }

      // optional int32 new_width = 63 [default = 0];
      case 63: {
        if (tag == 504) {
         parse_new_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_width_)));
          set_has_new_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_shuffle_images;
        break;
      }

      // optional bool shuffle_images = 64 [default = false];
      case 64: {
        if (tag == 512) {
         parse_shuffle_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_images_)));
          set_has_shuffle_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_concat_dim;
        break;
      }

      // optional uint32 concat_dim = 65 [default = 1];
      case 65: {
        if (tag == 520) {
         parse_concat_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
          set_has_concat_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V0LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V0LayerParameter)
  return false;
#undef DO_
}

void V0LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V0LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional uint32 num_output = 3;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_output(), output);
  }

  // optional bool biasterm = 4 [default = true];
  if (has_biasterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->biasterm(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->bias_filler_, output);
  }

  // optional uint32 pad = 7 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad(), output);
  }

  // optional uint32 kernelsize = 8;
  if (has_kernelsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernelsize(), output);
  }

  // optional uint32 group = 9 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group(), output);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride(), output);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pool(), output);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dropout_ratio(), output);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->local_size(), output);
  }

  // optional float alpha = 14 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->alpha(), output);
  }

  // optional float beta = 15 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->beta(), output);
  }

  // optional string source = 16;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->source(), output);
  }

  // optional float scale = 17 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->scale(), output);
  }

  // optional string meanfile = 18;
  if (has_meanfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->meanfile(), output);
  }

  // optional uint32 batchsize = 19;
  if (has_batchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->batchsize(), output);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (has_cropsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cropsize(), output);
  }

  // optional bool mirror = 21 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mirror(), output);
  }

  // optional float k = 22 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->k(), output);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->blobs(i), output);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      51, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 52;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      52, this->weight_decay(i), output);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->rand_skip(), output);
  }

  // optional float det_fg_threshold = 54 [default = 0.5];
  if (has_det_fg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->det_fg_threshold(), output);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (has_det_bg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->det_bg_threshold(), output);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (has_det_fg_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->det_fg_fraction(), output);
  }

  // optional uint32 det_context_pad = 58 [default = 0];
  if (has_det_context_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->det_context_pad(), output);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (has_det_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->det_crop_mode(), output);
  }

  // optional int32 new_num = 60 [default = 0];
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->new_num(), output);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (has_new_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->new_channels(), output);
  }

  // optional int32 new_height = 62 [default = 0];
  if (has_new_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->new_height(), output);
  }

  // optional int32 new_width = 63 [default = 0];
  if (has_new_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->new_width(), output);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (has_shuffle_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->shuffle_images(), output);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->concat_dim(), output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->hdf5_output_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V0LayerParameter)
}

::google::protobuf::uint8* V0LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V0LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional uint32 num_output = 3;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_output(), target);
  }

  // optional bool biasterm = 4 [default = true];
  if (has_biasterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->biasterm(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->weight_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->bias_filler_, target);
  }

  // optional uint32 pad = 7 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad(), target);
  }

  // optional uint32 kernelsize = 8;
  if (has_kernelsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernelsize(), target);
  }

  // optional uint32 group = 9 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride(), target);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pool(), target);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_ratio(), target);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->local_size(), target);
  }

  // optional float alpha = 14 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->alpha(), target);
  }

  // optional float beta = 15 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->beta(), target);
  }

  // optional string source = 16;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->source(), target);
  }

  // optional float scale = 17 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->scale(), target);
  }

  // optional string meanfile = 18;
  if (has_meanfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->meanfile(), target);
  }

  // optional uint32 batchsize = 19;
  if (has_batchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->batchsize(), target);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (has_cropsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cropsize(), target);
  }

  // optional bool mirror = 21 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mirror(), target);
  }

  // optional float k = 22 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->k(), target);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->blobs(i), target);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(51, this->blobs_lr(i), target);
  }

  // repeated float weight_decay = 52;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(52, this->weight_decay(i), target);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->rand_skip(), target);
  }

  // optional float det_fg_threshold = 54 [default = 0.5];
  if (has_det_fg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->det_fg_threshold(), target);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (has_det_bg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->det_bg_threshold(), target);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (has_det_fg_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->det_fg_fraction(), target);
  }

  // optional uint32 det_context_pad = 58 [default = 0];
  if (has_det_context_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->det_context_pad(), target);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (has_det_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->det_crop_mode(), target);
  }

  // optional int32 new_num = 60 [default = 0];
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->new_num(), target);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (has_new_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->new_channels(), target);
  }

  // optional int32 new_height = 62 [default = 0];
  if (has_new_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->new_height(), target);
  }

  // optional int32 new_width = 63 [default = 0];
  if (has_new_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->new_width(), target);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (has_shuffle_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->shuffle_images(), target);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->concat_dim(), target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, *this->hdf5_output_param_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V0LayerParameter)
  return target;
}

int V0LayerParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V0LayerParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 num_output = 3;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool biasterm = 4 [default = true];
    if (has_biasterm()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 5;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 6;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 pad = 7 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernelsize = 8;
    if (has_kernelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernelsize());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 group = 9 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 stride = 10 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 local_size = 13 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 14 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 15 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float k = 22 [default = 1];
    if (has_k()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional string source = 16;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional float scale = 17 [default = 1];
    if (has_scale()) {
      total_size += 2 + 4;
    }

    // optional string meanfile = 18;
    if (has_meanfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanfile());
    }

    // optional uint32 batchsize = 19;
    if (has_batchsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batchsize());
    }

    // optional uint32 cropsize = 20 [default = 0];
    if (has_cropsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cropsize());
    }

    // optional bool mirror = 21 [default = false];
    if (has_mirror()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[25 / 32] & 4261412864u) {
    // optional uint32 rand_skip = 53 [default = 0];
    if (has_rand_skip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional float det_fg_threshold = 54 [default = 0.5];
    if (has_det_fg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    if (has_det_bg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    if (has_det_fg_fraction()) {
      total_size += 2 + 4;
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    if (has_det_context_pad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->det_context_pad());
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    if (has_det_crop_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det_crop_mode());
    }

    // optional int32 new_num = 60 [default = 0];
    if (has_new_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_num());
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional int32 new_channels = 61 [default = 0];
    if (has_new_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_channels());
    }

    // optional int32 new_height = 62 [default = 0];
    if (has_new_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_height());
    }

    // optional int32 new_width = 63 [default = 0];
    if (has_new_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_width());
    }

    // optional bool shuffle_images = 64 [default = false];
    if (has_shuffle_images()) {
      total_size += 2 + 1;
    }

    // optional uint32 concat_dim = 65 [default = 1];
    if (has_concat_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  // repeated .caffe.BlobProto blobs = 50;
  total_size += 2 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated float blobs_lr = 51;
  {
    int data_size = 0;
    data_size = 4 * this->blobs_lr_size();
    total_size += 2 * this->blobs_lr_size() + data_size;
  }

  // repeated float weight_decay = 52;
  {
    int data_size = 0;
    data_size = 4 * this->weight_decay_size();
    total_size += 2 * this->weight_decay_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V0LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V0LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const V0LayerParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const V0LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V0LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V0LayerParameter)
    MergeFrom(*source);
  }
}

void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V0LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_biasterm()) {
      set_biasterm(from.biasterm());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_kernelsize()) {
      set_kernelsize(from.kernelsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_meanfile()) {
      set_has_meanfile();
      meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
    }
    if (from.has_batchsize()) {
      set_batchsize(from.batchsize());
    }
    if (from.has_cropsize()) {
      set_cropsize(from.cropsize());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_det_fg_threshold()) {
      set_det_fg_threshold(from.det_fg_threshold());
    }
    if (from.has_det_bg_threshold()) {
      set_det_bg_threshold(from.det_bg_threshold());
    }
    if (from.has_det_fg_fraction()) {
      set_det_fg_fraction(from.det_fg_fraction());
    }
    if (from.has_det_context_pad()) {
      set_det_context_pad(from.det_context_pad());
    }
    if (from.has_det_crop_mode()) {
      set_has_det_crop_mode();
      det_crop_mode_.AssignWithDefault(_default_det_crop_mode_, from.det_crop_mode_);
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_new_channels()) {
      set_new_channels(from.new_channels());
    }
    if (from.has_new_height()) {
      set_new_height(from.new_height());
    }
    if (from.has_new_width()) {
      set_new_width(from.new_width());
    }
    if (from.has_shuffle_images()) {
      set_shuffle_images(from.shuffle_images());
    }
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void V0LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {

  return true;
}

void V0LayerParameter::Swap(V0LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(num_output_, other->num_output_);
  std::swap(biasterm_, other->biasterm_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(pad_, other->pad_);
  std::swap(kernelsize_, other->kernelsize_);
  std::swap(group_, other->group_);
  std::swap(stride_, other->stride_);
  std::swap(pool_, other->pool_);
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(local_size_, other->local_size_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(k_, other->k_);
  source_.Swap(&other->source_);
  std::swap(scale_, other->scale_);
  meanfile_.Swap(&other->meanfile_);
  std::swap(batchsize_, other->batchsize_);
  std::swap(cropsize_, other->cropsize_);
  std::swap(mirror_, other->mirror_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  blobs_lr_.UnsafeArenaSwap(&other->blobs_lr_);
  weight_decay_.UnsafeArenaSwap(&other->weight_decay_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(det_fg_threshold_, other->det_fg_threshold_);
  std::swap(det_bg_threshold_, other->det_bg_threshold_);
  std::swap(det_fg_fraction_, other->det_fg_fraction_);
  std::swap(det_context_pad_, other->det_context_pad_);
  det_crop_mode_.Swap(&other->det_crop_mode_);
  std::swap(new_num_, other->new_num_);
  std::swap(new_channels_, other->new_channels_);
  std::swap(new_height_, other->new_height_);
  std::swap(new_width_, other->new_width_);
  std::swap(shuffle_images_, other->shuffle_images_);
  std::swap(concat_dim_, other->concat_dim_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V0LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = V0LayerParameter_descriptor_;
  metadata.reflection = V0LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V0LayerParameter

// optional string name = 1;
bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
 void V0LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
 void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
 ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
 void V0LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
 void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
 ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
 void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00000008u;
}
void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00000008u;
}
void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
 bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
 void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
 ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
 void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000080u;
}
void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000080u;
}
void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
 ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
 void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
 ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
 void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
 ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
 void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000400u;
}
void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000400u;
}
void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
 ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
 void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
 float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
 void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00001000u;
}
void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
 ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
 void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00002000u;
}
void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00002000u;
}
void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
 float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
 void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x00004000u;
}
void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
 float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
 void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x00008000u;
}
void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00008000u;
}
void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
 float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
 void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
 void V0LayerParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
 void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
 ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00020000u;
}
void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
 float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
 void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00040000u;
}
void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00040000u;
}
void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
 const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
 void V0LayerParameter::set_meanfile(const char* value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
 void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
 ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00080000u;
}
void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00080000u;
}
void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
 ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
 void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00100000u;
}
void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00100000u;
}
void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
 ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
 void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00200000u;
}
void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00200000u;
}
void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
 bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
 void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
 float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
 void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
 void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
 const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
 ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
 float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
 void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
 void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
 const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
 ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x02000000u;
}
void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x02000000u;
}
void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
 ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
 void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
 float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
 void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[0] |= 0x08000000u;
}
void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[0] &= ~0x08000000u;
}
void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
 float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
 void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[0] |= 0x10000000u;
}
void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[0] &= ~0x10000000u;
}
void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
 float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
 void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x20000000u;
}
void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x20000000u;
}
void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
 ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
 void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x40000000u;
}
void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(_default_det_crop_mode_);
  clear_has_det_crop_mode();
}
 const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena(_default_det_crop_mode_);
}
 void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
 void V0LayerParameter::set_det_crop_mode(const char* value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
 void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
 ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(_default_det_crop_mode_);
}
 ::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(_default_det_crop_mode_);
}
 void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(_default_det_crop_mode_, det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x80000000u;
}
void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x80000000u;
}
void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
 ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
 void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_new_channels() {
  _has_bits_[1] |= 0x00000001u;
}
void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[1] &= ~0x00000001u;
}
void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
 ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
 void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_new_height() {
  _has_bits_[1] |= 0x00000002u;
}
void V0LayerParameter::clear_has_new_height() {
  _has_bits_[1] &= ~0x00000002u;
}
void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
 ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
 void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_new_width() {
  _has_bits_[1] |= 0x00000004u;
}
void V0LayerParameter::clear_has_new_width() {
  _has_bits_[1] &= ~0x00000004u;
}
void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
 ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
 void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[1] |= 0x00000008u;
}
void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[1] &= ~0x00000008u;
}
void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
 bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
 void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[1] |= 0x00000010u;
}
void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[1] &= ~0x00000010u;
}
void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
 ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
 void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000020u;
}
void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripletLossParameter::kMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripletLossParameter::TripletLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TripletLossParameter)
}

void TripletLossParameter::InitAsDefaultInstance() {
}

TripletLossParameter::TripletLossParameter(const TripletLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TripletLossParameter)
}

void TripletLossParameter::SharedCtor() {
  _cached_size_ = 0;
  margin_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripletLossParameter::~TripletLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.TripletLossParameter)
  SharedDtor();
}

void TripletLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripletLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripletLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripletLossParameter_descriptor_;
}

const TripletLossParameter& TripletLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TripletLossParameter* TripletLossParameter::default_instance_ = NULL;

TripletLossParameter* TripletLossParameter::New(::google::protobuf::Arena* arena) const {
  TripletLossParameter* n = new TripletLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripletLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TripletLossParameter)
  margin_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TripletLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TripletLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TripletLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TripletLossParameter)
  return false;
#undef DO_
}

void TripletLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TripletLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TripletLossParameter)
}

::google::protobuf::uint8* TripletLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TripletLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TripletLossParameter)
  return target;
}

int TripletLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TripletLossParameter)
  int total_size = 0;

  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripletLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TripletLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TripletLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TripletLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TripletLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TripletLossParameter)
    MergeFrom(*source);
  }
}

void TripletLossParameter::MergeFrom(const TripletLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TripletLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_margin()) {
      set_margin(from.margin());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TripletLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TripletLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripletLossParameter::CopyFrom(const TripletLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TripletLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripletLossParameter::IsInitialized() const {

  return true;
}

void TripletLossParameter::Swap(TripletLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripletLossParameter::InternalSwap(TripletLossParameter* other) {
  std::swap(margin_, other->margin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripletLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripletLossParameter_descriptor_;
  metadata.reflection = TripletLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripletLossParameter

// optional float margin = 1 [default = 1];
bool TripletLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TripletLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void TripletLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void TripletLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
 float TripletLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.margin)
  return margin_;
}
 void TripletLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIPoolingParameter::kPooledHFieldNumber;
const int ROIPoolingParameter::kPooledWFieldNumber;
const int ROIPoolingParameter::kSpatialScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIPoolingParameter::ROIPoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ROIPoolingParameter)
}

void ROIPoolingParameter::InitAsDefaultInstance() {
}

ROIPoolingParameter::ROIPoolingParameter(const ROIPoolingParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ROIPoolingParameter)
}

void ROIPoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  pooled_h_ = 0u;
  pooled_w_ = 0u;
  spatial_scale_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROIPoolingParameter::~ROIPoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.ROIPoolingParameter)
  SharedDtor();
}

void ROIPoolingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROIPoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIPoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROIPoolingParameter_descriptor_;
}

const ROIPoolingParameter& ROIPoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ROIPoolingParameter* ROIPoolingParameter::default_instance_ = NULL;

ROIPoolingParameter* ROIPoolingParameter::New(::google::protobuf::Arena* arena) const {
  ROIPoolingParameter* n = new ROIPoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ROIPoolingParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ROIPoolingParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ROIPoolingParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(pooled_h_, pooled_w_);
    spatial_scale_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ROIPoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ROIPoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pooled_h = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pooled_h_)));
          set_has_pooled_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pooled_w;
        break;
      }

      // optional uint32 pooled_w = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pooled_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pooled_w_)));
          set_has_pooled_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_spatial_scale;
        break;
      }

      // optional float spatial_scale = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_spatial_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spatial_scale_)));
          set_has_spatial_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ROIPoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ROIPoolingParameter)
  return false;
#undef DO_
}

void ROIPoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ROIPoolingParameter)
  // optional uint32 pooled_h = 1 [default = 0];
  if (has_pooled_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pooled_h(), output);
  }

  // optional uint32 pooled_w = 2 [default = 0];
  if (has_pooled_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pooled_w(), output);
  }

  // optional float spatial_scale = 3 [default = 1];
  if (has_spatial_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->spatial_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ROIPoolingParameter)
}

::google::protobuf::uint8* ROIPoolingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ROIPoolingParameter)
  // optional uint32 pooled_h = 1 [default = 0];
  if (has_pooled_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pooled_h(), target);
  }

  // optional uint32 pooled_w = 2 [default = 0];
  if (has_pooled_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pooled_w(), target);
  }

  // optional float spatial_scale = 3 [default = 1];
  if (has_spatial_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->spatial_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ROIPoolingParameter)
  return target;
}

int ROIPoolingParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ROIPoolingParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 pooled_h = 1 [default = 0];
    if (has_pooled_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pooled_h());
    }

    // optional uint32 pooled_w = 2 [default = 0];
    if (has_pooled_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pooled_w());
    }

    // optional float spatial_scale = 3 [default = 1];
    if (has_spatial_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIPoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ROIPoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ROIPoolingParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIPoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ROIPoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ROIPoolingParameter)
    MergeFrom(*source);
  }
}

void ROIPoolingParameter::MergeFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ROIPoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pooled_h()) {
      set_pooled_h(from.pooled_h());
    }
    if (from.has_pooled_w()) {
      set_pooled_w(from.pooled_w());
    }
    if (from.has_spatial_scale()) {
      set_spatial_scale(from.spatial_scale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ROIPoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIPoolingParameter::CopyFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIPoolingParameter::IsInitialized() const {

  return true;
}

void ROIPoolingParameter::Swap(ROIPoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIPoolingParameter::InternalSwap(ROIPoolingParameter* other) {
  std::swap(pooled_h_, other->pooled_h_);
  std::swap(pooled_w_, other->pooled_w_);
  std::swap(spatial_scale_, other->spatial_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROIPoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROIPoolingParameter_descriptor_;
  metadata.reflection = ROIPoolingParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
bool ROIPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROIPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000001u;
}
void ROIPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  clear_has_pooled_h();
}
 ::google::protobuf::uint32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_h)
  return pooled_h_;
}
 void ROIPoolingParameter::set_pooled_h(::google::protobuf::uint32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
bool ROIPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROIPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000002u;
}
void ROIPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  clear_has_pooled_w();
}
 ::google::protobuf::uint32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_w)
  return pooled_w_;
}
 void ROIPoolingParameter::set_pooled_w(::google::protobuf::uint32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
bool ROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void ROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
 float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
 void ROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.spatial_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsanityParameter::kLbFieldNumber;
const int InsanityParameter::kUbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsanityParameter::InsanityParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InsanityParameter)
}

void InsanityParameter::InitAsDefaultInstance() {
}

InsanityParameter::InsanityParameter(const InsanityParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InsanityParameter)
}

void InsanityParameter::SharedCtor() {
  _cached_size_ = 0;
  lb_ = 5;
  ub_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsanityParameter::~InsanityParameter() {
  // @@protoc_insertion_point(destructor:caffe.InsanityParameter)
  SharedDtor();
}

void InsanityParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InsanityParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsanityParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsanityParameter_descriptor_;
}

const InsanityParameter& InsanityParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InsanityParameter* InsanityParameter::default_instance_ = NULL;

InsanityParameter* InsanityParameter::New(::google::protobuf::Arena* arena) const {
  InsanityParameter* n = new InsanityParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsanityParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InsanityParameter)
  if (_has_bits_[0 / 32] & 3u) {
    lb_ = 5;
    ub_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InsanityParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InsanityParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lb = 1 [default = 5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lb_)));
          set_has_lb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ub;
        break;
      }

      // optional float ub = 2 [default = 10];
      case 2: {
        if (tag == 21) {
         parse_ub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ub_)));
          set_has_ub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InsanityParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InsanityParameter)
  return false;
#undef DO_
}

void InsanityParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InsanityParameter)
  // optional float lb = 1 [default = 5];
  if (has_lb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lb(), output);
  }

  // optional float ub = 2 [default = 10];
  if (has_ub()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ub(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InsanityParameter)
}

::google::protobuf::uint8* InsanityParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InsanityParameter)
  // optional float lb = 1 [default = 5];
  if (has_lb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lb(), target);
  }

  // optional float ub = 2 [default = 10];
  if (has_ub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ub(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InsanityParameter)
  return target;
}

int InsanityParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InsanityParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float lb = 1 [default = 5];
    if (has_lb()) {
      total_size += 1 + 4;
    }

    // optional float ub = 2 [default = 10];
    if (has_ub()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsanityParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InsanityParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InsanityParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InsanityParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InsanityParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InsanityParameter)
    MergeFrom(*source);
  }
}

void InsanityParameter::MergeFrom(const InsanityParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InsanityParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lb()) {
      set_lb(from.lb());
    }
    if (from.has_ub()) {
      set_ub(from.ub());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InsanityParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InsanityParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsanityParameter::CopyFrom(const InsanityParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InsanityParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsanityParameter::IsInitialized() const {

  return true;
}

void InsanityParameter::Swap(InsanityParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsanityParameter::InternalSwap(InsanityParameter* other) {
  std::swap(lb_, other->lb_);
  std::swap(ub_, other->ub_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsanityParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsanityParameter_descriptor_;
  metadata.reflection = InsanityParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsanityParameter

// optional float lb = 1 [default = 5];
bool InsanityParameter::has_lb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsanityParameter::set_has_lb() {
  _has_bits_[0] |= 0x00000001u;
}
void InsanityParameter::clear_has_lb() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsanityParameter::clear_lb() {
  lb_ = 5;
  clear_has_lb();
}
 float InsanityParameter::lb() const {
  // @@protoc_insertion_point(field_get:caffe.InsanityParameter.lb)
  return lb_;
}
 void InsanityParameter::set_lb(float value) {
  set_has_lb();
  lb_ = value;
  // @@protoc_insertion_point(field_set:caffe.InsanityParameter.lb)
}

// optional float ub = 2 [default = 10];
bool InsanityParameter::has_ub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsanityParameter::set_has_ub() {
  _has_bits_[0] |= 0x00000002u;
}
void InsanityParameter::clear_has_ub() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsanityParameter::clear_ub() {
  ub_ = 10;
  clear_has_ub();
}
 float InsanityParameter::ub() const {
  // @@protoc_insertion_point(field_get:caffe.InsanityParameter.ub)
  return ub_;
}
 void InsanityParameter::set_ub(float value) {
  set_has_ub();
  ub_ = value;
  // @@protoc_insertion_point(field_set:caffe.InsanityParameter.ub)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PReLUParameter::kFillerFieldNumber;
const int PReLUParameter::kChannelSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PReLUParameter::PReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PReLUParameter)
}

void PReLUParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

PReLUParameter::PReLUParameter(const PReLUParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PReLUParameter)
}

void PReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  filler_ = NULL;
  channel_shared_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PReLUParameter::~PReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.PReLUParameter)
  SharedDtor();
}

void PReLUParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filler_;
  }
}

void PReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PReLUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PReLUParameter_descriptor_;
}

const PReLUParameter& PReLUParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PReLUParameter* PReLUParameter::default_instance_ = NULL;

PReLUParameter* PReLUParameter::New(::google::protobuf::Arena* arena) const {
  PReLUParameter* n = new PReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PReLUParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
    channel_shared_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter filler = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_shared;
        break;
      }

      // optional bool channel_shared = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_channel_shared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_shared_)));
          set_has_channel_shared();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PReLUParameter)
  return false;
#undef DO_
}

void PReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PReLUParameter)
  // optional .caffe.FillerParameter filler = 1;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->filler_, output);
  }

  // optional bool channel_shared = 2 [default = false];
  if (has_channel_shared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->channel_shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PReLUParameter)
}

::google::protobuf::uint8* PReLUParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PReLUParameter)
  // optional .caffe.FillerParameter filler = 1;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->filler_, target);
  }

  // optional bool channel_shared = 2 [default = false];
  if (has_channel_shared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->channel_shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PReLUParameter)
  return target;
}

int PReLUParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PReLUParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.FillerParameter filler = 1;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional bool channel_shared = 2 [default = false];
    if (has_channel_shared()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PReLUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PReLUParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PReLUParameter)
    MergeFrom(*source);
  }
}

void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PReLUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (from.has_channel_shared()) {
      set_channel_shared(from.channel_shared());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {

  return true;
}

void PReLUParameter::Swap(PReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PReLUParameter::InternalSwap(PReLUParameter* other) {
  std::swap(filler_, other->filler_);
  std::swap(channel_shared_, other->channel_shared_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PReLUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PReLUParameter_descriptor_;
  metadata.reflection = PReLUParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
 bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
 void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BNParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BNParameter_Engine_descriptor_;
}
bool BNParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BNParameter_Engine BNParameter::DEFAULT;
const BNParameter_Engine BNParameter::CAFFE;
const BNParameter_Engine BNParameter::CUDNN;
const BNParameter_Engine BNParameter::Engine_MIN;
const BNParameter_Engine BNParameter::Engine_MAX;
const int BNParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BNParameter::kSlopeFillerFieldNumber;
const int BNParameter::kBiasFillerFieldNumber;
const int BNParameter::kMomentumFieldNumber;
const int BNParameter::kEpsFieldNumber;
const int BNParameter::kFrozenFieldNumber;
const int BNParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BNParameter::BNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BNParameter)
}

void BNParameter::InitAsDefaultInstance() {
  slope_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

BNParameter::BNParameter(const BNParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BNParameter)
}

void BNParameter::SharedCtor() {
  _cached_size_ = 0;
  slope_filler_ = NULL;
  bias_filler_ = NULL;
  momentum_ = 0.9f;
  eps_ = 1e-05f;
  frozen_ = false;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BNParameter::~BNParameter() {
  // @@protoc_insertion_point(destructor:caffe.BNParameter)
  SharedDtor();
}

void BNParameter::SharedDtor() {
  if (this != default_instance_) {
    delete slope_filler_;
    delete bias_filler_;
  }
}

void BNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BNParameter_descriptor_;
}

const BNParameter& BNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BNParameter* BNParameter::default_instance_ = NULL;

BNParameter* BNParameter::New(::google::protobuf::Arena* arena) const {
  BNParameter* n = new BNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BNParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BNParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BNParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(frozen_, engine_);
    if (has_slope_filler()) {
      if (slope_filler_ != NULL) slope_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    momentum_ = 0.9f;
    eps_ = 1e-05f;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter slope_filler = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slope_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 2;
      case 2: {
        if (tag == 18) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_momentum;
        break;
      }

      // optional float momentum = 3 [default = 0.9];
      case 3: {
        if (tag == 29) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_eps;
        break;
      }

      // optional float eps = 4 [default = 1e-05];
      case 4: {
        if (tag == 37) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_frozen;
        break;
      }

      // optional bool frozen = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frozen_)));
          set_has_frozen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_engine;
        break;
      }

      // optional .caffe.BNParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BNParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::BNParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BNParameter)
  return false;
#undef DO_
}

void BNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BNParameter)
  // optional .caffe.FillerParameter slope_filler = 1;
  if (has_slope_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->slope_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 2;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bias_filler_, output);
  }

  // optional float momentum = 3 [default = 0.9];
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->momentum(), output);
  }

  // optional float eps = 4 [default = 1e-05];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->eps(), output);
  }

  // optional bool frozen = 5 [default = false];
  if (has_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->frozen(), output);
  }

  // optional .caffe.BNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BNParameter)
}

::google::protobuf::uint8* BNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BNParameter)
  // optional .caffe.FillerParameter slope_filler = 1;
  if (has_slope_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->slope_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 2;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->bias_filler_, target);
  }

  // optional float momentum = 3 [default = 0.9];
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->momentum(), target);
  }

  // optional float eps = 4 [default = 1e-05];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->eps(), target);
  }

  // optional bool frozen = 5 [default = false];
  if (has_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->frozen(), target);
  }

  // optional .caffe.BNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BNParameter)
  return target;
}

int BNParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BNParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .caffe.FillerParameter slope_filler = 1;
    if (has_slope_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slope_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 2;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional float momentum = 3 [default = 0.9];
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float eps = 4 [default = 1e-05];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional bool frozen = 5 [default = false];
    if (has_frozen()) {
      total_size += 1 + 1;
    }

    // optional .caffe.BNParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BNParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BNParameter)
    MergeFrom(*source);
  }
}

void BNParameter::MergeFrom(const BNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slope_filler()) {
      mutable_slope_filler()->::caffe::FillerParameter::MergeFrom(from.slope_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_frozen()) {
      set_frozen(from.frozen());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BNParameter::CopyFrom(const BNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BNParameter::IsInitialized() const {

  return true;
}

void BNParameter::Swap(BNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BNParameter::InternalSwap(BNParameter* other) {
  std::swap(slope_filler_, other->slope_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(momentum_, other->momentum_);
  std::swap(eps_, other->eps_);
  std::swap(frozen_, other->frozen_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BNParameter_descriptor_;
  metadata.reflection = BNParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BNParameter

// optional .caffe.FillerParameter slope_filler = 1;
bool BNParameter::has_slope_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BNParameter::set_has_slope_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void BNParameter::clear_has_slope_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void BNParameter::clear_slope_filler() {
  if (slope_filler_ != NULL) slope_filler_->::caffe::FillerParameter::Clear();
  clear_has_slope_filler();
}
const ::caffe::FillerParameter& BNParameter::slope_filler() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.slope_filler)
  return slope_filler_ != NULL ? *slope_filler_ : *default_instance_->slope_filler_;
}
::caffe::FillerParameter* BNParameter::mutable_slope_filler() {
  set_has_slope_filler();
  if (slope_filler_ == NULL) {
    slope_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BNParameter.slope_filler)
  return slope_filler_;
}
::caffe::FillerParameter* BNParameter::release_slope_filler() {
  // @@protoc_insertion_point(field_release:caffe.BNParameter.slope_filler)
  clear_has_slope_filler();
  ::caffe::FillerParameter* temp = slope_filler_;
  slope_filler_ = NULL;
  return temp;
}
void BNParameter::set_allocated_slope_filler(::caffe::FillerParameter* slope_filler) {
  delete slope_filler_;
  slope_filler_ = slope_filler;
  if (slope_filler) {
    set_has_slope_filler();
  } else {
    clear_has_slope_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BNParameter.slope_filler)
}

// optional .caffe.FillerParameter bias_filler = 2;
bool BNParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BNParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void BNParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void BNParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& BNParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* BNParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BNParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* BNParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.BNParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void BNParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BNParameter.bias_filler)
}

// optional float momentum = 3 [default = 0.9];
bool BNParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BNParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00000004u;
}
void BNParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000004u;
}
void BNParameter::clear_momentum() {
  momentum_ = 0.9f;
  clear_has_momentum();
}
 float BNParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.momentum)
  return momentum_;
}
 void BNParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.momentum)
}

// optional float eps = 4 [default = 1e-05];
bool BNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
void BNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
void BNParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
 float BNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.eps)
  return eps_;
}
 void BNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.eps)
}

// optional bool frozen = 5 [default = false];
bool BNParameter::has_frozen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BNParameter::set_has_frozen() {
  _has_bits_[0] |= 0x00000010u;
}
void BNParameter::clear_has_frozen() {
  _has_bits_[0] &= ~0x00000010u;
}
void BNParameter::clear_frozen() {
  frozen_ = false;
  clear_has_frozen();
}
 bool BNParameter::frozen() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.frozen)
  return frozen_;
}
 void BNParameter::set_frozen(bool value) {
  set_has_frozen();
  frozen_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.frozen)
}

// optional .caffe.BNParameter.Engine engine = 6 [default = DEFAULT];
bool BNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
void BNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
void BNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::caffe::BNParameter_Engine BNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.engine)
  return static_cast< ::caffe::BNParameter_Engine >(engine_);
}
 void BNParameter::set_engine(::caffe::BNParameter_Engine value) {
  assert(::caffe::BNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalParameter::kNumOutputFieldNumber;
const int LocalParameter::kBiasTermFieldNumber;
const int LocalParameter::kPadFieldNumber;
const int LocalParameter::kKernelSizeFieldNumber;
const int LocalParameter::kStrideFieldNumber;
const int LocalParameter::kWeightFillerFieldNumber;
const int LocalParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalParameter::LocalParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LocalParameter)
}

void LocalParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

LocalParameter::LocalParameter(const LocalParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LocalParameter)
}

void LocalParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  pad_ = 0u;
  kernel_size_ = 0u;
  stride_ = 1u;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalParameter::~LocalParameter() {
  // @@protoc_insertion_point(destructor:caffe.LocalParameter)
  SharedDtor();
}

void LocalParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void LocalParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalParameter_descriptor_;
}

const LocalParameter& LocalParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LocalParameter* LocalParameter::default_instance_ = NULL;

LocalParameter* LocalParameter::New(::google::protobuf::Arena* arena) const {
  LocalParameter* n = new LocalParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LocalParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LocalParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LocalParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(pad_, kernel_size_);
    num_output_ = 0u;
    bias_term_ = true;
    stride_ = 1u;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LocalParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LocalParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }

      // optional uint32 kernel_size = 4;
      case 4: {
        if (tag == 32) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (tag == 58) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (tag == 66) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LocalParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LocalParameter)
  return false;
#undef DO_
}

void LocalParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LocalParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional uint32 pad = 3 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad(), output);
  }

  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kernel_size(), output);
  }

  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stride(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LocalParameter)
}

::google::protobuf::uint8* LocalParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LocalParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional uint32 pad = 3 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad(), target);
  }

  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kernel_size(), target);
  }

  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stride(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->weight_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->bias_filler_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LocalParameter)
  return target;
}

int LocalParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LocalParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 pad = 3 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernel_size = 4;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 stride = 6 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LocalParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LocalParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LocalParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LocalParameter)
    MergeFrom(*source);
  }
}

void LocalParameter::MergeFrom(const LocalParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LocalParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LocalParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LocalParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalParameter::CopyFrom(const LocalParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LocalParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalParameter::IsInitialized() const {

  return true;
}

void LocalParameter::Swap(LocalParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalParameter::InternalSwap(LocalParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(pad_, other->pad_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(stride_, other->stride_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalParameter_descriptor_;
  metadata.reflection = LocalParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalParameter

// optional uint32 num_output = 1;
bool LocalParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 LocalParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.num_output)
  return num_output_;
}
 void LocalParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool LocalParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
 bool LocalParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.bias_term)
  return bias_term_;
}
 void LocalParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.bias_term)
}

// optional uint32 pad = 3 [default = 0];
bool LocalParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
 ::google::protobuf::uint32 LocalParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.pad)
  return pad_;
}
 void LocalParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.pad)
}

// optional uint32 kernel_size = 4;
bool LocalParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
 ::google::protobuf::uint32 LocalParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.kernel_size)
  return kernel_size_;
}
 void LocalParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.kernel_size)
}

// optional uint32 stride = 6 [default = 1];
bool LocalParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
 ::google::protobuf::uint32 LocalParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.stride)
  return stride_;
}
 void LocalParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.stride)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool LocalParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LocalParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
}
void LocalParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
void LocalParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& LocalParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* LocalParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LocalParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* LocalParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.LocalParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void LocalParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LocalParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool LocalParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LocalParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
}
void LocalParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
void LocalParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& LocalParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* LocalParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LocalParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* LocalParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.LocalParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void LocalParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LocalParameter.bias_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EltwiseAffineParameter::kSlopeFillerFieldNumber;
const int EltwiseAffineParameter::kBiasFillerFieldNumber;
const int EltwiseAffineParameter::kChannelSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EltwiseAffineParameter::EltwiseAffineParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EltwiseAffineParameter)
}

void EltwiseAffineParameter::InitAsDefaultInstance() {
  slope_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

EltwiseAffineParameter::EltwiseAffineParameter(const EltwiseAffineParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.EltwiseAffineParameter)
}

void EltwiseAffineParameter::SharedCtor() {
  _cached_size_ = 0;
  slope_filler_ = NULL;
  bias_filler_ = NULL;
  channel_shared_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EltwiseAffineParameter::~EltwiseAffineParameter() {
  // @@protoc_insertion_point(destructor:caffe.EltwiseAffineParameter)
  SharedDtor();
}

void EltwiseAffineParameter::SharedDtor() {
  if (this != default_instance_) {
    delete slope_filler_;
    delete bias_filler_;
  }
}

void EltwiseAffineParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseAffineParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseAffineParameter_descriptor_;
}

const EltwiseAffineParameter& EltwiseAffineParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

EltwiseAffineParameter* EltwiseAffineParameter::default_instance_ = NULL;

EltwiseAffineParameter* EltwiseAffineParameter::New(::google::protobuf::Arena* arena) const {
  EltwiseAffineParameter* n = new EltwiseAffineParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EltwiseAffineParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EltwiseAffineParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_slope_filler()) {
      if (slope_filler_ != NULL) slope_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    channel_shared_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EltwiseAffineParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EltwiseAffineParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter slope_filler = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slope_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 2;
      case 2: {
        if (tag == 18) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_shared;
        break;
      }

      // optional bool channel_shared = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_channel_shared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_shared_)));
          set_has_channel_shared();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EltwiseAffineParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EltwiseAffineParameter)
  return false;
#undef DO_
}

void EltwiseAffineParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EltwiseAffineParameter)
  // optional .caffe.FillerParameter slope_filler = 1;
  if (has_slope_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->slope_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 2;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bias_filler_, output);
  }

  // optional bool channel_shared = 3 [default = false];
  if (has_channel_shared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->channel_shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EltwiseAffineParameter)
}

::google::protobuf::uint8* EltwiseAffineParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseAffineParameter)
  // optional .caffe.FillerParameter slope_filler = 1;
  if (has_slope_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->slope_filler_, target);
  }

  // optional .caffe.FillerParameter bias_filler = 2;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->bias_filler_, target);
  }

  // optional bool channel_shared = 3 [default = false];
  if (has_channel_shared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->channel_shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseAffineParameter)
  return target;
}

int EltwiseAffineParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EltwiseAffineParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.FillerParameter slope_filler = 1;
    if (has_slope_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slope_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 2;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional bool channel_shared = 3 [default = false];
    if (has_channel_shared()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseAffineParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EltwiseAffineParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EltwiseAffineParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EltwiseAffineParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EltwiseAffineParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EltwiseAffineParameter)
    MergeFrom(*source);
  }
}

void EltwiseAffineParameter::MergeFrom(const EltwiseAffineParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EltwiseAffineParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slope_filler()) {
      mutable_slope_filler()->::caffe::FillerParameter::MergeFrom(from.slope_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_channel_shared()) {
      set_channel_shared(from.channel_shared());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EltwiseAffineParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EltwiseAffineParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseAffineParameter::CopyFrom(const EltwiseAffineParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EltwiseAffineParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseAffineParameter::IsInitialized() const {

  return true;
}

void EltwiseAffineParameter::Swap(EltwiseAffineParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EltwiseAffineParameter::InternalSwap(EltwiseAffineParameter* other) {
  std::swap(slope_filler_, other->slope_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(channel_shared_, other->channel_shared_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EltwiseAffineParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EltwiseAffineParameter_descriptor_;
  metadata.reflection = EltwiseAffineParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EltwiseAffineParameter

// optional .caffe.FillerParameter slope_filler = 1;
bool EltwiseAffineParameter::has_slope_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EltwiseAffineParameter::set_has_slope_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void EltwiseAffineParameter::clear_has_slope_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void EltwiseAffineParameter::clear_slope_filler() {
  if (slope_filler_ != NULL) slope_filler_->::caffe::FillerParameter::Clear();
  clear_has_slope_filler();
}
const ::caffe::FillerParameter& EltwiseAffineParameter::slope_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseAffineParameter.slope_filler)
  return slope_filler_ != NULL ? *slope_filler_ : *default_instance_->slope_filler_;
}
::caffe::FillerParameter* EltwiseAffineParameter::mutable_slope_filler() {
  set_has_slope_filler();
  if (slope_filler_ == NULL) {
    slope_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EltwiseAffineParameter.slope_filler)
  return slope_filler_;
}
::caffe::FillerParameter* EltwiseAffineParameter::release_slope_filler() {
  // @@protoc_insertion_point(field_release:caffe.EltwiseAffineParameter.slope_filler)
  clear_has_slope_filler();
  ::caffe::FillerParameter* temp = slope_filler_;
  slope_filler_ = NULL;
  return temp;
}
void EltwiseAffineParameter::set_allocated_slope_filler(::caffe::FillerParameter* slope_filler) {
  delete slope_filler_;
  slope_filler_ = slope_filler;
  if (slope_filler) {
    set_has_slope_filler();
  } else {
    clear_has_slope_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EltwiseAffineParameter.slope_filler)
}

// optional .caffe.FillerParameter bias_filler = 2;
bool EltwiseAffineParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EltwiseAffineParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void EltwiseAffineParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void EltwiseAffineParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& EltwiseAffineParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseAffineParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::caffe::FillerParameter* EltwiseAffineParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EltwiseAffineParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* EltwiseAffineParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EltwiseAffineParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void EltwiseAffineParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EltwiseAffineParameter.bias_filler)
}

// optional bool channel_shared = 3 [default = false];
bool EltwiseAffineParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EltwiseAffineParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000004u;
}
void EltwiseAffineParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000004u;
}
void EltwiseAffineParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
 bool EltwiseAffineParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseAffineParameter.channel_shared)
  return channel_shared_;
}
 void EltwiseAffineParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseAffineParameter.channel_shared)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubRegionParameter::kRegionHeightFieldNumber;
const int SubRegionParameter::kRegionWidthFieldNumber;
const int SubRegionParameter::kDataHeightFieldNumber;
const int SubRegionParameter::kDataWidthFieldNumber;
const int SubRegionParameter::kAsDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubRegionParameter::SubRegionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SubRegionParameter)
}

void SubRegionParameter::InitAsDefaultInstance() {
}

SubRegionParameter::SubRegionParameter(const SubRegionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SubRegionParameter)
}

void SubRegionParameter::SharedCtor() {
  _cached_size_ = 0;
  region_height_ = 0u;
  region_width_ = 0u;
  data_height_ = 0u;
  data_width_ = 0u;
  as_dim_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubRegionParameter::~SubRegionParameter() {
  // @@protoc_insertion_point(destructor:caffe.SubRegionParameter)
  SharedDtor();
}

void SubRegionParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubRegionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubRegionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubRegionParameter_descriptor_;
}

const SubRegionParameter& SubRegionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SubRegionParameter* SubRegionParameter::default_instance_ = NULL;

SubRegionParameter* SubRegionParameter::New(::google::protobuf::Arena* arena) const {
  SubRegionParameter* n = new SubRegionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubRegionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SubRegionParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubRegionParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubRegionParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(region_height_, data_width_);
    as_dim_ = 1u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubRegionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SubRegionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 region_height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_height_)));
          set_has_region_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region_width;
        break;
      }

      // optional uint32 region_width = 2;
      case 2: {
        if (tag == 16) {
         parse_region_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_width_)));
          set_has_region_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_height;
        break;
      }

      // optional uint32 data_height = 3;
      case 3: {
        if (tag == 24) {
         parse_data_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_height_)));
          set_has_data_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_width;
        break;
      }

      // optional uint32 data_width = 4;
      case 4: {
        if (tag == 32) {
         parse_data_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_width_)));
          set_has_data_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_as_dim;
        break;
      }

      // optional uint32 as_dim = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_as_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &as_dim_)));
          set_has_as_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SubRegionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SubRegionParameter)
  return false;
#undef DO_
}

void SubRegionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SubRegionParameter)
  // optional uint32 region_height = 1;
  if (has_region_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_height(), output);
  }

  // optional uint32 region_width = 2;
  if (has_region_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region_width(), output);
  }

  // optional uint32 data_height = 3;
  if (has_data_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_height(), output);
  }

  // optional uint32 data_width = 4;
  if (has_data_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data_width(), output);
  }

  // optional uint32 as_dim = 5 [default = 1];
  if (has_as_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->as_dim(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SubRegionParameter)
}

::google::protobuf::uint8* SubRegionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SubRegionParameter)
  // optional uint32 region_height = 1;
  if (has_region_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_height(), target);
  }

  // optional uint32 region_width = 2;
  if (has_region_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region_width(), target);
  }

  // optional uint32 data_height = 3;
  if (has_data_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_height(), target);
  }

  // optional uint32 data_width = 4;
  if (has_data_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data_width(), target);
  }

  // optional uint32 as_dim = 5 [default = 1];
  if (has_as_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->as_dim(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SubRegionParameter)
  return target;
}

int SubRegionParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SubRegionParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 region_height = 1;
    if (has_region_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_height());
    }

    // optional uint32 region_width = 2;
    if (has_region_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_width());
    }

    // optional uint32 data_height = 3;
    if (has_data_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_height());
    }

    // optional uint32 data_width = 4;
    if (has_data_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_width());
    }

    // optional uint32 as_dim = 5 [default = 1];
    if (has_as_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->as_dim());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubRegionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SubRegionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubRegionParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubRegionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SubRegionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SubRegionParameter)
    MergeFrom(*source);
  }
}

void SubRegionParameter::MergeFrom(const SubRegionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SubRegionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_height()) {
      set_region_height(from.region_height());
    }
    if (from.has_region_width()) {
      set_region_width(from.region_width());
    }
    if (from.has_data_height()) {
      set_data_height(from.data_height());
    }
    if (from.has_data_width()) {
      set_data_width(from.data_width());
    }
    if (from.has_as_dim()) {
      set_as_dim(from.as_dim());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubRegionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SubRegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubRegionParameter::CopyFrom(const SubRegionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SubRegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubRegionParameter::IsInitialized() const {

  return true;
}

void SubRegionParameter::Swap(SubRegionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubRegionParameter::InternalSwap(SubRegionParameter* other) {
  std::swap(region_height_, other->region_height_);
  std::swap(region_width_, other->region_width_);
  std::swap(data_height_, other->data_height_);
  std::swap(data_width_, other->data_width_);
  std::swap(as_dim_, other->as_dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubRegionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubRegionParameter_descriptor_;
  metadata.reflection = SubRegionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubRegionParameter

// optional uint32 region_height = 1;
bool SubRegionParameter::has_region_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubRegionParameter::set_has_region_height() {
  _has_bits_[0] |= 0x00000001u;
}
void SubRegionParameter::clear_has_region_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubRegionParameter::clear_region_height() {
  region_height_ = 0u;
  clear_has_region_height();
}
 ::google::protobuf::uint32 SubRegionParameter::region_height() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.region_height)
  return region_height_;
}
 void SubRegionParameter::set_region_height(::google::protobuf::uint32 value) {
  set_has_region_height();
  region_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.region_height)
}

// optional uint32 region_width = 2;
bool SubRegionParameter::has_region_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubRegionParameter::set_has_region_width() {
  _has_bits_[0] |= 0x00000002u;
}
void SubRegionParameter::clear_has_region_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubRegionParameter::clear_region_width() {
  region_width_ = 0u;
  clear_has_region_width();
}
 ::google::protobuf::uint32 SubRegionParameter::region_width() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.region_width)
  return region_width_;
}
 void SubRegionParameter::set_region_width(::google::protobuf::uint32 value) {
  set_has_region_width();
  region_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.region_width)
}

// optional uint32 data_height = 3;
bool SubRegionParameter::has_data_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubRegionParameter::set_has_data_height() {
  _has_bits_[0] |= 0x00000004u;
}
void SubRegionParameter::clear_has_data_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubRegionParameter::clear_data_height() {
  data_height_ = 0u;
  clear_has_data_height();
}
 ::google::protobuf::uint32 SubRegionParameter::data_height() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.data_height)
  return data_height_;
}
 void SubRegionParameter::set_data_height(::google::protobuf::uint32 value) {
  set_has_data_height();
  data_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.data_height)
}

// optional uint32 data_width = 4;
bool SubRegionParameter::has_data_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubRegionParameter::set_has_data_width() {
  _has_bits_[0] |= 0x00000008u;
}
void SubRegionParameter::clear_has_data_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubRegionParameter::clear_data_width() {
  data_width_ = 0u;
  clear_has_data_width();
}
 ::google::protobuf::uint32 SubRegionParameter::data_width() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.data_width)
  return data_width_;
}
 void SubRegionParameter::set_data_width(::google::protobuf::uint32 value) {
  set_has_data_width();
  data_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.data_width)
}

// optional uint32 as_dim = 5 [default = 1];
bool SubRegionParameter::has_as_dim() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubRegionParameter::set_has_as_dim() {
  _has_bits_[0] |= 0x00000010u;
}
void SubRegionParameter::clear_has_as_dim() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubRegionParameter::clear_as_dim() {
  as_dim_ = 1u;
  clear_has_as_dim();
}
 ::google::protobuf::uint32 SubRegionParameter::as_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.as_dim)
  return as_dim_;
}
 void SubRegionParameter::set_as_dim(::google::protobuf::uint32 value) {
  set_has_as_dim();
  as_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.as_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoiseParameter::kGaussianStdFieldNumber;
const int NoiseParameter::kUniformRangeFieldNumber;
const int NoiseParameter::kBiasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoiseParameter::NoiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NoiseParameter)
}

void NoiseParameter::InitAsDefaultInstance() {
}

NoiseParameter::NoiseParameter(const NoiseParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NoiseParameter)
}

void NoiseParameter::SharedCtor() {
  _cached_size_ = 0;
  gaussian_std_ = 0;
  uniform_range_ = 0;
  bias_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoiseParameter::~NoiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.NoiseParameter)
  SharedDtor();
}

void NoiseParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseParameter_descriptor_;
}

const NoiseParameter& NoiseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NoiseParameter* NoiseParameter::default_instance_ = NULL;

NoiseParameter* NoiseParameter::New(::google::protobuf::Arena* arena) const {
  NoiseParameter* n = new NoiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NoiseParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NoiseParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NoiseParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gaussian_std_, bias_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NoiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NoiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float gaussian_std = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaussian_std_)));
          set_has_gaussian_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_uniform_range;
        break;
      }

      // optional float uniform_range = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_uniform_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uniform_range_)));
          set_has_uniform_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bias;
        break;
      }

      // optional float bias = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NoiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NoiseParameter)
  return false;
#undef DO_
}

void NoiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NoiseParameter)
  // optional float gaussian_std = 1 [default = 0];
  if (has_gaussian_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gaussian_std(), output);
  }

  // optional float uniform_range = 2 [default = 0];
  if (has_uniform_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->uniform_range(), output);
  }

  // optional float bias = 3 [default = 0];
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bias(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NoiseParameter)
}

::google::protobuf::uint8* NoiseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NoiseParameter)
  // optional float gaussian_std = 1 [default = 0];
  if (has_gaussian_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gaussian_std(), target);
  }

  // optional float uniform_range = 2 [default = 0];
  if (has_uniform_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->uniform_range(), target);
  }

  // optional float bias = 3 [default = 0];
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bias(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NoiseParameter)
  return target;
}

int NoiseParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NoiseParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float gaussian_std = 1 [default = 0];
    if (has_gaussian_std()) {
      total_size += 1 + 4;
    }

    // optional float uniform_range = 2 [default = 0];
    if (has_uniform_range()) {
      total_size += 1 + 4;
    }

    // optional float bias = 3 [default = 0];
    if (has_bias()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NoiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NoiseParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NoiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NoiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NoiseParameter)
    MergeFrom(*source);
  }
}

void NoiseParameter::MergeFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NoiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gaussian_std()) {
      set_gaussian_std(from.gaussian_std());
    }
    if (from.has_uniform_range()) {
      set_uniform_range(from.uniform_range());
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NoiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseParameter::CopyFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseParameter::IsInitialized() const {

  return true;
}

void NoiseParameter::Swap(NoiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoiseParameter::InternalSwap(NoiseParameter* other) {
  std::swap(gaussian_std_, other->gaussian_std_);
  std::swap(uniform_range_, other->uniform_range_);
  std::swap(bias_, other->bias_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoiseParameter_descriptor_;
  metadata.reflection = NoiseParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoiseParameter

// optional float gaussian_std = 1 [default = 0];
bool NoiseParameter::has_gaussian_std() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NoiseParameter::set_has_gaussian_std() {
  _has_bits_[0] |= 0x00000001u;
}
void NoiseParameter::clear_has_gaussian_std() {
  _has_bits_[0] &= ~0x00000001u;
}
void NoiseParameter::clear_gaussian_std() {
  gaussian_std_ = 0;
  clear_has_gaussian_std();
}
 float NoiseParameter::gaussian_std() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.gaussian_std)
  return gaussian_std_;
}
 void NoiseParameter::set_gaussian_std(float value) {
  set_has_gaussian_std();
  gaussian_std_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.gaussian_std)
}

// optional float uniform_range = 2 [default = 0];
bool NoiseParameter::has_uniform_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NoiseParameter::set_has_uniform_range() {
  _has_bits_[0] |= 0x00000002u;
}
void NoiseParameter::clear_has_uniform_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void NoiseParameter::clear_uniform_range() {
  uniform_range_ = 0;
  clear_has_uniform_range();
}
 float NoiseParameter::uniform_range() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.uniform_range)
  return uniform_range_;
}
 void NoiseParameter::set_uniform_range(float value) {
  set_has_uniform_range();
  uniform_range_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.uniform_range)
}

// optional float bias = 3 [default = 0];
bool NoiseParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NoiseParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
void NoiseParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
void NoiseParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
 float NoiseParameter::bias() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.bias)
  return bias_;
}
 void NoiseParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.bias)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HotspotParameter::kGaussianStdFieldNumber;
const int HotspotParameter::kOutputHeightFieldNumber;
const int HotspotParameter::kOutputWidthFieldNumber;
const int HotspotParameter::kDataHeightFieldNumber;
const int HotspotParameter::kDataWidthFieldNumber;
const int HotspotParameter::kMeanRemovedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HotspotParameter::HotspotParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HotspotParameter)
}

void HotspotParameter::InitAsDefaultInstance() {
}

HotspotParameter::HotspotParameter(const HotspotParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HotspotParameter)
}

void HotspotParameter::SharedCtor() {
  _cached_size_ = 0;
  gaussian_std_ = 1;
  output_height_ = 0u;
  output_width_ = 0u;
  data_height_ = 0u;
  data_width_ = 0u;
  mean_removed_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotspotParameter::~HotspotParameter() {
  // @@protoc_insertion_point(destructor:caffe.HotspotParameter)
  SharedDtor();
}

void HotspotParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotspotParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotspotParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotspotParameter_descriptor_;
}

const HotspotParameter& HotspotParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

HotspotParameter* HotspotParameter::default_instance_ = NULL;

HotspotParameter* HotspotParameter::New(::google::protobuf::Arena* arena) const {
  HotspotParameter* n = new HotspotParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HotspotParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HotspotParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HotspotParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HotspotParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(output_height_, data_width_);
    gaussian_std_ = 1;
    mean_removed_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HotspotParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HotspotParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float gaussian_std = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaussian_std_)));
          set_has_gaussian_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_height;
        break;
      }

      // optional uint32 output_height = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_output_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_height_)));
          set_has_output_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_output_width;
        break;
      }

      // optional uint32 output_width = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_output_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_width_)));
          set_has_output_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_height;
        break;
      }

      // optional uint32 data_height = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_data_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_height_)));
          set_has_data_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_width;
        break;
      }

      // optional uint32 data_width = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_data_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_width_)));
          set_has_data_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mean_removed;
        break;
      }

      // optional bool mean_removed = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_mean_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mean_removed_)));
          set_has_mean_removed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HotspotParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HotspotParameter)
  return false;
#undef DO_
}

void HotspotParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HotspotParameter)
  // optional float gaussian_std = 1 [default = 1];
  if (has_gaussian_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gaussian_std(), output);
  }

  // optional uint32 output_height = 2 [default = 0];
  if (has_output_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->output_height(), output);
  }

  // optional uint32 output_width = 3 [default = 0];
  if (has_output_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->output_width(), output);
  }

  // optional uint32 data_height = 4 [default = 0];
  if (has_data_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data_height(), output);
  }

  // optional uint32 data_width = 5 [default = 0];
  if (has_data_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_width(), output);
  }

  // optional bool mean_removed = 6 [default = true];
  if (has_mean_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mean_removed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HotspotParameter)
}

::google::protobuf::uint8* HotspotParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HotspotParameter)
  // optional float gaussian_std = 1 [default = 1];
  if (has_gaussian_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gaussian_std(), target);
  }

  // optional uint32 output_height = 2 [default = 0];
  if (has_output_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->output_height(), target);
  }

  // optional uint32 output_width = 3 [default = 0];
  if (has_output_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->output_width(), target);
  }

  // optional uint32 data_height = 4 [default = 0];
  if (has_data_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data_height(), target);
  }

  // optional uint32 data_width = 5 [default = 0];
  if (has_data_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_width(), target);
  }

  // optional bool mean_removed = 6 [default = true];
  if (has_mean_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mean_removed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HotspotParameter)
  return target;
}

int HotspotParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HotspotParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional float gaussian_std = 1 [default = 1];
    if (has_gaussian_std()) {
      total_size += 1 + 4;
    }

    // optional uint32 output_height = 2 [default = 0];
    if (has_output_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_height());
    }

    // optional uint32 output_width = 3 [default = 0];
    if (has_output_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_width());
    }

    // optional uint32 data_height = 4 [default = 0];
    if (has_data_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_height());
    }

    // optional uint32 data_width = 5 [default = 0];
    if (has_data_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_width());
    }

    // optional bool mean_removed = 6 [default = true];
    if (has_mean_removed()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotspotParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HotspotParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HotspotParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HotspotParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HotspotParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HotspotParameter)
    MergeFrom(*source);
  }
}

void HotspotParameter::MergeFrom(const HotspotParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HotspotParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gaussian_std()) {
      set_gaussian_std(from.gaussian_std());
    }
    if (from.has_output_height()) {
      set_output_height(from.output_height());
    }
    if (from.has_output_width()) {
      set_output_width(from.output_width());
    }
    if (from.has_data_height()) {
      set_data_height(from.data_height());
    }
    if (from.has_data_width()) {
      set_data_width(from.data_width());
    }
    if (from.has_mean_removed()) {
      set_mean_removed(from.mean_removed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HotspotParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HotspotParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotspotParameter::CopyFrom(const HotspotParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HotspotParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotspotParameter::IsInitialized() const {

  return true;
}

void HotspotParameter::Swap(HotspotParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HotspotParameter::InternalSwap(HotspotParameter* other) {
  std::swap(gaussian_std_, other->gaussian_std_);
  std::swap(output_height_, other->output_height_);
  std::swap(output_width_, other->output_width_);
  std::swap(data_height_, other->data_height_);
  std::swap(data_width_, other->data_width_);
  std::swap(mean_removed_, other->mean_removed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HotspotParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotspotParameter_descriptor_;
  metadata.reflection = HotspotParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HotspotParameter

// optional float gaussian_std = 1 [default = 1];
bool HotspotParameter::has_gaussian_std() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HotspotParameter::set_has_gaussian_std() {
  _has_bits_[0] |= 0x00000001u;
}
void HotspotParameter::clear_has_gaussian_std() {
  _has_bits_[0] &= ~0x00000001u;
}
void HotspotParameter::clear_gaussian_std() {
  gaussian_std_ = 1;
  clear_has_gaussian_std();
}
 float HotspotParameter::gaussian_std() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.gaussian_std)
  return gaussian_std_;
}
 void HotspotParameter::set_gaussian_std(float value) {
  set_has_gaussian_std();
  gaussian_std_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.gaussian_std)
}

// optional uint32 output_height = 2 [default = 0];
bool HotspotParameter::has_output_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HotspotParameter::set_has_output_height() {
  _has_bits_[0] |= 0x00000002u;
}
void HotspotParameter::clear_has_output_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void HotspotParameter::clear_output_height() {
  output_height_ = 0u;
  clear_has_output_height();
}
 ::google::protobuf::uint32 HotspotParameter::output_height() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.output_height)
  return output_height_;
}
 void HotspotParameter::set_output_height(::google::protobuf::uint32 value) {
  set_has_output_height();
  output_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.output_height)
}

// optional uint32 output_width = 3 [default = 0];
bool HotspotParameter::has_output_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HotspotParameter::set_has_output_width() {
  _has_bits_[0] |= 0x00000004u;
}
void HotspotParameter::clear_has_output_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void HotspotParameter::clear_output_width() {
  output_width_ = 0u;
  clear_has_output_width();
}
 ::google::protobuf::uint32 HotspotParameter::output_width() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.output_width)
  return output_width_;
}
 void HotspotParameter::set_output_width(::google::protobuf::uint32 value) {
  set_has_output_width();
  output_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.output_width)
}

// optional uint32 data_height = 4 [default = 0];
bool HotspotParameter::has_data_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HotspotParameter::set_has_data_height() {
  _has_bits_[0] |= 0x00000008u;
}
void HotspotParameter::clear_has_data_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void HotspotParameter::clear_data_height() {
  data_height_ = 0u;
  clear_has_data_height();
}
 ::google::protobuf::uint32 HotspotParameter::data_height() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.data_height)
  return data_height_;
}
 void HotspotParameter::set_data_height(::google::protobuf::uint32 value) {
  set_has_data_height();
  data_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.data_height)
}

// optional uint32 data_width = 5 [default = 0];
bool HotspotParameter::has_data_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HotspotParameter::set_has_data_width() {
  _has_bits_[0] |= 0x00000010u;
}
void HotspotParameter::clear_has_data_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void HotspotParameter::clear_data_width() {
  data_width_ = 0u;
  clear_has_data_width();
}
 ::google::protobuf::uint32 HotspotParameter::data_width() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.data_width)
  return data_width_;
}
 void HotspotParameter::set_data_width(::google::protobuf::uint32 value) {
  set_has_data_width();
  data_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.data_width)
}

// optional bool mean_removed = 6 [default = true];
bool HotspotParameter::has_mean_removed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HotspotParameter::set_has_mean_removed() {
  _has_bits_[0] |= 0x00000020u;
}
void HotspotParameter::clear_has_mean_removed() {
  _has_bits_[0] &= ~0x00000020u;
}
void HotspotParameter::clear_mean_removed() {
  mean_removed_ = true;
  clear_has_mean_removed();
}
 bool HotspotParameter::mean_removed() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.mean_removed)
  return mean_removed_;
}
 void HotspotParameter::set_mean_removed(bool value) {
  set_has_mean_removed();
  mean_removed_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.mean_removed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictBoxParameter::kStrideFieldNumber;
const int PredictBoxParameter::kReceptiveFieldFieldNumber;
const int PredictBoxParameter::kNmsFieldNumber;
const int PredictBoxParameter::kOutputVectorFieldNumber;
const int PredictBoxParameter::kPositiveThreshFieldNumber;
const int PredictBoxParameter::kBbregExpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictBoxParameter::PredictBoxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PredictBoxParameter)
}

void PredictBoxParameter::InitAsDefaultInstance() {
}

PredictBoxParameter::PredictBoxParameter(const PredictBoxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PredictBoxParameter)
}

void PredictBoxParameter::SharedCtor() {
  _cached_size_ = 0;
  stride_ = 2u;
  receptive_field_ = 12u;
  nms_ = true;
  output_vector_ = true;
  positive_thresh_ = 0.5f;
  bbreg_exp_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredictBoxParameter::~PredictBoxParameter() {
  // @@protoc_insertion_point(destructor:caffe.PredictBoxParameter)
  SharedDtor();
}

void PredictBoxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PredictBoxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictBoxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredictBoxParameter_descriptor_;
}

const PredictBoxParameter& PredictBoxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PredictBoxParameter* PredictBoxParameter::default_instance_ = NULL;

PredictBoxParameter* PredictBoxParameter::New(::google::protobuf::Arena* arena) const {
  PredictBoxParameter* n = new PredictBoxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PredictBoxParameter)
  if (_has_bits_[0 / 32] & 63u) {
    stride_ = 2u;
    receptive_field_ = 12u;
    nms_ = true;
    output_vector_ = true;
    positive_thresh_ = 0.5f;
    bbreg_exp_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PredictBoxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PredictBoxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stride = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_receptive_field;
        break;
      }

      // optional uint32 receptive_field = 2 [default = 12];
      case 2: {
        if (tag == 16) {
         parse_receptive_field:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receptive_field_)));
          set_has_receptive_field();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nms;
        break;
      }

      // optional bool nms = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_nms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nms_)));
          set_has_nms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_output_vector;
        break;
      }

      // optional bool output_vector = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_output_vector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_vector_)));
          set_has_output_vector();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_positive_thresh;
        break;
      }

      // optional float positive_thresh = 5 [default = 0.5];
      case 5: {
        if (tag == 45) {
         parse_positive_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_thresh_)));
          set_has_positive_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bbreg_exp;
        break;
      }

      // optional bool bbreg_exp = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_bbreg_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbreg_exp_)));
          set_has_bbreg_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PredictBoxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PredictBoxParameter)
  return false;
#undef DO_
}

void PredictBoxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PredictBoxParameter)
  // optional uint32 stride = 1 [default = 2];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stride(), output);
  }

  // optional uint32 receptive_field = 2 [default = 12];
  if (has_receptive_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->receptive_field(), output);
  }

  // optional bool nms = 3 [default = true];
  if (has_nms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->nms(), output);
  }

  // optional bool output_vector = 4 [default = true];
  if (has_output_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->output_vector(), output);
  }

  // optional float positive_thresh = 5 [default = 0.5];
  if (has_positive_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->positive_thresh(), output);
  }

  // optional bool bbreg_exp = 6 [default = true];
  if (has_bbreg_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bbreg_exp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PredictBoxParameter)
}

::google::protobuf::uint8* PredictBoxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PredictBoxParameter)
  // optional uint32 stride = 1 [default = 2];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stride(), target);
  }

  // optional uint32 receptive_field = 2 [default = 12];
  if (has_receptive_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->receptive_field(), target);
  }

  // optional bool nms = 3 [default = true];
  if (has_nms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->nms(), target);
  }

  // optional bool output_vector = 4 [default = true];
  if (has_output_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->output_vector(), target);
  }

  // optional float positive_thresh = 5 [default = 0.5];
  if (has_positive_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->positive_thresh(), target);
  }

  // optional bool bbreg_exp = 6 [default = true];
  if (has_bbreg_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bbreg_exp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PredictBoxParameter)
  return target;
}

int PredictBoxParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PredictBoxParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 stride = 1 [default = 2];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional uint32 receptive_field = 2 [default = 12];
    if (has_receptive_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receptive_field());
    }

    // optional bool nms = 3 [default = true];
    if (has_nms()) {
      total_size += 1 + 1;
    }

    // optional bool output_vector = 4 [default = true];
    if (has_output_vector()) {
      total_size += 1 + 1;
    }

    // optional float positive_thresh = 5 [default = 0.5];
    if (has_positive_thresh()) {
      total_size += 1 + 4;
    }

    // optional bool bbreg_exp = 6 [default = true];
    if (has_bbreg_exp()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictBoxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PredictBoxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PredictBoxParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictBoxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PredictBoxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PredictBoxParameter)
    MergeFrom(*source);
  }
}

void PredictBoxParameter::MergeFrom(const PredictBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PredictBoxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_receptive_field()) {
      set_receptive_field(from.receptive_field());
    }
    if (from.has_nms()) {
      set_nms(from.nms());
    }
    if (from.has_output_vector()) {
      set_output_vector(from.output_vector());
    }
    if (from.has_positive_thresh()) {
      set_positive_thresh(from.positive_thresh());
    }
    if (from.has_bbreg_exp()) {
      set_bbreg_exp(from.bbreg_exp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PredictBoxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PredictBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictBoxParameter::CopyFrom(const PredictBoxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PredictBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictBoxParameter::IsInitialized() const {

  return true;
}

void PredictBoxParameter::Swap(PredictBoxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictBoxParameter::InternalSwap(PredictBoxParameter* other) {
  std::swap(stride_, other->stride_);
  std::swap(receptive_field_, other->receptive_field_);
  std::swap(nms_, other->nms_);
  std::swap(output_vector_, other->output_vector_);
  std::swap(positive_thresh_, other->positive_thresh_);
  std::swap(bbreg_exp_, other->bbreg_exp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictBoxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredictBoxParameter_descriptor_;
  metadata.reflection = PredictBoxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictBoxParameter

// optional uint32 stride = 1 [default = 2];
bool PredictBoxParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictBoxParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictBoxParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictBoxParameter::clear_stride() {
  stride_ = 2u;
  clear_has_stride();
}
 ::google::protobuf::uint32 PredictBoxParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.stride)
  return stride_;
}
 void PredictBoxParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.stride)
}

// optional uint32 receptive_field = 2 [default = 12];
bool PredictBoxParameter::has_receptive_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PredictBoxParameter::set_has_receptive_field() {
  _has_bits_[0] |= 0x00000002u;
}
void PredictBoxParameter::clear_has_receptive_field() {
  _has_bits_[0] &= ~0x00000002u;
}
void PredictBoxParameter::clear_receptive_field() {
  receptive_field_ = 12u;
  clear_has_receptive_field();
}
 ::google::protobuf::uint32 PredictBoxParameter::receptive_field() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.receptive_field)
  return receptive_field_;
}
 void PredictBoxParameter::set_receptive_field(::google::protobuf::uint32 value) {
  set_has_receptive_field();
  receptive_field_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.receptive_field)
}

// optional bool nms = 3 [default = true];
bool PredictBoxParameter::has_nms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictBoxParameter::set_has_nms() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictBoxParameter::clear_has_nms() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictBoxParameter::clear_nms() {
  nms_ = true;
  clear_has_nms();
}
 bool PredictBoxParameter::nms() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.nms)
  return nms_;
}
 void PredictBoxParameter::set_nms(bool value) {
  set_has_nms();
  nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.nms)
}

// optional bool output_vector = 4 [default = true];
bool PredictBoxParameter::has_output_vector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PredictBoxParameter::set_has_output_vector() {
  _has_bits_[0] |= 0x00000008u;
}
void PredictBoxParameter::clear_has_output_vector() {
  _has_bits_[0] &= ~0x00000008u;
}
void PredictBoxParameter::clear_output_vector() {
  output_vector_ = true;
  clear_has_output_vector();
}
 bool PredictBoxParameter::output_vector() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.output_vector)
  return output_vector_;
}
 void PredictBoxParameter::set_output_vector(bool value) {
  set_has_output_vector();
  output_vector_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.output_vector)
}

// optional float positive_thresh = 5 [default = 0.5];
bool PredictBoxParameter::has_positive_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictBoxParameter::set_has_positive_thresh() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictBoxParameter::clear_has_positive_thresh() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictBoxParameter::clear_positive_thresh() {
  positive_thresh_ = 0.5f;
  clear_has_positive_thresh();
}
 float PredictBoxParameter::positive_thresh() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.positive_thresh)
  return positive_thresh_;
}
 void PredictBoxParameter::set_positive_thresh(float value) {
  set_has_positive_thresh();
  positive_thresh_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.positive_thresh)
}

// optional bool bbreg_exp = 6 [default = true];
bool PredictBoxParameter::has_bbreg_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PredictBoxParameter::set_has_bbreg_exp() {
  _has_bits_[0] |= 0x00000020u;
}
void PredictBoxParameter::clear_has_bbreg_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
void PredictBoxParameter::clear_bbreg_exp() {
  bbreg_exp_ = true;
  clear_has_bbreg_exp();
}
 bool PredictBoxParameter::bbreg_exp() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.bbreg_exp)
  return bbreg_exp_;
}
 void PredictBoxParameter::set_bbreg_exp(bool value) {
  set_has_bbreg_exp();
  bbreg_exp_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.bbreg_exp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNDataParameter::kTemplateHFieldNumber;
const int FCNDataParameter::kTemplateWFieldNumber;
const int FCNDataParameter::kExpandLeftFieldNumber;
const int FCNDataParameter::kExpandRightFieldNumber;
const int FCNDataParameter::kExpandTopFieldNumber;
const int FCNDataParameter::kExpandBottomFieldNumber;
const int FCNDataParameter::kRoiMultiplyHFieldNumber;
const int FCNDataParameter::kRoiMultiplyWFieldNumber;
const int FCNDataParameter::kScaleStepFieldNumber;
const int FCNDataParameter::kScaleStepNumFieldNumber;
const int FCNDataParameter::kGaussianSizeHFieldNumber;
const int FCNDataParameter::kGaussianSizeWFieldNumber;
const int FCNDataParameter::kGaussianStdHFieldNumber;
const int FCNDataParameter::kGaussianStdWFieldNumber;
const int FCNDataParameter::kUseHogFieldNumber;
const int FCNDataParameter::kHogCellSizeFieldNumber;
const int FCNDataParameter::kMinIouFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNDataParameter::FCNDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FCNDataParameter)
}

void FCNDataParameter::InitAsDefaultInstance() {
}

FCNDataParameter::FCNDataParameter(const FCNDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FCNDataParameter)
}

void FCNDataParameter::SharedCtor() {
  _cached_size_ = 0;
  template_h_ = 48u;
  template_w_ = 42u;
  expand_left_ = 0.25f;
  expand_right_ = 0.25f;
  expand_top_ = 0.5f;
  expand_bottom_ = 0.25f;
  roi_multiply_h_ = 5;
  roi_multiply_w_ = 5;
  scale_step_ = 1.1f;
  scale_step_num_ = 5;
  gaussian_size_h_ = 7;
  gaussian_size_w_ = 7;
  gaussian_std_h_ = 1.5f;
  gaussian_std_w_ = 1.5f;
  use_hog_ = false;
  hog_cell_size_ = 4;
  min_iou_ = 0.8f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FCNDataParameter::~FCNDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.FCNDataParameter)
  SharedDtor();
}

void FCNDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FCNDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCNDataParameter_descriptor_;
}

const FCNDataParameter& FCNDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FCNDataParameter* FCNDataParameter::default_instance_ = NULL;

FCNDataParameter* FCNDataParameter::New(::google::protobuf::Arena* arena) const {
  FCNDataParameter* n = new FCNDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FCNDataParameter)
  if (_has_bits_[0 / 32] & 255u) {
    template_h_ = 48u;
    template_w_ = 42u;
    expand_left_ = 0.25f;
    expand_right_ = 0.25f;
    expand_top_ = 0.5f;
    expand_bottom_ = 0.25f;
    roi_multiply_h_ = 5;
    roi_multiply_w_ = 5;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    scale_step_ = 1.1f;
    scale_step_num_ = 5;
    gaussian_size_h_ = 7;
    gaussian_size_w_ = 7;
    gaussian_std_h_ = 1.5f;
    gaussian_std_w_ = 1.5f;
    use_hog_ = false;
    hog_cell_size_ = 4;
  }
  min_iou_ = 0.8f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FCNDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FCNDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_h = 1 [default = 48];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_h_)));
          set_has_template_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_template_w;
        break;
      }

      // optional uint32 template_w = 2 [default = 42];
      case 2: {
        if (tag == 16) {
         parse_template_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_w_)));
          set_has_template_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_expand_left;
        break;
      }

      // optional float expand_left = 3 [default = 0.25];
      case 3: {
        if (tag == 29) {
         parse_expand_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expand_left_)));
          set_has_expand_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_expand_right;
        break;
      }

      // optional float expand_right = 4 [default = 0.25];
      case 4: {
        if (tag == 37) {
         parse_expand_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expand_right_)));
          set_has_expand_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_expand_top;
        break;
      }

      // optional float expand_top = 5 [default = 0.5];
      case 5: {
        if (tag == 45) {
         parse_expand_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expand_top_)));
          set_has_expand_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_expand_bottom;
        break;
      }

      // optional float expand_bottom = 6 [default = 0.25];
      case 6: {
        if (tag == 53) {
         parse_expand_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expand_bottom_)));
          set_has_expand_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_roi_multiply_h;
        break;
      }

      // optional float roi_multiply_h = 7 [default = 5];
      case 7: {
        if (tag == 61) {
         parse_roi_multiply_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_multiply_h_)));
          set_has_roi_multiply_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_roi_multiply_w;
        break;
      }

      // optional float roi_multiply_w = 8 [default = 5];
      case 8: {
        if (tag == 69) {
         parse_roi_multiply_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_multiply_w_)));
          set_has_roi_multiply_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_scale_step;
        break;
      }

      // optional float scale_step = 9 [default = 1.1];
      case 9: {
        if (tag == 77) {
         parse_scale_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_step_)));
          set_has_scale_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_scale_step_num;
        break;
      }

      // optional int32 scale_step_num = 10 [default = 5];
      case 10: {
        if (tag == 80) {
         parse_scale_step_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_step_num_)));
          set_has_scale_step_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gaussian_size_h;
        break;
      }

      // optional int32 gaussian_size_h = 11 [default = 7];
      case 11: {
        if (tag == 88) {
         parse_gaussian_size_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaussian_size_h_)));
          set_has_gaussian_size_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gaussian_size_w;
        break;
      }

      // optional int32 gaussian_size_w = 12 [default = 7];
      case 12: {
        if (tag == 96) {
         parse_gaussian_size_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaussian_size_w_)));
          set_has_gaussian_size_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_gaussian_std_h;
        break;
      }

      // optional float gaussian_std_h = 13 [default = 1.5];
      case 13: {
        if (tag == 109) {
         parse_gaussian_std_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaussian_std_h_)));
          set_has_gaussian_std_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_gaussian_std_w;
        break;
      }

      // optional float gaussian_std_w = 14 [default = 1.5];
      case 14: {
        if (tag == 117) {
         parse_gaussian_std_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaussian_std_w_)));
          set_has_gaussian_std_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_use_hog;
        break;
      }

      // optional bool use_hog = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_use_hog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_hog_)));
          set_has_use_hog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hog_cell_size;
        break;
      }

      // optional int32 hog_cell_size = 16 [default = 4];
      case 16: {
        if (tag == 128) {
         parse_hog_cell_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hog_cell_size_)));
          set_has_hog_cell_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_min_iou;
        break;
      }

      // optional float min_iou = 17 [default = 0.8];
      case 17: {
        if (tag == 141) {
         parse_min_iou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_iou_)));
          set_has_min_iou();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FCNDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FCNDataParameter)
  return false;
#undef DO_
}

void FCNDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FCNDataParameter)
  // optional uint32 template_h = 1 [default = 48];
  if (has_template_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_h(), output);
  }

  // optional uint32 template_w = 2 [default = 42];
  if (has_template_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->template_w(), output);
  }

  // optional float expand_left = 3 [default = 0.25];
  if (has_expand_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->expand_left(), output);
  }

  // optional float expand_right = 4 [default = 0.25];
  if (has_expand_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->expand_right(), output);
  }

  // optional float expand_top = 5 [default = 0.5];
  if (has_expand_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->expand_top(), output);
  }

  // optional float expand_bottom = 6 [default = 0.25];
  if (has_expand_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->expand_bottom(), output);
  }

  // optional float roi_multiply_h = 7 [default = 5];
  if (has_roi_multiply_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->roi_multiply_h(), output);
  }

  // optional float roi_multiply_w = 8 [default = 5];
  if (has_roi_multiply_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->roi_multiply_w(), output);
  }

  // optional float scale_step = 9 [default = 1.1];
  if (has_scale_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->scale_step(), output);
  }

  // optional int32 scale_step_num = 10 [default = 5];
  if (has_scale_step_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->scale_step_num(), output);
  }

  // optional int32 gaussian_size_h = 11 [default = 7];
  if (has_gaussian_size_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gaussian_size_h(), output);
  }

  // optional int32 gaussian_size_w = 12 [default = 7];
  if (has_gaussian_size_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gaussian_size_w(), output);
  }

  // optional float gaussian_std_h = 13 [default = 1.5];
  if (has_gaussian_std_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->gaussian_std_h(), output);
  }

  // optional float gaussian_std_w = 14 [default = 1.5];
  if (has_gaussian_std_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->gaussian_std_w(), output);
  }

  // optional bool use_hog = 15 [default = false];
  if (has_use_hog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->use_hog(), output);
  }

  // optional int32 hog_cell_size = 16 [default = 4];
  if (has_hog_cell_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hog_cell_size(), output);
  }

  // optional float min_iou = 17 [default = 0.8];
  if (has_min_iou()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->min_iou(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FCNDataParameter)
}

::google::protobuf::uint8* FCNDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FCNDataParameter)
  // optional uint32 template_h = 1 [default = 48];
  if (has_template_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_h(), target);
  }

  // optional uint32 template_w = 2 [default = 42];
  if (has_template_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->template_w(), target);
  }

  // optional float expand_left = 3 [default = 0.25];
  if (has_expand_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->expand_left(), target);
  }

  // optional float expand_right = 4 [default = 0.25];
  if (has_expand_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->expand_right(), target);
  }

  // optional float expand_top = 5 [default = 0.5];
  if (has_expand_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->expand_top(), target);
  }

  // optional float expand_bottom = 6 [default = 0.25];
  if (has_expand_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->expand_bottom(), target);
  }

  // optional float roi_multiply_h = 7 [default = 5];
  if (has_roi_multiply_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->roi_multiply_h(), target);
  }

  // optional float roi_multiply_w = 8 [default = 5];
  if (has_roi_multiply_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->roi_multiply_w(), target);
  }

  // optional float scale_step = 9 [default = 1.1];
  if (has_scale_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->scale_step(), target);
  }

  // optional int32 scale_step_num = 10 [default = 5];
  if (has_scale_step_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->scale_step_num(), target);
  }

  // optional int32 gaussian_size_h = 11 [default = 7];
  if (has_gaussian_size_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gaussian_size_h(), target);
  }

  // optional int32 gaussian_size_w = 12 [default = 7];
  if (has_gaussian_size_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gaussian_size_w(), target);
  }

  // optional float gaussian_std_h = 13 [default = 1.5];
  if (has_gaussian_std_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->gaussian_std_h(), target);
  }

  // optional float gaussian_std_w = 14 [default = 1.5];
  if (has_gaussian_std_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->gaussian_std_w(), target);
  }

  // optional bool use_hog = 15 [default = false];
  if (has_use_hog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->use_hog(), target);
  }

  // optional int32 hog_cell_size = 16 [default = 4];
  if (has_hog_cell_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hog_cell_size(), target);
  }

  // optional float min_iou = 17 [default = 0.8];
  if (has_min_iou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->min_iou(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FCNDataParameter)
  return target;
}

int FCNDataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FCNDataParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 template_h = 1 [default = 48];
    if (has_template_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_h());
    }

    // optional uint32 template_w = 2 [default = 42];
    if (has_template_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_w());
    }

    // optional float expand_left = 3 [default = 0.25];
    if (has_expand_left()) {
      total_size += 1 + 4;
    }

    // optional float expand_right = 4 [default = 0.25];
    if (has_expand_right()) {
      total_size += 1 + 4;
    }

    // optional float expand_top = 5 [default = 0.5];
    if (has_expand_top()) {
      total_size += 1 + 4;
    }

    // optional float expand_bottom = 6 [default = 0.25];
    if (has_expand_bottom()) {
      total_size += 1 + 4;
    }

    // optional float roi_multiply_h = 7 [default = 5];
    if (has_roi_multiply_h()) {
      total_size += 1 + 4;
    }

    // optional float roi_multiply_w = 8 [default = 5];
    if (has_roi_multiply_w()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float scale_step = 9 [default = 1.1];
    if (has_scale_step()) {
      total_size += 1 + 4;
    }

    // optional int32 scale_step_num = 10 [default = 5];
    if (has_scale_step_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale_step_num());
    }

    // optional int32 gaussian_size_h = 11 [default = 7];
    if (has_gaussian_size_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaussian_size_h());
    }

    // optional int32 gaussian_size_w = 12 [default = 7];
    if (has_gaussian_size_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaussian_size_w());
    }

    // optional float gaussian_std_h = 13 [default = 1.5];
    if (has_gaussian_std_h()) {
      total_size += 1 + 4;
    }

    // optional float gaussian_std_w = 14 [default = 1.5];
    if (has_gaussian_std_w()) {
      total_size += 1 + 4;
    }

    // optional bool use_hog = 15 [default = false];
    if (has_use_hog()) {
      total_size += 1 + 1;
    }

    // optional int32 hog_cell_size = 16 [default = 4];
    if (has_hog_cell_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hog_cell_size());
    }

  }
  // optional float min_iou = 17 [default = 0.8];
  if (has_min_iou()) {
    total_size += 2 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FCNDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FCNDataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FCNDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FCNDataParameter)
    MergeFrom(*source);
  }
}

void FCNDataParameter::MergeFrom(const FCNDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FCNDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_h()) {
      set_template_h(from.template_h());
    }
    if (from.has_template_w()) {
      set_template_w(from.template_w());
    }
    if (from.has_expand_left()) {
      set_expand_left(from.expand_left());
    }
    if (from.has_expand_right()) {
      set_expand_right(from.expand_right());
    }
    if (from.has_expand_top()) {
      set_expand_top(from.expand_top());
    }
    if (from.has_expand_bottom()) {
      set_expand_bottom(from.expand_bottom());
    }
    if (from.has_roi_multiply_h()) {
      set_roi_multiply_h(from.roi_multiply_h());
    }
    if (from.has_roi_multiply_w()) {
      set_roi_multiply_w(from.roi_multiply_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scale_step()) {
      set_scale_step(from.scale_step());
    }
    if (from.has_scale_step_num()) {
      set_scale_step_num(from.scale_step_num());
    }
    if (from.has_gaussian_size_h()) {
      set_gaussian_size_h(from.gaussian_size_h());
    }
    if (from.has_gaussian_size_w()) {
      set_gaussian_size_w(from.gaussian_size_w());
    }
    if (from.has_gaussian_std_h()) {
      set_gaussian_std_h(from.gaussian_std_h());
    }
    if (from.has_gaussian_std_w()) {
      set_gaussian_std_w(from.gaussian_std_w());
    }
    if (from.has_use_hog()) {
      set_use_hog(from.use_hog());
    }
    if (from.has_hog_cell_size()) {
      set_hog_cell_size(from.hog_cell_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_min_iou()) {
      set_min_iou(from.min_iou());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FCNDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FCNDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNDataParameter::CopyFrom(const FCNDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FCNDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNDataParameter::IsInitialized() const {

  return true;
}

void FCNDataParameter::Swap(FCNDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNDataParameter::InternalSwap(FCNDataParameter* other) {
  std::swap(template_h_, other->template_h_);
  std::swap(template_w_, other->template_w_);
  std::swap(expand_left_, other->expand_left_);
  std::swap(expand_right_, other->expand_right_);
  std::swap(expand_top_, other->expand_top_);
  std::swap(expand_bottom_, other->expand_bottom_);
  std::swap(roi_multiply_h_, other->roi_multiply_h_);
  std::swap(roi_multiply_w_, other->roi_multiply_w_);
  std::swap(scale_step_, other->scale_step_);
  std::swap(scale_step_num_, other->scale_step_num_);
  std::swap(gaussian_size_h_, other->gaussian_size_h_);
  std::swap(gaussian_size_w_, other->gaussian_size_w_);
  std::swap(gaussian_std_h_, other->gaussian_std_h_);
  std::swap(gaussian_std_w_, other->gaussian_std_w_);
  std::swap(use_hog_, other->use_hog_);
  std::swap(hog_cell_size_, other->hog_cell_size_);
  std::swap(min_iou_, other->min_iou_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FCNDataParameter_descriptor_;
  metadata.reflection = FCNDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNDataParameter

// optional uint32 template_h = 1 [default = 48];
bool FCNDataParameter::has_template_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNDataParameter::set_has_template_h() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNDataParameter::clear_has_template_h() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNDataParameter::clear_template_h() {
  template_h_ = 48u;
  clear_has_template_h();
}
 ::google::protobuf::uint32 FCNDataParameter::template_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.template_h)
  return template_h_;
}
 void FCNDataParameter::set_template_h(::google::protobuf::uint32 value) {
  set_has_template_h();
  template_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.template_h)
}

// optional uint32 template_w = 2 [default = 42];
bool FCNDataParameter::has_template_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNDataParameter::set_has_template_w() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNDataParameter::clear_has_template_w() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNDataParameter::clear_template_w() {
  template_w_ = 42u;
  clear_has_template_w();
}
 ::google::protobuf::uint32 FCNDataParameter::template_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.template_w)
  return template_w_;
}
 void FCNDataParameter::set_template_w(::google::protobuf::uint32 value) {
  set_has_template_w();
  template_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.template_w)
}

// optional float expand_left = 3 [default = 0.25];
bool FCNDataParameter::has_expand_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNDataParameter::set_has_expand_left() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNDataParameter::clear_has_expand_left() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNDataParameter::clear_expand_left() {
  expand_left_ = 0.25f;
  clear_has_expand_left();
}
 float FCNDataParameter::expand_left() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_left)
  return expand_left_;
}
 void FCNDataParameter::set_expand_left(float value) {
  set_has_expand_left();
  expand_left_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_left)
}

// optional float expand_right = 4 [default = 0.25];
bool FCNDataParameter::has_expand_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCNDataParameter::set_has_expand_right() {
  _has_bits_[0] |= 0x00000008u;
}
void FCNDataParameter::clear_has_expand_right() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCNDataParameter::clear_expand_right() {
  expand_right_ = 0.25f;
  clear_has_expand_right();
}
 float FCNDataParameter::expand_right() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_right)
  return expand_right_;
}
 void FCNDataParameter::set_expand_right(float value) {
  set_has_expand_right();
  expand_right_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_right)
}

// optional float expand_top = 5 [default = 0.5];
bool FCNDataParameter::has_expand_top() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCNDataParameter::set_has_expand_top() {
  _has_bits_[0] |= 0x00000010u;
}
void FCNDataParameter::clear_has_expand_top() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCNDataParameter::clear_expand_top() {
  expand_top_ = 0.5f;
  clear_has_expand_top();
}
 float FCNDataParameter::expand_top() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_top)
  return expand_top_;
}
 void FCNDataParameter::set_expand_top(float value) {
  set_has_expand_top();
  expand_top_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_top)
}

// optional float expand_bottom = 6 [default = 0.25];
bool FCNDataParameter::has_expand_bottom() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCNDataParameter::set_has_expand_bottom() {
  _has_bits_[0] |= 0x00000020u;
}
void FCNDataParameter::clear_has_expand_bottom() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCNDataParameter::clear_expand_bottom() {
  expand_bottom_ = 0.25f;
  clear_has_expand_bottom();
}
 float FCNDataParameter::expand_bottom() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_bottom)
  return expand_bottom_;
}
 void FCNDataParameter::set_expand_bottom(float value) {
  set_has_expand_bottom();
  expand_bottom_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_bottom)
}

// optional float roi_multiply_h = 7 [default = 5];
bool FCNDataParameter::has_roi_multiply_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FCNDataParameter::set_has_roi_multiply_h() {
  _has_bits_[0] |= 0x00000040u;
}
void FCNDataParameter::clear_has_roi_multiply_h() {
  _has_bits_[0] &= ~0x00000040u;
}
void FCNDataParameter::clear_roi_multiply_h() {
  roi_multiply_h_ = 5;
  clear_has_roi_multiply_h();
}
 float FCNDataParameter::roi_multiply_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.roi_multiply_h)
  return roi_multiply_h_;
}
 void FCNDataParameter::set_roi_multiply_h(float value) {
  set_has_roi_multiply_h();
  roi_multiply_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.roi_multiply_h)
}

// optional float roi_multiply_w = 8 [default = 5];
bool FCNDataParameter::has_roi_multiply_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FCNDataParameter::set_has_roi_multiply_w() {
  _has_bits_[0] |= 0x00000080u;
}
void FCNDataParameter::clear_has_roi_multiply_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void FCNDataParameter::clear_roi_multiply_w() {
  roi_multiply_w_ = 5;
  clear_has_roi_multiply_w();
}
 float FCNDataParameter::roi_multiply_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.roi_multiply_w)
  return roi_multiply_w_;
}
 void FCNDataParameter::set_roi_multiply_w(float value) {
  set_has_roi_multiply_w();
  roi_multiply_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.roi_multiply_w)
}

// optional float scale_step = 9 [default = 1.1];
bool FCNDataParameter::has_scale_step() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FCNDataParameter::set_has_scale_step() {
  _has_bits_[0] |= 0x00000100u;
}
void FCNDataParameter::clear_has_scale_step() {
  _has_bits_[0] &= ~0x00000100u;
}
void FCNDataParameter::clear_scale_step() {
  scale_step_ = 1.1f;
  clear_has_scale_step();
}
 float FCNDataParameter::scale_step() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.scale_step)
  return scale_step_;
}
 void FCNDataParameter::set_scale_step(float value) {
  set_has_scale_step();
  scale_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.scale_step)
}

// optional int32 scale_step_num = 10 [default = 5];
bool FCNDataParameter::has_scale_step_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FCNDataParameter::set_has_scale_step_num() {
  _has_bits_[0] |= 0x00000200u;
}
void FCNDataParameter::clear_has_scale_step_num() {
  _has_bits_[0] &= ~0x00000200u;
}
void FCNDataParameter::clear_scale_step_num() {
  scale_step_num_ = 5;
  clear_has_scale_step_num();
}
 ::google::protobuf::int32 FCNDataParameter::scale_step_num() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.scale_step_num)
  return scale_step_num_;
}
 void FCNDataParameter::set_scale_step_num(::google::protobuf::int32 value) {
  set_has_scale_step_num();
  scale_step_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.scale_step_num)
}

// optional int32 gaussian_size_h = 11 [default = 7];
bool FCNDataParameter::has_gaussian_size_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FCNDataParameter::set_has_gaussian_size_h() {
  _has_bits_[0] |= 0x00000400u;
}
void FCNDataParameter::clear_has_gaussian_size_h() {
  _has_bits_[0] &= ~0x00000400u;
}
void FCNDataParameter::clear_gaussian_size_h() {
  gaussian_size_h_ = 7;
  clear_has_gaussian_size_h();
}
 ::google::protobuf::int32 FCNDataParameter::gaussian_size_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_size_h)
  return gaussian_size_h_;
}
 void FCNDataParameter::set_gaussian_size_h(::google::protobuf::int32 value) {
  set_has_gaussian_size_h();
  gaussian_size_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_size_h)
}

// optional int32 gaussian_size_w = 12 [default = 7];
bool FCNDataParameter::has_gaussian_size_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FCNDataParameter::set_has_gaussian_size_w() {
  _has_bits_[0] |= 0x00000800u;
}
void FCNDataParameter::clear_has_gaussian_size_w() {
  _has_bits_[0] &= ~0x00000800u;
}
void FCNDataParameter::clear_gaussian_size_w() {
  gaussian_size_w_ = 7;
  clear_has_gaussian_size_w();
}
 ::google::protobuf::int32 FCNDataParameter::gaussian_size_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_size_w)
  return gaussian_size_w_;
}
 void FCNDataParameter::set_gaussian_size_w(::google::protobuf::int32 value) {
  set_has_gaussian_size_w();
  gaussian_size_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_size_w)
}

// optional float gaussian_std_h = 13 [default = 1.5];
bool FCNDataParameter::has_gaussian_std_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FCNDataParameter::set_has_gaussian_std_h() {
  _has_bits_[0] |= 0x00001000u;
}
void FCNDataParameter::clear_has_gaussian_std_h() {
  _has_bits_[0] &= ~0x00001000u;
}
void FCNDataParameter::clear_gaussian_std_h() {
  gaussian_std_h_ = 1.5f;
  clear_has_gaussian_std_h();
}
 float FCNDataParameter::gaussian_std_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_std_h)
  return gaussian_std_h_;
}
 void FCNDataParameter::set_gaussian_std_h(float value) {
  set_has_gaussian_std_h();
  gaussian_std_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_std_h)
}

// optional float gaussian_std_w = 14 [default = 1.5];
bool FCNDataParameter::has_gaussian_std_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FCNDataParameter::set_has_gaussian_std_w() {
  _has_bits_[0] |= 0x00002000u;
}
void FCNDataParameter::clear_has_gaussian_std_w() {
  _has_bits_[0] &= ~0x00002000u;
}
void FCNDataParameter::clear_gaussian_std_w() {
  gaussian_std_w_ = 1.5f;
  clear_has_gaussian_std_w();
}
 float FCNDataParameter::gaussian_std_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_std_w)
  return gaussian_std_w_;
}
 void FCNDataParameter::set_gaussian_std_w(float value) {
  set_has_gaussian_std_w();
  gaussian_std_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_std_w)
}

// optional bool use_hog = 15 [default = false];
bool FCNDataParameter::has_use_hog() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FCNDataParameter::set_has_use_hog() {
  _has_bits_[0] |= 0x00004000u;
}
void FCNDataParameter::clear_has_use_hog() {
  _has_bits_[0] &= ~0x00004000u;
}
void FCNDataParameter::clear_use_hog() {
  use_hog_ = false;
  clear_has_use_hog();
}
 bool FCNDataParameter::use_hog() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.use_hog)
  return use_hog_;
}
 void FCNDataParameter::set_use_hog(bool value) {
  set_has_use_hog();
  use_hog_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.use_hog)
}

// optional int32 hog_cell_size = 16 [default = 4];
bool FCNDataParameter::has_hog_cell_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FCNDataParameter::set_has_hog_cell_size() {
  _has_bits_[0] |= 0x00008000u;
}
void FCNDataParameter::clear_has_hog_cell_size() {
  _has_bits_[0] &= ~0x00008000u;
}
void FCNDataParameter::clear_hog_cell_size() {
  hog_cell_size_ = 4;
  clear_has_hog_cell_size();
}
 ::google::protobuf::int32 FCNDataParameter::hog_cell_size() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.hog_cell_size)
  return hog_cell_size_;
}
 void FCNDataParameter::set_hog_cell_size(::google::protobuf::int32 value) {
  set_has_hog_cell_size();
  hog_cell_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.hog_cell_size)
}

// optional float min_iou = 17 [default = 0.8];
bool FCNDataParameter::has_min_iou() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FCNDataParameter::set_has_min_iou() {
  _has_bits_[0] |= 0x00010000u;
}
void FCNDataParameter::clear_has_min_iou() {
  _has_bits_[0] &= ~0x00010000u;
}
void FCNDataParameter::clear_min_iou() {
  min_iou_ = 0.8f;
  clear_has_min_iou();
}
 float FCNDataParameter::min_iou() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.min_iou)
  return min_iou_;
}
 void FCNDataParameter::set_min_iou(float value) {
  set_has_min_iou();
  min_iou_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.min_iou)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* CenterLossParameter::_default_distance_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CenterLossParameter::kNumOutputFieldNumber;
const int CenterLossParameter::kCenterFillerFieldNumber;
const int CenterLossParameter::kAxisFieldNumber;
const int CenterLossParameter::kDistanceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CenterLossParameter::CenterLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CenterLossParameter)
}

void CenterLossParameter::InitAsDefaultInstance() {
  center_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

CenterLossParameter::CenterLossParameter(const CenterLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.CenterLossParameter)
}

void CenterLossParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_output_ = 0u;
  center_filler_ = NULL;
  axis_ = 1;
  distance_type_.UnsafeSetDefault(_default_distance_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterLossParameter::~CenterLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.CenterLossParameter)
  SharedDtor();
}

void CenterLossParameter::SharedDtor() {
  distance_type_.DestroyNoArena(_default_distance_type_);
  if (this != default_instance_) {
    delete center_filler_;
  }
}

void CenterLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterLossParameter_descriptor_;
}

const CenterLossParameter& CenterLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

CenterLossParameter* CenterLossParameter::default_instance_ = NULL;

CenterLossParameter* CenterLossParameter::New(::google::protobuf::Arena* arena) const {
  CenterLossParameter* n = new CenterLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CenterLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CenterLossParameter)
  if (_has_bits_[0 / 32] & 15u) {
    num_output_ = 0u;
    if (has_center_filler()) {
      if (center_filler_ != NULL) center_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    if (has_distance_type()) {
      distance_type_.ClearToDefaultNoArena(_default_distance_type_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CenterLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CenterLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_center_filler;
        break;
      }

      // optional .caffe.FillerParameter center_filler = 2;
      case 2: {
        if (tag == 18) {
         parse_center_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_axis;
        break;
      }

      // optional int32 axis = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_distance_type;
        break;
      }

      // optional string distance_type = 29 [default = "L2"];
      case 29: {
        if (tag == 234) {
         parse_distance_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distance_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->distance_type().data(), this->distance_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.CenterLossParameter.distance_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CenterLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CenterLossParameter)
  return false;
#undef DO_
}

void CenterLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CenterLossParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional .caffe.FillerParameter center_filler = 2;
  if (has_center_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->center_filler_, output);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  // optional string distance_type = 29 [default = "L2"];
  if (has_distance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->distance_type().data(), this->distance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CenterLossParameter.distance_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->distance_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CenterLossParameter)
}

::google::protobuf::uint8* CenterLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CenterLossParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional .caffe.FillerParameter center_filler = 2;
  if (has_center_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->center_filler_, target);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  // optional string distance_type = 29 [default = "L2"];
  if (has_distance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->distance_type().data(), this->distance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CenterLossParameter.distance_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->distance_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CenterLossParameter)
  return target;
}

int CenterLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CenterLossParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.FillerParameter center_filler = 2;
    if (has_center_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->center_filler_);
    }

    // optional int32 axis = 3 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional string distance_type = 29 [default = "L2"];
    if (has_distance_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->distance_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CenterLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CenterLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CenterLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CenterLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CenterLossParameter)
    MergeFrom(*source);
  }
}

void CenterLossParameter::MergeFrom(const CenterLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CenterLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_center_filler()) {
      mutable_center_filler()->::caffe::FillerParameter::MergeFrom(from.center_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_distance_type()) {
      set_has_distance_type();
      distance_type_.AssignWithDefault(_default_distance_type_, from.distance_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CenterLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CenterLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterLossParameter::CopyFrom(const CenterLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CenterLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterLossParameter::IsInitialized() const {

  return true;
}

void CenterLossParameter::Swap(CenterLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CenterLossParameter::InternalSwap(CenterLossParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(center_filler_, other->center_filler_);
  std::swap(axis_, other->axis_);
  distance_type_.Swap(&other->distance_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CenterLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterLossParameter_descriptor_;
  metadata.reflection = CenterLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CenterLossParameter

// optional uint32 num_output = 1;
bool CenterLossParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CenterLossParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void CenterLossParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void CenterLossParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 CenterLossParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.num_output)
  return num_output_;
}
 void CenterLossParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.CenterLossParameter.num_output)
}

// optional .caffe.FillerParameter center_filler = 2;
bool CenterLossParameter::has_center_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CenterLossParameter::set_has_center_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void CenterLossParameter::clear_has_center_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void CenterLossParameter::clear_center_filler() {
  if (center_filler_ != NULL) center_filler_->::caffe::FillerParameter::Clear();
  clear_has_center_filler();
}
const ::caffe::FillerParameter& CenterLossParameter::center_filler() const {
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.center_filler)
  return center_filler_ != NULL ? *center_filler_ : *default_instance_->center_filler_;
}
::caffe::FillerParameter* CenterLossParameter::mutable_center_filler() {
  set_has_center_filler();
  if (center_filler_ == NULL) {
    center_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.CenterLossParameter.center_filler)
  return center_filler_;
}
::caffe::FillerParameter* CenterLossParameter::release_center_filler() {
  // @@protoc_insertion_point(field_release:caffe.CenterLossParameter.center_filler)
  clear_has_center_filler();
  ::caffe::FillerParameter* temp = center_filler_;
  center_filler_ = NULL;
  return temp;
}
void CenterLossParameter::set_allocated_center_filler(::caffe::FillerParameter* center_filler) {
  delete center_filler_;
  center_filler_ = center_filler;
  if (center_filler) {
    set_has_center_filler();
  } else {
    clear_has_center_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.CenterLossParameter.center_filler)
}

// optional int32 axis = 3 [default = 1];
bool CenterLossParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CenterLossParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void CenterLossParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void CenterLossParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 CenterLossParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.axis)
  return axis_;
}
 void CenterLossParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CenterLossParameter.axis)
}

// optional string distance_type = 29 [default = "L2"];
bool CenterLossParameter::has_distance_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CenterLossParameter::set_has_distance_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CenterLossParameter::clear_has_distance_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CenterLossParameter::clear_distance_type() {
  distance_type_.ClearToDefaultNoArena(_default_distance_type_);
  clear_has_distance_type();
}
 const ::std::string& CenterLossParameter::distance_type() const {
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.distance_type)
  return distance_type_.GetNoArena(_default_distance_type_);
}
 void CenterLossParameter::set_distance_type(const ::std::string& value) {
  set_has_distance_type();
  distance_type_.SetNoArena(_default_distance_type_, value);
  // @@protoc_insertion_point(field_set:caffe.CenterLossParameter.distance_type)
}
 void CenterLossParameter::set_distance_type(const char* value) {
  set_has_distance_type();
  distance_type_.SetNoArena(_default_distance_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.CenterLossParameter.distance_type)
}
 void CenterLossParameter::set_distance_type(const char* value, size_t size) {
  set_has_distance_type();
  distance_type_.SetNoArena(_default_distance_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.CenterLossParameter.distance_type)
}
 ::std::string* CenterLossParameter::mutable_distance_type() {
  set_has_distance_type();
  // @@protoc_insertion_point(field_mutable:caffe.CenterLossParameter.distance_type)
  return distance_type_.MutableNoArena(_default_distance_type_);
}
 ::std::string* CenterLossParameter::release_distance_type() {
  // @@protoc_insertion_point(field_release:caffe.CenterLossParameter.distance_type)
  clear_has_distance_type();
  return distance_type_.ReleaseNoArena(_default_distance_type_);
}
 void CenterLossParameter::set_allocated_distance_type(::std::string* distance_type) {
  if (distance_type != NULL) {
    set_has_distance_type();
  } else {
    clear_has_distance_type();
  }
  distance_type_.SetAllocatedNoArena(_default_distance_type_, distance_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.CenterLossParameter.distance_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlipParameter::kFlipWidthFieldNumber;
const int FlipParameter::kFlipHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlipParameter::FlipParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FlipParameter)
}

void FlipParameter::InitAsDefaultInstance() {
}

FlipParameter::FlipParameter(const FlipParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FlipParameter)
}

void FlipParameter::SharedCtor() {
  _cached_size_ = 0;
  flip_width_ = true;
  flip_height_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlipParameter::~FlipParameter() {
  // @@protoc_insertion_point(destructor:caffe.FlipParameter)
  SharedDtor();
}

void FlipParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlipParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlipParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlipParameter_descriptor_;
}

const FlipParameter& FlipParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FlipParameter* FlipParameter::default_instance_ = NULL;

FlipParameter* FlipParameter::New(::google::protobuf::Arena* arena) const {
  FlipParameter* n = new FlipParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlipParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FlipParameter)
  if (_has_bits_[0 / 32] & 3u) {
    flip_width_ = true;
    flip_height_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FlipParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FlipParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool flip_width = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_width_)));
          set_has_flip_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flip_height;
        break;
      }

      // optional bool flip_height = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_flip_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_height_)));
          set_has_flip_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FlipParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FlipParameter)
  return false;
#undef DO_
}

void FlipParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FlipParameter)
  // optional bool flip_width = 1 [default = true];
  if (has_flip_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flip_width(), output);
  }

  // optional bool flip_height = 2 [default = false];
  if (has_flip_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flip_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FlipParameter)
}

::google::protobuf::uint8* FlipParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FlipParameter)
  // optional bool flip_width = 1 [default = true];
  if (has_flip_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flip_width(), target);
  }

  // optional bool flip_height = 2 [default = false];
  if (has_flip_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flip_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FlipParameter)
  return target;
}

int FlipParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FlipParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool flip_width = 1 [default = true];
    if (has_flip_width()) {
      total_size += 1 + 1;
    }

    // optional bool flip_height = 2 [default = false];
    if (has_flip_height()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlipParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FlipParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FlipParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FlipParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FlipParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FlipParameter)
    MergeFrom(*source);
  }
}

void FlipParameter::MergeFrom(const FlipParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FlipParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flip_width()) {
      set_flip_width(from.flip_width());
    }
    if (from.has_flip_height()) {
      set_flip_height(from.flip_height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FlipParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FlipParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlipParameter::CopyFrom(const FlipParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FlipParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlipParameter::IsInitialized() const {

  return true;
}

void FlipParameter::Swap(FlipParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlipParameter::InternalSwap(FlipParameter* other) {
  std::swap(flip_width_, other->flip_width_);
  std::swap(flip_height_, other->flip_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlipParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlipParameter_descriptor_;
  metadata.reflection = FlipParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlipParameter

// optional bool flip_width = 1 [default = true];
bool FlipParameter::has_flip_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlipParameter::set_has_flip_width() {
  _has_bits_[0] |= 0x00000001u;
}
void FlipParameter::clear_has_flip_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlipParameter::clear_flip_width() {
  flip_width_ = true;
  clear_has_flip_width();
}
 bool FlipParameter::flip_width() const {
  // @@protoc_insertion_point(field_get:caffe.FlipParameter.flip_width)
  return flip_width_;
}
 void FlipParameter::set_flip_width(bool value) {
  set_has_flip_width();
  flip_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlipParameter.flip_width)
}

// optional bool flip_height = 2 [default = false];
bool FlipParameter::has_flip_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlipParameter::set_has_flip_height() {
  _has_bits_[0] |= 0x00000002u;
}
void FlipParameter::clear_has_flip_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlipParameter::clear_flip_height() {
  flip_height_ = false;
  clear_has_flip_height();
}
 bool FlipParameter::flip_height() const {
  // @@protoc_insertion_point(field_get:caffe.FlipParameter.flip_height)
  return flip_height_;
}
 void FlipParameter::set_flip_height(bool value) {
  set_has_flip_height();
  flip_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlipParameter.flip_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* NormalizeParameter::_default_normalize_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizeParameter::kNormalizeTypeFieldNumber;
const int NormalizeParameter::kFixGradientFieldNumber;
const int NormalizeParameter::kBpNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizeParameter::NormalizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NormalizeParameter)
}

void NormalizeParameter::InitAsDefaultInstance() {
}

NormalizeParameter::NormalizeParameter(const NormalizeParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NormalizeParameter)
}

void NormalizeParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  normalize_type_.UnsafeSetDefault(_default_normalize_type_);
  fix_gradient_ = false;
  bp_norm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalizeParameter::~NormalizeParameter() {
  // @@protoc_insertion_point(destructor:caffe.NormalizeParameter)
  SharedDtor();
}

void NormalizeParameter::SharedDtor() {
  normalize_type_.DestroyNoArena(_default_normalize_type_);
  if (this != default_instance_) {
  }
}

void NormalizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalizeParameter_descriptor_;
}

const NormalizeParameter& NormalizeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NormalizeParameter* NormalizeParameter::default_instance_ = NULL;

NormalizeParameter* NormalizeParameter::New(::google::protobuf::Arena* arena) const {
  NormalizeParameter* n = new NormalizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NormalizeParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NormalizeParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NormalizeParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(fix_gradient_, bp_norm_);
    if (has_normalize_type()) {
      normalize_type_.ClearToDefaultNoArena(_default_normalize_type_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NormalizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NormalizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string normalize_type = 1 [default = "L2"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalize_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normalize_type().data(), this->normalize_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NormalizeParameter.normalize_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fix_gradient;
        break;
      }

      // optional bool fix_gradient = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_fix_gradient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fix_gradient_)));
          set_has_fix_gradient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bp_norm;
        break;
      }

      // optional bool bp_norm = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_bp_norm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bp_norm_)));
          set_has_bp_norm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NormalizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NormalizeParameter)
  return false;
#undef DO_
}

void NormalizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NormalizeParameter)
  // optional string normalize_type = 1 [default = "L2"];
  if (has_normalize_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalize_type().data(), this->normalize_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NormalizeParameter.normalize_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->normalize_type(), output);
  }

  // optional bool fix_gradient = 2 [default = false];
  if (has_fix_gradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fix_gradient(), output);
  }

  // optional bool bp_norm = 3 [default = false];
  if (has_bp_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bp_norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NormalizeParameter)
}

::google::protobuf::uint8* NormalizeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NormalizeParameter)
  // optional string normalize_type = 1 [default = "L2"];
  if (has_normalize_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalize_type().data(), this->normalize_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NormalizeParameter.normalize_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->normalize_type(), target);
  }

  // optional bool fix_gradient = 2 [default = false];
  if (has_fix_gradient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fix_gradient(), target);
  }

  // optional bool bp_norm = 3 [default = false];
  if (has_bp_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bp_norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NormalizeParameter)
  return target;
}

int NormalizeParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NormalizeParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string normalize_type = 1 [default = "L2"];
    if (has_normalize_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalize_type());
    }

    // optional bool fix_gradient = 2 [default = false];
    if (has_fix_gradient()) {
      total_size += 1 + 1;
    }

    // optional bool bp_norm = 3 [default = false];
    if (has_bp_norm()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NormalizeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NormalizeParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NormalizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NormalizeParameter)
    MergeFrom(*source);
  }
}

void NormalizeParameter::MergeFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NormalizeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normalize_type()) {
      set_has_normalize_type();
      normalize_type_.AssignWithDefault(_default_normalize_type_, from.normalize_type_);
    }
    if (from.has_fix_gradient()) {
      set_fix_gradient(from.fix_gradient());
    }
    if (from.has_bp_norm()) {
      set_bp_norm(from.bp_norm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NormalizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NormalizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeParameter::CopyFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NormalizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeParameter::IsInitialized() const {

  return true;
}

void NormalizeParameter::Swap(NormalizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizeParameter::InternalSwap(NormalizeParameter* other) {
  normalize_type_.Swap(&other->normalize_type_);
  std::swap(fix_gradient_, other->fix_gradient_);
  std::swap(bp_norm_, other->bp_norm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalizeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalizeParameter_descriptor_;
  metadata.reflection = NormalizeParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizeParameter

// optional string normalize_type = 1 [default = "L2"];
bool NormalizeParameter::has_normalize_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NormalizeParameter::set_has_normalize_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NormalizeParameter::clear_has_normalize_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NormalizeParameter::clear_normalize_type() {
  normalize_type_.ClearToDefaultNoArena(_default_normalize_type_);
  clear_has_normalize_type();
}
 const ::std::string& NormalizeParameter::normalize_type() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.normalize_type)
  return normalize_type_.GetNoArena(_default_normalize_type_);
}
 void NormalizeParameter::set_normalize_type(const ::std::string& value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(_default_normalize_type_, value);
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.normalize_type)
}
 void NormalizeParameter::set_normalize_type(const char* value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(_default_normalize_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NormalizeParameter.normalize_type)
}
 void NormalizeParameter::set_normalize_type(const char* value, size_t size) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(_default_normalize_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NormalizeParameter.normalize_type)
}
 ::std::string* NormalizeParameter::mutable_normalize_type() {
  set_has_normalize_type();
  // @@protoc_insertion_point(field_mutable:caffe.NormalizeParameter.normalize_type)
  return normalize_type_.MutableNoArena(_default_normalize_type_);
}
 ::std::string* NormalizeParameter::release_normalize_type() {
  // @@protoc_insertion_point(field_release:caffe.NormalizeParameter.normalize_type)
  clear_has_normalize_type();
  return normalize_type_.ReleaseNoArena(_default_normalize_type_);
}
 void NormalizeParameter::set_allocated_normalize_type(::std::string* normalize_type) {
  if (normalize_type != NULL) {
    set_has_normalize_type();
  } else {
    clear_has_normalize_type();
  }
  normalize_type_.SetAllocatedNoArena(_default_normalize_type_, normalize_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.NormalizeParameter.normalize_type)
}

// optional bool fix_gradient = 2 [default = false];
bool NormalizeParameter::has_fix_gradient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NormalizeParameter::set_has_fix_gradient() {
  _has_bits_[0] |= 0x00000002u;
}
void NormalizeParameter::clear_has_fix_gradient() {
  _has_bits_[0] &= ~0x00000002u;
}
void NormalizeParameter::clear_fix_gradient() {
  fix_gradient_ = false;
  clear_has_fix_gradient();
}
 bool NormalizeParameter::fix_gradient() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.fix_gradient)
  return fix_gradient_;
}
 void NormalizeParameter::set_fix_gradient(bool value) {
  set_has_fix_gradient();
  fix_gradient_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.fix_gradient)
}

// optional bool bp_norm = 3 [default = false];
bool NormalizeParameter::has_bp_norm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NormalizeParameter::set_has_bp_norm() {
  _has_bits_[0] |= 0x00000004u;
}
void NormalizeParameter::clear_has_bp_norm() {
  _has_bits_[0] &= ~0x00000004u;
}
void NormalizeParameter::clear_bp_norm() {
  bp_norm_ = false;
  clear_has_bp_norm();
}
 bool NormalizeParameter::bp_norm() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.bp_norm)
  return bp_norm_;
}
 void NormalizeParameter::set_bp_norm(bool value) {
  set_has_bp_norm();
  bp_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.bp_norm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralContrastiveParameter::kPositiveMarginFieldNumber;
const int GeneralContrastiveParameter::kNegativeMarginFieldNumber;
const int GeneralContrastiveParameter::kPositiveWeightFieldNumber;
const int GeneralContrastiveParameter::kNegativeWeightFieldNumber;
const int GeneralContrastiveParameter::kNormalizeNegativeFieldNumber;
const int GeneralContrastiveParameter::kPositiveOutlierThreshFieldNumber;
const int GeneralContrastiveParameter::kSquareFieldNumber;
const int GeneralContrastiveParameter::kMaxNegativeOnlyFieldNumber;
const int GeneralContrastiveParameter::kMaxPositiveOnlyFieldNumber;
const int GeneralContrastiveParameter::kPositiveFirstFieldNumber;
const int GeneralContrastiveParameter::kPositiveUpperBoundFieldNumber;
const int GeneralContrastiveParameter::kExpNegativeWeightFieldNumber;
const int GeneralContrastiveParameter::kAddIntraMaeFieldNumber;
const int GeneralContrastiveParameter::kMaxNegativeMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralContrastiveParameter::GeneralContrastiveParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GeneralContrastiveParameter)
}

void GeneralContrastiveParameter::InitAsDefaultInstance() {
}

GeneralContrastiveParameter::GeneralContrastiveParameter(const GeneralContrastiveParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.GeneralContrastiveParameter)
}

void GeneralContrastiveParameter::SharedCtor() {
  _cached_size_ = 0;
  positive_margin_ = 0;
  negative_margin_ = 1;
  positive_weight_ = 1;
  negative_weight_ = 1;
  normalize_negative_ = 0;
  positive_outlier_thresh_ = 4;
  square_ = false;
  max_negative_only_ = false;
  max_positive_only_ = false;
  positive_first_ = false;
  positive_upper_bound_ = 1;
  exp_negative_weight_ = false;
  add_intra_mae_ = false;
  max_negative_margin_ = 1.2f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralContrastiveParameter::~GeneralContrastiveParameter() {
  // @@protoc_insertion_point(destructor:caffe.GeneralContrastiveParameter)
  SharedDtor();
}

void GeneralContrastiveParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeneralContrastiveParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralContrastiveParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralContrastiveParameter_descriptor_;
}

const GeneralContrastiveParameter& GeneralContrastiveParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

GeneralContrastiveParameter* GeneralContrastiveParameter::default_instance_ = NULL;

GeneralContrastiveParameter* GeneralContrastiveParameter::New(::google::protobuf::Arena* arena) const {
  GeneralContrastiveParameter* n = new GeneralContrastiveParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeneralContrastiveParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GeneralContrastiveParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeneralContrastiveParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeneralContrastiveParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(square_, max_negative_only_);
    positive_margin_ = 0;
    negative_margin_ = 1;
    positive_weight_ = 1;
    negative_weight_ = 1;
    normalize_negative_ = 0;
    positive_outlier_thresh_ = 4;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(max_positive_only_, positive_first_);
    ZR_(exp_negative_weight_, add_intra_mae_);
    positive_upper_bound_ = 1;
    max_negative_margin_ = 1.2f;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GeneralContrastiveParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GeneralContrastiveParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float positive_margin = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_margin_)));
          set_has_positive_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_negative_margin;
        break;
      }

      // optional float negative_margin = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_negative_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_margin_)));
          set_has_negative_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positive_weight;
        break;
      }

      // optional float positive_weight = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_positive_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_)));
          set_has_positive_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_negative_weight;
        break;
      }

      // optional float negative_weight = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_negative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_weight_)));
          set_has_negative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_normalize_negative;
        break;
      }

      // optional float normalize_negative = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_normalize_negative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normalize_negative_)));
          set_has_normalize_negative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_positive_outlier_thresh;
        break;
      }

      // optional float positive_outlier_thresh = 6 [default = 4];
      case 6: {
        if (tag == 53) {
         parse_positive_outlier_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_outlier_thresh_)));
          set_has_positive_outlier_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_square;
        break;
      }

      // optional bool square = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_square:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &square_)));
          set_has_square();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_negative_only;
        break;
      }

      // optional bool max_negative_only = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_max_negative_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_negative_only_)));
          set_has_max_negative_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_positive_only;
        break;
      }

      // optional bool max_positive_only = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_max_positive_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_positive_only_)));
          set_has_max_positive_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_positive_first;
        break;
      }

      // optional bool positive_first = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_positive_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positive_first_)));
          set_has_positive_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_positive_upper_bound;
        break;
      }

      // optional float positive_upper_bound = 11 [default = 1];
      case 11: {
        if (tag == 93) {
         parse_positive_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_upper_bound_)));
          set_has_positive_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_exp_negative_weight;
        break;
      }

      // optional bool exp_negative_weight = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_exp_negative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exp_negative_weight_)));
          set_has_exp_negative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_add_intra_mae;
        break;
      }

      // optional bool add_intra_mae = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_add_intra_mae:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_intra_mae_)));
          set_has_add_intra_mae();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_max_negative_margin;
        break;
      }

      // optional float max_negative_margin = 14 [default = 1.2];
      case 14: {
        if (tag == 117) {
         parse_max_negative_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_negative_margin_)));
          set_has_max_negative_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GeneralContrastiveParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GeneralContrastiveParameter)
  return false;
#undef DO_
}

void GeneralContrastiveParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GeneralContrastiveParameter)
  // optional float positive_margin = 1 [default = 0];
  if (has_positive_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->positive_margin(), output);
  }

  // optional float negative_margin = 2 [default = 1];
  if (has_negative_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->negative_margin(), output);
  }

  // optional float positive_weight = 3 [default = 1];
  if (has_positive_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positive_weight(), output);
  }

  // optional float negative_weight = 4 [default = 1];
  if (has_negative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->negative_weight(), output);
  }

  // optional float normalize_negative = 5 [default = 0];
  if (has_normalize_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->normalize_negative(), output);
  }

  // optional float positive_outlier_thresh = 6 [default = 4];
  if (has_positive_outlier_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->positive_outlier_thresh(), output);
  }

  // optional bool square = 7 [default = false];
  if (has_square()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->square(), output);
  }

  // optional bool max_negative_only = 8 [default = false];
  if (has_max_negative_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->max_negative_only(), output);
  }

  // optional bool max_positive_only = 9 [default = false];
  if (has_max_positive_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->max_positive_only(), output);
  }

  // optional bool positive_first = 10 [default = false];
  if (has_positive_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->positive_first(), output);
  }

  // optional float positive_upper_bound = 11 [default = 1];
  if (has_positive_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->positive_upper_bound(), output);
  }

  // optional bool exp_negative_weight = 12 [default = false];
  if (has_exp_negative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->exp_negative_weight(), output);
  }

  // optional bool add_intra_mae = 13 [default = false];
  if (has_add_intra_mae()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->add_intra_mae(), output);
  }

  // optional float max_negative_margin = 14 [default = 1.2];
  if (has_max_negative_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->max_negative_margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GeneralContrastiveParameter)
}

::google::protobuf::uint8* GeneralContrastiveParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GeneralContrastiveParameter)
  // optional float positive_margin = 1 [default = 0];
  if (has_positive_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->positive_margin(), target);
  }

  // optional float negative_margin = 2 [default = 1];
  if (has_negative_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->negative_margin(), target);
  }

  // optional float positive_weight = 3 [default = 1];
  if (has_positive_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positive_weight(), target);
  }

  // optional float negative_weight = 4 [default = 1];
  if (has_negative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->negative_weight(), target);
  }

  // optional float normalize_negative = 5 [default = 0];
  if (has_normalize_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->normalize_negative(), target);
  }

  // optional float positive_outlier_thresh = 6 [default = 4];
  if (has_positive_outlier_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->positive_outlier_thresh(), target);
  }

  // optional bool square = 7 [default = false];
  if (has_square()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->square(), target);
  }

  // optional bool max_negative_only = 8 [default = false];
  if (has_max_negative_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->max_negative_only(), target);
  }

  // optional bool max_positive_only = 9 [default = false];
  if (has_max_positive_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->max_positive_only(), target);
  }

  // optional bool positive_first = 10 [default = false];
  if (has_positive_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->positive_first(), target);
  }

  // optional float positive_upper_bound = 11 [default = 1];
  if (has_positive_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->positive_upper_bound(), target);
  }

  // optional bool exp_negative_weight = 12 [default = false];
  if (has_exp_negative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->exp_negative_weight(), target);
  }

  // optional bool add_intra_mae = 13 [default = false];
  if (has_add_intra_mae()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->add_intra_mae(), target);
  }

  // optional float max_negative_margin = 14 [default = 1.2];
  if (has_max_negative_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->max_negative_margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GeneralContrastiveParameter)
  return target;
}

int GeneralContrastiveParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GeneralContrastiveParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float positive_margin = 1 [default = 0];
    if (has_positive_margin()) {
      total_size += 1 + 4;
    }

    // optional float negative_margin = 2 [default = 1];
    if (has_negative_margin()) {
      total_size += 1 + 4;
    }

    // optional float positive_weight = 3 [default = 1];
    if (has_positive_weight()) {
      total_size += 1 + 4;
    }

    // optional float negative_weight = 4 [default = 1];
    if (has_negative_weight()) {
      total_size += 1 + 4;
    }

    // optional float normalize_negative = 5 [default = 0];
    if (has_normalize_negative()) {
      total_size += 1 + 4;
    }

    // optional float positive_outlier_thresh = 6 [default = 4];
    if (has_positive_outlier_thresh()) {
      total_size += 1 + 4;
    }

    // optional bool square = 7 [default = false];
    if (has_square()) {
      total_size += 1 + 1;
    }

    // optional bool max_negative_only = 8 [default = false];
    if (has_max_negative_only()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool max_positive_only = 9 [default = false];
    if (has_max_positive_only()) {
      total_size += 1 + 1;
    }

    // optional bool positive_first = 10 [default = false];
    if (has_positive_first()) {
      total_size += 1 + 1;
    }

    // optional float positive_upper_bound = 11 [default = 1];
    if (has_positive_upper_bound()) {
      total_size += 1 + 4;
    }

    // optional bool exp_negative_weight = 12 [default = false];
    if (has_exp_negative_weight()) {
      total_size += 1 + 1;
    }

    // optional bool add_intra_mae = 13 [default = false];
    if (has_add_intra_mae()) {
      total_size += 1 + 1;
    }

    // optional float max_negative_margin = 14 [default = 1.2];
    if (has_max_negative_margin()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralContrastiveParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GeneralContrastiveParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GeneralContrastiveParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralContrastiveParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GeneralContrastiveParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GeneralContrastiveParameter)
    MergeFrom(*source);
  }
}

void GeneralContrastiveParameter::MergeFrom(const GeneralContrastiveParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GeneralContrastiveParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positive_margin()) {
      set_positive_margin(from.positive_margin());
    }
    if (from.has_negative_margin()) {
      set_negative_margin(from.negative_margin());
    }
    if (from.has_positive_weight()) {
      set_positive_weight(from.positive_weight());
    }
    if (from.has_negative_weight()) {
      set_negative_weight(from.negative_weight());
    }
    if (from.has_normalize_negative()) {
      set_normalize_negative(from.normalize_negative());
    }
    if (from.has_positive_outlier_thresh()) {
      set_positive_outlier_thresh(from.positive_outlier_thresh());
    }
    if (from.has_square()) {
      set_square(from.square());
    }
    if (from.has_max_negative_only()) {
      set_max_negative_only(from.max_negative_only());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_positive_only()) {
      set_max_positive_only(from.max_positive_only());
    }
    if (from.has_positive_first()) {
      set_positive_first(from.positive_first());
    }
    if (from.has_positive_upper_bound()) {
      set_positive_upper_bound(from.positive_upper_bound());
    }
    if (from.has_exp_negative_weight()) {
      set_exp_negative_weight(from.exp_negative_weight());
    }
    if (from.has_add_intra_mae()) {
      set_add_intra_mae(from.add_intra_mae());
    }
    if (from.has_max_negative_margin()) {
      set_max_negative_margin(from.max_negative_margin());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GeneralContrastiveParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GeneralContrastiveParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralContrastiveParameter::CopyFrom(const GeneralContrastiveParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GeneralContrastiveParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralContrastiveParameter::IsInitialized() const {

  return true;
}

void GeneralContrastiveParameter::Swap(GeneralContrastiveParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralContrastiveParameter::InternalSwap(GeneralContrastiveParameter* other) {
  std::swap(positive_margin_, other->positive_margin_);
  std::swap(negative_margin_, other->negative_margin_);
  std::swap(positive_weight_, other->positive_weight_);
  std::swap(negative_weight_, other->negative_weight_);
  std::swap(normalize_negative_, other->normalize_negative_);
  std::swap(positive_outlier_thresh_, other->positive_outlier_thresh_);
  std::swap(square_, other->square_);
  std::swap(max_negative_only_, other->max_negative_only_);
  std::swap(max_positive_only_, other->max_positive_only_);
  std::swap(positive_first_, other->positive_first_);
  std::swap(positive_upper_bound_, other->positive_upper_bound_);
  std::swap(exp_negative_weight_, other->exp_negative_weight_);
  std::swap(add_intra_mae_, other->add_intra_mae_);
  std::swap(max_negative_margin_, other->max_negative_margin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeneralContrastiveParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralContrastiveParameter_descriptor_;
  metadata.reflection = GeneralContrastiveParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeneralContrastiveParameter

// optional float positive_margin = 1 [default = 0];
bool GeneralContrastiveParameter::has_positive_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeneralContrastiveParameter::set_has_positive_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void GeneralContrastiveParameter::clear_has_positive_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeneralContrastiveParameter::clear_positive_margin() {
  positive_margin_ = 0;
  clear_has_positive_margin();
}
 float GeneralContrastiveParameter::positive_margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_margin)
  return positive_margin_;
}
 void GeneralContrastiveParameter::set_positive_margin(float value) {
  set_has_positive_margin();
  positive_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_margin)
}

// optional float negative_margin = 2 [default = 1];
bool GeneralContrastiveParameter::has_negative_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeneralContrastiveParameter::set_has_negative_margin() {
  _has_bits_[0] |= 0x00000002u;
}
void GeneralContrastiveParameter::clear_has_negative_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeneralContrastiveParameter::clear_negative_margin() {
  negative_margin_ = 1;
  clear_has_negative_margin();
}
 float GeneralContrastiveParameter::negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.negative_margin)
  return negative_margin_;
}
 void GeneralContrastiveParameter::set_negative_margin(float value) {
  set_has_negative_margin();
  negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.negative_margin)
}

// optional float positive_weight = 3 [default = 1];
bool GeneralContrastiveParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GeneralContrastiveParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void GeneralContrastiveParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void GeneralContrastiveParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
 float GeneralContrastiveParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_weight)
  return positive_weight_;
}
 void GeneralContrastiveParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_weight)
}

// optional float negative_weight = 4 [default = 1];
bool GeneralContrastiveParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GeneralContrastiveParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void GeneralContrastiveParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void GeneralContrastiveParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
 float GeneralContrastiveParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.negative_weight)
  return negative_weight_;
}
 void GeneralContrastiveParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.negative_weight)
}

// optional float normalize_negative = 5 [default = 0];
bool GeneralContrastiveParameter::has_normalize_negative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GeneralContrastiveParameter::set_has_normalize_negative() {
  _has_bits_[0] |= 0x00000010u;
}
void GeneralContrastiveParameter::clear_has_normalize_negative() {
  _has_bits_[0] &= ~0x00000010u;
}
void GeneralContrastiveParameter::clear_normalize_negative() {
  normalize_negative_ = 0;
  clear_has_normalize_negative();
}
 float GeneralContrastiveParameter::normalize_negative() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.normalize_negative)
  return normalize_negative_;
}
 void GeneralContrastiveParameter::set_normalize_negative(float value) {
  set_has_normalize_negative();
  normalize_negative_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.normalize_negative)
}

// optional float positive_outlier_thresh = 6 [default = 4];
bool GeneralContrastiveParameter::has_positive_outlier_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GeneralContrastiveParameter::set_has_positive_outlier_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
void GeneralContrastiveParameter::clear_has_positive_outlier_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
void GeneralContrastiveParameter::clear_positive_outlier_thresh() {
  positive_outlier_thresh_ = 4;
  clear_has_positive_outlier_thresh();
}
 float GeneralContrastiveParameter::positive_outlier_thresh() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_outlier_thresh)
  return positive_outlier_thresh_;
}
 void GeneralContrastiveParameter::set_positive_outlier_thresh(float value) {
  set_has_positive_outlier_thresh();
  positive_outlier_thresh_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_outlier_thresh)
}

// optional bool square = 7 [default = false];
bool GeneralContrastiveParameter::has_square() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GeneralContrastiveParameter::set_has_square() {
  _has_bits_[0] |= 0x00000040u;
}
void GeneralContrastiveParameter::clear_has_square() {
  _has_bits_[0] &= ~0x00000040u;
}
void GeneralContrastiveParameter::clear_square() {
  square_ = false;
  clear_has_square();
}
 bool GeneralContrastiveParameter::square() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.square)
  return square_;
}
 void GeneralContrastiveParameter::set_square(bool value) {
  set_has_square();
  square_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.square)
}

// optional bool max_negative_only = 8 [default = false];
bool GeneralContrastiveParameter::has_max_negative_only() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GeneralContrastiveParameter::set_has_max_negative_only() {
  _has_bits_[0] |= 0x00000080u;
}
void GeneralContrastiveParameter::clear_has_max_negative_only() {
  _has_bits_[0] &= ~0x00000080u;
}
void GeneralContrastiveParameter::clear_max_negative_only() {
  max_negative_only_ = false;
  clear_has_max_negative_only();
}
 bool GeneralContrastiveParameter::max_negative_only() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.max_negative_only)
  return max_negative_only_;
}
 void GeneralContrastiveParameter::set_max_negative_only(bool value) {
  set_has_max_negative_only();
  max_negative_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.max_negative_only)
}

// optional bool max_positive_only = 9 [default = false];
bool GeneralContrastiveParameter::has_max_positive_only() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GeneralContrastiveParameter::set_has_max_positive_only() {
  _has_bits_[0] |= 0x00000100u;
}
void GeneralContrastiveParameter::clear_has_max_positive_only() {
  _has_bits_[0] &= ~0x00000100u;
}
void GeneralContrastiveParameter::clear_max_positive_only() {
  max_positive_only_ = false;
  clear_has_max_positive_only();
}
 bool GeneralContrastiveParameter::max_positive_only() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.max_positive_only)
  return max_positive_only_;
}
 void GeneralContrastiveParameter::set_max_positive_only(bool value) {
  set_has_max_positive_only();
  max_positive_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.max_positive_only)
}

// optional bool positive_first = 10 [default = false];
bool GeneralContrastiveParameter::has_positive_first() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GeneralContrastiveParameter::set_has_positive_first() {
  _has_bits_[0] |= 0x00000200u;
}
void GeneralContrastiveParameter::clear_has_positive_first() {
  _has_bits_[0] &= ~0x00000200u;
}
void GeneralContrastiveParameter::clear_positive_first() {
  positive_first_ = false;
  clear_has_positive_first();
}
 bool GeneralContrastiveParameter::positive_first() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_first)
  return positive_first_;
}
 void GeneralContrastiveParameter::set_positive_first(bool value) {
  set_has_positive_first();
  positive_first_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_first)
}

// optional float positive_upper_bound = 11 [default = 1];
bool GeneralContrastiveParameter::has_positive_upper_bound() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GeneralContrastiveParameter::set_has_positive_upper_bound() {
  _has_bits_[0] |= 0x00000400u;
}
void GeneralContrastiveParameter::clear_has_positive_upper_bound() {
  _has_bits_[0] &= ~0x00000400u;
}
void GeneralContrastiveParameter::clear_positive_upper_bound() {
  positive_upper_bound_ = 1;
  clear_has_positive_upper_bound();
}
 float GeneralContrastiveParameter::positive_upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_upper_bound)
  return positive_upper_bound_;
}
 void GeneralContrastiveParameter::set_positive_upper_bound(float value) {
  set_has_positive_upper_bound();
  positive_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_upper_bound)
}

// optional bool exp_negative_weight = 12 [default = false];
bool GeneralContrastiveParameter::has_exp_negative_weight() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GeneralContrastiveParameter::set_has_exp_negative_weight() {
  _has_bits_[0] |= 0x00000800u;
}
void GeneralContrastiveParameter::clear_has_exp_negative_weight() {
  _has_bits_[0] &= ~0x00000800u;
}
void GeneralContrastiveParameter::clear_exp_negative_weight() {
  exp_negative_weight_ = false;
  clear_has_exp_negative_weight();
}
 bool GeneralContrastiveParameter::exp_negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.exp_negative_weight)
  return exp_negative_weight_;
}
 void GeneralContrastiveParameter::set_exp_negative_weight(bool value) {
  set_has_exp_negative_weight();
  exp_negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.exp_negative_weight)
}

// optional bool add_intra_mae = 13 [default = false];
bool GeneralContrastiveParameter::has_add_intra_mae() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GeneralContrastiveParameter::set_has_add_intra_mae() {
  _has_bits_[0] |= 0x00001000u;
}
void GeneralContrastiveParameter::clear_has_add_intra_mae() {
  _has_bits_[0] &= ~0x00001000u;
}
void GeneralContrastiveParameter::clear_add_intra_mae() {
  add_intra_mae_ = false;
  clear_has_add_intra_mae();
}
 bool GeneralContrastiveParameter::add_intra_mae() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.add_intra_mae)
  return add_intra_mae_;
}
 void GeneralContrastiveParameter::set_add_intra_mae(bool value) {
  set_has_add_intra_mae();
  add_intra_mae_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.add_intra_mae)
}

// optional float max_negative_margin = 14 [default = 1.2];
bool GeneralContrastiveParameter::has_max_negative_margin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GeneralContrastiveParameter::set_has_max_negative_margin() {
  _has_bits_[0] |= 0x00002000u;
}
void GeneralContrastiveParameter::clear_has_max_negative_margin() {
  _has_bits_[0] &= ~0x00002000u;
}
void GeneralContrastiveParameter::clear_max_negative_margin() {
  max_negative_margin_ = 1.2f;
  clear_has_max_negative_margin();
}
 float GeneralContrastiveParameter::max_negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.max_negative_margin)
  return max_negative_margin_;
}
 void GeneralContrastiveParameter::set_max_negative_margin(float value) {
  set_has_max_negative_margin();
  max_negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.max_negative_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchContrastiveParameter::kPositiveMarginFieldNumber;
const int BatchContrastiveParameter::kNegativeMarginFieldNumber;
const int BatchContrastiveParameter::kPositiveWeightFieldNumber;
const int BatchContrastiveParameter::kNegativeWeightFieldNumber;
const int BatchContrastiveParameter::kMaxOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchContrastiveParameter::BatchContrastiveParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchContrastiveParameter)
}

void BatchContrastiveParameter::InitAsDefaultInstance() {
}

BatchContrastiveParameter::BatchContrastiveParameter(const BatchContrastiveParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BatchContrastiveParameter)
}

void BatchContrastiveParameter::SharedCtor() {
  _cached_size_ = 0;
  positive_margin_ = 1;
  negative_margin_ = 1;
  positive_weight_ = 1;
  negative_weight_ = 1;
  max_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchContrastiveParameter::~BatchContrastiveParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchContrastiveParameter)
  SharedDtor();
}

void BatchContrastiveParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchContrastiveParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchContrastiveParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchContrastiveParameter_descriptor_;
}

const BatchContrastiveParameter& BatchContrastiveParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BatchContrastiveParameter* BatchContrastiveParameter::default_instance_ = NULL;

BatchContrastiveParameter* BatchContrastiveParameter::New(::google::protobuf::Arena* arena) const {
  BatchContrastiveParameter* n = new BatchContrastiveParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchContrastiveParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchContrastiveParameter)
  if (_has_bits_[0 / 32] & 31u) {
    positive_margin_ = 1;
    negative_margin_ = 1;
    positive_weight_ = 1;
    negative_weight_ = 1;
    max_only_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchContrastiveParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchContrastiveParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float positive_margin = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_margin_)));
          set_has_positive_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_negative_margin;
        break;
      }

      // optional float negative_margin = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_negative_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_margin_)));
          set_has_negative_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positive_weight;
        break;
      }

      // optional float positive_weight = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_positive_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_)));
          set_has_positive_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_negative_weight;
        break;
      }

      // optional float negative_weight = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_negative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_weight_)));
          set_has_negative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_only;
        break;
      }

      // optional bool max_only = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_max_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_only_)));
          set_has_max_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchContrastiveParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchContrastiveParameter)
  return false;
#undef DO_
}

void BatchContrastiveParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchContrastiveParameter)
  // optional float positive_margin = 1 [default = 1];
  if (has_positive_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->positive_margin(), output);
  }

  // optional float negative_margin = 2 [default = 1];
  if (has_negative_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->negative_margin(), output);
  }

  // optional float positive_weight = 3 [default = 1];
  if (has_positive_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positive_weight(), output);
  }

  // optional float negative_weight = 4 [default = 1];
  if (has_negative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->negative_weight(), output);
  }

  // optional bool max_only = 5 [default = false];
  if (has_max_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->max_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchContrastiveParameter)
}

::google::protobuf::uint8* BatchContrastiveParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchContrastiveParameter)
  // optional float positive_margin = 1 [default = 1];
  if (has_positive_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->positive_margin(), target);
  }

  // optional float negative_margin = 2 [default = 1];
  if (has_negative_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->negative_margin(), target);
  }

  // optional float positive_weight = 3 [default = 1];
  if (has_positive_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positive_weight(), target);
  }

  // optional float negative_weight = 4 [default = 1];
  if (has_negative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->negative_weight(), target);
  }

  // optional bool max_only = 5 [default = false];
  if (has_max_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->max_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchContrastiveParameter)
  return target;
}

int BatchContrastiveParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchContrastiveParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional float positive_margin = 1 [default = 1];
    if (has_positive_margin()) {
      total_size += 1 + 4;
    }

    // optional float negative_margin = 2 [default = 1];
    if (has_negative_margin()) {
      total_size += 1 + 4;
    }

    // optional float positive_weight = 3 [default = 1];
    if (has_positive_weight()) {
      total_size += 1 + 4;
    }

    // optional float negative_weight = 4 [default = 1];
    if (has_negative_weight()) {
      total_size += 1 + 4;
    }

    // optional bool max_only = 5 [default = false];
    if (has_max_only()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchContrastiveParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchContrastiveParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchContrastiveParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchContrastiveParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchContrastiveParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchContrastiveParameter)
    MergeFrom(*source);
  }
}

void BatchContrastiveParameter::MergeFrom(const BatchContrastiveParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchContrastiveParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positive_margin()) {
      set_positive_margin(from.positive_margin());
    }
    if (from.has_negative_margin()) {
      set_negative_margin(from.negative_margin());
    }
    if (from.has_positive_weight()) {
      set_positive_weight(from.positive_weight());
    }
    if (from.has_negative_weight()) {
      set_negative_weight(from.negative_weight());
    }
    if (from.has_max_only()) {
      set_max_only(from.max_only());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BatchContrastiveParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchContrastiveParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchContrastiveParameter::CopyFrom(const BatchContrastiveParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchContrastiveParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchContrastiveParameter::IsInitialized() const {

  return true;
}

void BatchContrastiveParameter::Swap(BatchContrastiveParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchContrastiveParameter::InternalSwap(BatchContrastiveParameter* other) {
  std::swap(positive_margin_, other->positive_margin_);
  std::swap(negative_margin_, other->negative_margin_);
  std::swap(positive_weight_, other->positive_weight_);
  std::swap(negative_weight_, other->negative_weight_);
  std::swap(max_only_, other->max_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchContrastiveParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchContrastiveParameter_descriptor_;
  metadata.reflection = BatchContrastiveParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchContrastiveParameter

// optional float positive_margin = 1 [default = 1];
bool BatchContrastiveParameter::has_positive_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchContrastiveParameter::set_has_positive_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchContrastiveParameter::clear_has_positive_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchContrastiveParameter::clear_positive_margin() {
  positive_margin_ = 1;
  clear_has_positive_margin();
}
 float BatchContrastiveParameter::positive_margin() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.positive_margin)
  return positive_margin_;
}
 void BatchContrastiveParameter::set_positive_margin(float value) {
  set_has_positive_margin();
  positive_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.positive_margin)
}

// optional float negative_margin = 2 [default = 1];
bool BatchContrastiveParameter::has_negative_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchContrastiveParameter::set_has_negative_margin() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchContrastiveParameter::clear_has_negative_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchContrastiveParameter::clear_negative_margin() {
  negative_margin_ = 1;
  clear_has_negative_margin();
}
 float BatchContrastiveParameter::negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.negative_margin)
  return negative_margin_;
}
 void BatchContrastiveParameter::set_negative_margin(float value) {
  set_has_negative_margin();
  negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.negative_margin)
}

// optional float positive_weight = 3 [default = 1];
bool BatchContrastiveParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchContrastiveParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchContrastiveParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchContrastiveParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
 float BatchContrastiveParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.positive_weight)
  return positive_weight_;
}
 void BatchContrastiveParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.positive_weight)
}

// optional float negative_weight = 4 [default = 1];
bool BatchContrastiveParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BatchContrastiveParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void BatchContrastiveParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void BatchContrastiveParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
 float BatchContrastiveParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.negative_weight)
  return negative_weight_;
}
 void BatchContrastiveParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.negative_weight)
}

// optional bool max_only = 5 [default = false];
bool BatchContrastiveParameter::has_max_only() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BatchContrastiveParameter::set_has_max_only() {
  _has_bits_[0] |= 0x00000010u;
}
void BatchContrastiveParameter::clear_has_max_only() {
  _has_bits_[0] &= ~0x00000010u;
}
void BatchContrastiveParameter::clear_max_only() {
  max_only_ = false;
  clear_has_max_only();
}
 bool BatchContrastiveParameter::max_only() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.max_only)
  return max_only_;
}
 void BatchContrastiveParameter::set_max_only(bool value) {
  set_has_max_only();
  max_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.max_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftContrastiveParameter::kPositiveMarginFieldNumber;
const int SoftContrastiveParameter::kNegativeMarginFieldNumber;
const int SoftContrastiveParameter::kPositiveWeightFieldNumber;
const int SoftContrastiveParameter::kNegativeWeightFieldNumber;
const int SoftContrastiveParameter::kExponentScaleFieldNumber;
const int SoftContrastiveParameter::kSquareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftContrastiveParameter::SoftContrastiveParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftContrastiveParameter)
}

void SoftContrastiveParameter::InitAsDefaultInstance() {
}

SoftContrastiveParameter::SoftContrastiveParameter(const SoftContrastiveParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SoftContrastiveParameter)
}

void SoftContrastiveParameter::SharedCtor() {
  _cached_size_ = 0;
  positive_margin_ = 1;
  negative_margin_ = 1;
  positive_weight_ = 1;
  negative_weight_ = 1;
  exponent_scale_ = 1;
  square_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftContrastiveParameter::~SoftContrastiveParameter() {
  // @@protoc_insertion_point(destructor:caffe.SoftContrastiveParameter)
  SharedDtor();
}

void SoftContrastiveParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftContrastiveParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftContrastiveParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftContrastiveParameter_descriptor_;
}

const SoftContrastiveParameter& SoftContrastiveParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SoftContrastiveParameter* SoftContrastiveParameter::default_instance_ = NULL;

SoftContrastiveParameter* SoftContrastiveParameter::New(::google::protobuf::Arena* arena) const {
  SoftContrastiveParameter* n = new SoftContrastiveParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftContrastiveParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftContrastiveParameter)
  if (_has_bits_[0 / 32] & 63u) {
    positive_margin_ = 1;
    negative_margin_ = 1;
    positive_weight_ = 1;
    negative_weight_ = 1;
    exponent_scale_ = 1;
    square_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SoftContrastiveParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftContrastiveParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float positive_margin = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_margin_)));
          set_has_positive_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_negative_margin;
        break;
      }

      // optional float negative_margin = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_negative_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_margin_)));
          set_has_negative_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positive_weight;
        break;
      }

      // optional float positive_weight = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_positive_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_)));
          set_has_positive_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_negative_weight;
        break;
      }

      // optional float negative_weight = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_negative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_weight_)));
          set_has_negative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_exponent_scale;
        break;
      }

      // optional float exponent_scale = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_exponent_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exponent_scale_)));
          set_has_exponent_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_square;
        break;
      }

      // optional bool square = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_square:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &square_)));
          set_has_square();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftContrastiveParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftContrastiveParameter)
  return false;
#undef DO_
}

void SoftContrastiveParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftContrastiveParameter)
  // optional float positive_margin = 1 [default = 1];
  if (has_positive_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->positive_margin(), output);
  }

  // optional float negative_margin = 2 [default = 1];
  if (has_negative_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->negative_margin(), output);
  }

  // optional float positive_weight = 3 [default = 1];
  if (has_positive_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positive_weight(), output);
  }

  // optional float negative_weight = 4 [default = 1];
  if (has_negative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->negative_weight(), output);
  }

  // optional float exponent_scale = 5 [default = 1];
  if (has_exponent_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->exponent_scale(), output);
  }

  // optional bool square = 6 [default = false];
  if (has_square()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->square(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftContrastiveParameter)
}

::google::protobuf::uint8* SoftContrastiveParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftContrastiveParameter)
  // optional float positive_margin = 1 [default = 1];
  if (has_positive_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->positive_margin(), target);
  }

  // optional float negative_margin = 2 [default = 1];
  if (has_negative_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->negative_margin(), target);
  }

  // optional float positive_weight = 3 [default = 1];
  if (has_positive_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positive_weight(), target);
  }

  // optional float negative_weight = 4 [default = 1];
  if (has_negative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->negative_weight(), target);
  }

  // optional float exponent_scale = 5 [default = 1];
  if (has_exponent_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->exponent_scale(), target);
  }

  // optional bool square = 6 [default = false];
  if (has_square()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->square(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftContrastiveParameter)
  return target;
}

int SoftContrastiveParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftContrastiveParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional float positive_margin = 1 [default = 1];
    if (has_positive_margin()) {
      total_size += 1 + 4;
    }

    // optional float negative_margin = 2 [default = 1];
    if (has_negative_margin()) {
      total_size += 1 + 4;
    }

    // optional float positive_weight = 3 [default = 1];
    if (has_positive_weight()) {
      total_size += 1 + 4;
    }

    // optional float negative_weight = 4 [default = 1];
    if (has_negative_weight()) {
      total_size += 1 + 4;
    }

    // optional float exponent_scale = 5 [default = 1];
    if (has_exponent_scale()) {
      total_size += 1 + 4;
    }

    // optional bool square = 6 [default = false];
    if (has_square()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftContrastiveParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftContrastiveParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SoftContrastiveParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftContrastiveParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftContrastiveParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftContrastiveParameter)
    MergeFrom(*source);
  }
}

void SoftContrastiveParameter::MergeFrom(const SoftContrastiveParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftContrastiveParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positive_margin()) {
      set_positive_margin(from.positive_margin());
    }
    if (from.has_negative_margin()) {
      set_negative_margin(from.negative_margin());
    }
    if (from.has_positive_weight()) {
      set_positive_weight(from.positive_weight());
    }
    if (from.has_negative_weight()) {
      set_negative_weight(from.negative_weight());
    }
    if (from.has_exponent_scale()) {
      set_exponent_scale(from.exponent_scale());
    }
    if (from.has_square()) {
      set_square(from.square());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SoftContrastiveParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftContrastiveParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftContrastiveParameter::CopyFrom(const SoftContrastiveParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftContrastiveParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftContrastiveParameter::IsInitialized() const {

  return true;
}

void SoftContrastiveParameter::Swap(SoftContrastiveParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftContrastiveParameter::InternalSwap(SoftContrastiveParameter* other) {
  std::swap(positive_margin_, other->positive_margin_);
  std::swap(negative_margin_, other->negative_margin_);
  std::swap(positive_weight_, other->positive_weight_);
  std::swap(negative_weight_, other->negative_weight_);
  std::swap(exponent_scale_, other->exponent_scale_);
  std::swap(square_, other->square_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftContrastiveParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftContrastiveParameter_descriptor_;
  metadata.reflection = SoftContrastiveParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftContrastiveParameter

// optional float positive_margin = 1 [default = 1];
bool SoftContrastiveParameter::has_positive_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftContrastiveParameter::set_has_positive_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftContrastiveParameter::clear_has_positive_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftContrastiveParameter::clear_positive_margin() {
  positive_margin_ = 1;
  clear_has_positive_margin();
}
 float SoftContrastiveParameter::positive_margin() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.positive_margin)
  return positive_margin_;
}
 void SoftContrastiveParameter::set_positive_margin(float value) {
  set_has_positive_margin();
  positive_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.positive_margin)
}

// optional float negative_margin = 2 [default = 1];
bool SoftContrastiveParameter::has_negative_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SoftContrastiveParameter::set_has_negative_margin() {
  _has_bits_[0] |= 0x00000002u;
}
void SoftContrastiveParameter::clear_has_negative_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
void SoftContrastiveParameter::clear_negative_margin() {
  negative_margin_ = 1;
  clear_has_negative_margin();
}
 float SoftContrastiveParameter::negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.negative_margin)
  return negative_margin_;
}
 void SoftContrastiveParameter::set_negative_margin(float value) {
  set_has_negative_margin();
  negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.negative_margin)
}

// optional float positive_weight = 3 [default = 1];
bool SoftContrastiveParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SoftContrastiveParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void SoftContrastiveParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void SoftContrastiveParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
 float SoftContrastiveParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.positive_weight)
  return positive_weight_;
}
 void SoftContrastiveParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.positive_weight)
}

// optional float negative_weight = 4 [default = 1];
bool SoftContrastiveParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SoftContrastiveParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void SoftContrastiveParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void SoftContrastiveParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
 float SoftContrastiveParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.negative_weight)
  return negative_weight_;
}
 void SoftContrastiveParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.negative_weight)
}

// optional float exponent_scale = 5 [default = 1];
bool SoftContrastiveParameter::has_exponent_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SoftContrastiveParameter::set_has_exponent_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void SoftContrastiveParameter::clear_has_exponent_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void SoftContrastiveParameter::clear_exponent_scale() {
  exponent_scale_ = 1;
  clear_has_exponent_scale();
}
 float SoftContrastiveParameter::exponent_scale() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.exponent_scale)
  return exponent_scale_;
}
 void SoftContrastiveParameter::set_exponent_scale(float value) {
  set_has_exponent_scale();
  exponent_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.exponent_scale)
}

// optional bool square = 6 [default = false];
bool SoftContrastiveParameter::has_square() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SoftContrastiveParameter::set_has_square() {
  _has_bits_[0] |= 0x00000020u;
}
void SoftContrastiveParameter::clear_has_square() {
  _has_bits_[0] &= ~0x00000020u;
}
void SoftContrastiveParameter::clear_square() {
  square_ = false;
  clear_has_square();
}
 bool SoftContrastiveParameter::square() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.square)
  return square_;
}
 void SoftContrastiveParameter::set_square(bool value) {
  set_has_square();
  square_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.square)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralTripletParameter::kMarginFieldNumber;
const int GeneralTripletParameter::kAddCenterLossFieldNumber;
const int GeneralTripletParameter::kHardestOnlyFieldNumber;
const int GeneralTripletParameter::kPositiveFirstFieldNumber;
const int GeneralTripletParameter::kPositiveUpperBoundFieldNumber;
const int GeneralTripletParameter::kPositiveWeightFieldNumber;
const int GeneralTripletParameter::kNegativeWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralTripletParameter::GeneralTripletParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GeneralTripletParameter)
}

void GeneralTripletParameter::InitAsDefaultInstance() {
}

GeneralTripletParameter::GeneralTripletParameter(const GeneralTripletParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.GeneralTripletParameter)
}

void GeneralTripletParameter::SharedCtor() {
  _cached_size_ = 0;
  margin_ = 0.2f;
  add_center_loss_ = true;
  hardest_only_ = false;
  positive_first_ = false;
  positive_upper_bound_ = 1;
  positive_weight_ = 1;
  negative_weight_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralTripletParameter::~GeneralTripletParameter() {
  // @@protoc_insertion_point(destructor:caffe.GeneralTripletParameter)
  SharedDtor();
}

void GeneralTripletParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeneralTripletParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralTripletParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralTripletParameter_descriptor_;
}

const GeneralTripletParameter& GeneralTripletParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

GeneralTripletParameter* GeneralTripletParameter::default_instance_ = NULL;

GeneralTripletParameter* GeneralTripletParameter::New(::google::protobuf::Arena* arena) const {
  GeneralTripletParameter* n = new GeneralTripletParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeneralTripletParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GeneralTripletParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeneralTripletParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeneralTripletParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(hardest_only_, positive_first_);
    margin_ = 0.2f;
    add_center_loss_ = true;
    positive_upper_bound_ = 1;
    positive_weight_ = 1;
    negative_weight_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GeneralTripletParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GeneralTripletParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 0.2];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add_center_loss;
        break;
      }

      // optional bool add_center_loss = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_add_center_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_center_loss_)));
          set_has_add_center_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hardest_only;
        break;
      }

      // optional bool hardest_only = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_hardest_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardest_only_)));
          set_has_hardest_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_positive_first;
        break;
      }

      // optional bool positive_first = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_positive_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positive_first_)));
          set_has_positive_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_positive_upper_bound;
        break;
      }

      // optional float positive_upper_bound = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_positive_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_upper_bound_)));
          set_has_positive_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_positive_weight;
        break;
      }

      // optional float positive_weight = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_positive_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_)));
          set_has_positive_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_negative_weight;
        break;
      }

      // optional float negative_weight = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_negative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_weight_)));
          set_has_negative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GeneralTripletParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GeneralTripletParameter)
  return false;
#undef DO_
}

void GeneralTripletParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GeneralTripletParameter)
  // optional float margin = 1 [default = 0.2];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool add_center_loss = 2 [default = true];
  if (has_add_center_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->add_center_loss(), output);
  }

  // optional bool hardest_only = 3 [default = false];
  if (has_hardest_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hardest_only(), output);
  }

  // optional bool positive_first = 4 [default = false];
  if (has_positive_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->positive_first(), output);
  }

  // optional float positive_upper_bound = 5 [default = 1];
  if (has_positive_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->positive_upper_bound(), output);
  }

  // optional float positive_weight = 6 [default = 1];
  if (has_positive_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->positive_weight(), output);
  }

  // optional float negative_weight = 7 [default = 1];
  if (has_negative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->negative_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GeneralTripletParameter)
}

::google::protobuf::uint8* GeneralTripletParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GeneralTripletParameter)
  // optional float margin = 1 [default = 0.2];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool add_center_loss = 2 [default = true];
  if (has_add_center_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->add_center_loss(), target);
  }

  // optional bool hardest_only = 3 [default = false];
  if (has_hardest_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hardest_only(), target);
  }

  // optional bool positive_first = 4 [default = false];
  if (has_positive_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->positive_first(), target);
  }

  // optional float positive_upper_bound = 5 [default = 1];
  if (has_positive_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->positive_upper_bound(), target);
  }

  // optional float positive_weight = 6 [default = 1];
  if (has_positive_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->positive_weight(), target);
  }

  // optional float negative_weight = 7 [default = 1];
  if (has_negative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->negative_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GeneralTripletParameter)
  return target;
}

int GeneralTripletParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GeneralTripletParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional float margin = 1 [default = 0.2];
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional bool add_center_loss = 2 [default = true];
    if (has_add_center_loss()) {
      total_size += 1 + 1;
    }

    // optional bool hardest_only = 3 [default = false];
    if (has_hardest_only()) {
      total_size += 1 + 1;
    }

    // optional bool positive_first = 4 [default = false];
    if (has_positive_first()) {
      total_size += 1 + 1;
    }

    // optional float positive_upper_bound = 5 [default = 1];
    if (has_positive_upper_bound()) {
      total_size += 1 + 4;
    }

    // optional float positive_weight = 6 [default = 1];
    if (has_positive_weight()) {
      total_size += 1 + 4;
    }

    // optional float negative_weight = 7 [default = 1];
    if (has_negative_weight()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralTripletParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GeneralTripletParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GeneralTripletParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralTripletParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GeneralTripletParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GeneralTripletParameter)
    MergeFrom(*source);
  }
}

void GeneralTripletParameter::MergeFrom(const GeneralTripletParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GeneralTripletParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_add_center_loss()) {
      set_add_center_loss(from.add_center_loss());
    }
    if (from.has_hardest_only()) {
      set_hardest_only(from.hardest_only());
    }
    if (from.has_positive_first()) {
      set_positive_first(from.positive_first());
    }
    if (from.has_positive_upper_bound()) {
      set_positive_upper_bound(from.positive_upper_bound());
    }
    if (from.has_positive_weight()) {
      set_positive_weight(from.positive_weight());
    }
    if (from.has_negative_weight()) {
      set_negative_weight(from.negative_weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GeneralTripletParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GeneralTripletParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralTripletParameter::CopyFrom(const GeneralTripletParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GeneralTripletParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralTripletParameter::IsInitialized() const {

  return true;
}

void GeneralTripletParameter::Swap(GeneralTripletParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralTripletParameter::InternalSwap(GeneralTripletParameter* other) {
  std::swap(margin_, other->margin_);
  std::swap(add_center_loss_, other->add_center_loss_);
  std::swap(hardest_only_, other->hardest_only_);
  std::swap(positive_first_, other->positive_first_);
  std::swap(positive_upper_bound_, other->positive_upper_bound_);
  std::swap(positive_weight_, other->positive_weight_);
  std::swap(negative_weight_, other->negative_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeneralTripletParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralTripletParameter_descriptor_;
  metadata.reflection = GeneralTripletParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeneralTripletParameter

// optional float margin = 1 [default = 0.2];
bool GeneralTripletParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeneralTripletParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void GeneralTripletParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeneralTripletParameter::clear_margin() {
  margin_ = 0.2f;
  clear_has_margin();
}
 float GeneralTripletParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.margin)
  return margin_;
}
 void GeneralTripletParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.margin)
}

// optional bool add_center_loss = 2 [default = true];
bool GeneralTripletParameter::has_add_center_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeneralTripletParameter::set_has_add_center_loss() {
  _has_bits_[0] |= 0x00000002u;
}
void GeneralTripletParameter::clear_has_add_center_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeneralTripletParameter::clear_add_center_loss() {
  add_center_loss_ = true;
  clear_has_add_center_loss();
}
 bool GeneralTripletParameter::add_center_loss() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.add_center_loss)
  return add_center_loss_;
}
 void GeneralTripletParameter::set_add_center_loss(bool value) {
  set_has_add_center_loss();
  add_center_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.add_center_loss)
}

// optional bool hardest_only = 3 [default = false];
bool GeneralTripletParameter::has_hardest_only() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GeneralTripletParameter::set_has_hardest_only() {
  _has_bits_[0] |= 0x00000004u;
}
void GeneralTripletParameter::clear_has_hardest_only() {
  _has_bits_[0] &= ~0x00000004u;
}
void GeneralTripletParameter::clear_hardest_only() {
  hardest_only_ = false;
  clear_has_hardest_only();
}
 bool GeneralTripletParameter::hardest_only() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.hardest_only)
  return hardest_only_;
}
 void GeneralTripletParameter::set_hardest_only(bool value) {
  set_has_hardest_only();
  hardest_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.hardest_only)
}

// optional bool positive_first = 4 [default = false];
bool GeneralTripletParameter::has_positive_first() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GeneralTripletParameter::set_has_positive_first() {
  _has_bits_[0] |= 0x00000008u;
}
void GeneralTripletParameter::clear_has_positive_first() {
  _has_bits_[0] &= ~0x00000008u;
}
void GeneralTripletParameter::clear_positive_first() {
  positive_first_ = false;
  clear_has_positive_first();
}
 bool GeneralTripletParameter::positive_first() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.positive_first)
  return positive_first_;
}
 void GeneralTripletParameter::set_positive_first(bool value) {
  set_has_positive_first();
  positive_first_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.positive_first)
}

// optional float positive_upper_bound = 5 [default = 1];
bool GeneralTripletParameter::has_positive_upper_bound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GeneralTripletParameter::set_has_positive_upper_bound() {
  _has_bits_[0] |= 0x00000010u;
}
void GeneralTripletParameter::clear_has_positive_upper_bound() {
  _has_bits_[0] &= ~0x00000010u;
}
void GeneralTripletParameter::clear_positive_upper_bound() {
  positive_upper_bound_ = 1;
  clear_has_positive_upper_bound();
}
 float GeneralTripletParameter::positive_upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.positive_upper_bound)
  return positive_upper_bound_;
}
 void GeneralTripletParameter::set_positive_upper_bound(float value) {
  set_has_positive_upper_bound();
  positive_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.positive_upper_bound)
}

// optional float positive_weight = 6 [default = 1];
bool GeneralTripletParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GeneralTripletParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void GeneralTripletParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void GeneralTripletParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
 float GeneralTripletParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.positive_weight)
  return positive_weight_;
}
 void GeneralTripletParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.positive_weight)
}

// optional float negative_weight = 7 [default = 1];
bool GeneralTripletParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GeneralTripletParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void GeneralTripletParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void GeneralTripletParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
 float GeneralTripletParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.negative_weight)
  return negative_weight_;
}
 void GeneralTripletParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.negative_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftTruncationParameter::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftTruncationParameter::SoftTruncationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftTruncationParameter)
}

void SoftTruncationParameter::InitAsDefaultInstance() {
}

SoftTruncationParameter::SoftTruncationParameter(const SoftTruncationParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SoftTruncationParameter)
}

void SoftTruncationParameter::SharedCtor() {
  _cached_size_ = 0;
  c_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftTruncationParameter::~SoftTruncationParameter() {
  // @@protoc_insertion_point(destructor:caffe.SoftTruncationParameter)
  SharedDtor();
}

void SoftTruncationParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftTruncationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftTruncationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftTruncationParameter_descriptor_;
}

const SoftTruncationParameter& SoftTruncationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SoftTruncationParameter* SoftTruncationParameter::default_instance_ = NULL;

SoftTruncationParameter* SoftTruncationParameter::New(::google::protobuf::Arena* arena) const {
  SoftTruncationParameter* n = new SoftTruncationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftTruncationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftTruncationParameter)
  c_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SoftTruncationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftTruncationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float c = 1 [default = 2];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftTruncationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftTruncationParameter)
  return false;
#undef DO_
}

void SoftTruncationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftTruncationParameter)
  // optional float c = 1 [default = 2];
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->c(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftTruncationParameter)
}

::google::protobuf::uint8* SoftTruncationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftTruncationParameter)
  // optional float c = 1 [default = 2];
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->c(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftTruncationParameter)
  return target;
}

int SoftTruncationParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftTruncationParameter)
  int total_size = 0;

  // optional float c = 1 [default = 2];
  if (has_c()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftTruncationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftTruncationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SoftTruncationParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftTruncationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftTruncationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftTruncationParameter)
    MergeFrom(*source);
  }
}

void SoftTruncationParameter::MergeFrom(const SoftTruncationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftTruncationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SoftTruncationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftTruncationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftTruncationParameter::CopyFrom(const SoftTruncationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftTruncationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftTruncationParameter::IsInitialized() const {

  return true;
}

void SoftTruncationParameter::Swap(SoftTruncationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftTruncationParameter::InternalSwap(SoftTruncationParameter* other) {
  std::swap(c_, other->c_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftTruncationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftTruncationParameter_descriptor_;
  metadata.reflection = SoftTruncationParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftTruncationParameter

// optional float c = 1 [default = 2];
bool SoftTruncationParameter::has_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftTruncationParameter::set_has_c() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftTruncationParameter::clear_has_c() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftTruncationParameter::clear_c() {
  c_ = 2;
  clear_has_c();
}
 float SoftTruncationParameter::c() const {
  // @@protoc_insertion_point(field_get:caffe.SoftTruncationParameter.c)
  return c_;
}
 void SoftTruncationParameter::set_c(float value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftTruncationParameter.c)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncationParameter::kLowerBoundFieldNumber;
const int TruncationParameter::kUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncationParameter::TruncationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TruncationParameter)
}

void TruncationParameter::InitAsDefaultInstance() {
}

TruncationParameter::TruncationParameter(const TruncationParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TruncationParameter)
}

void TruncationParameter::SharedCtor() {
  _cached_size_ = 0;
  lower_bound_ = 0;
  upper_bound_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncationParameter::~TruncationParameter() {
  // @@protoc_insertion_point(destructor:caffe.TruncationParameter)
  SharedDtor();
}

void TruncationParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TruncationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncationParameter_descriptor_;
}

const TruncationParameter& TruncationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TruncationParameter* TruncationParameter::default_instance_ = NULL;

TruncationParameter* TruncationParameter::New(::google::protobuf::Arena* arena) const {
  TruncationParameter* n = new TruncationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TruncationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TruncationParameter)
  if (_has_bits_[0 / 32] & 3u) {
    lower_bound_ = 0;
    upper_bound_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TruncationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TruncationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lower_bound = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_bound_)));
          set_has_lower_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_upper_bound;
        break;
      }

      // optional float upper_bound = 2 [default = 5];
      case 2: {
        if (tag == 21) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_bound_)));
          set_has_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TruncationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TruncationParameter)
  return false;
#undef DO_
}

void TruncationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TruncationParameter)
  // optional float lower_bound = 1 [default = 0];
  if (has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lower_bound(), output);
  }

  // optional float upper_bound = 2 [default = 5];
  if (has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->upper_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TruncationParameter)
}

::google::protobuf::uint8* TruncationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TruncationParameter)
  // optional float lower_bound = 1 [default = 0];
  if (has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lower_bound(), target);
  }

  // optional float upper_bound = 2 [default = 5];
  if (has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->upper_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TruncationParameter)
  return target;
}

int TruncationParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TruncationParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float lower_bound = 1 [default = 0];
    if (has_lower_bound()) {
      total_size += 1 + 4;
    }

    // optional float upper_bound = 2 [default = 5];
    if (has_upper_bound()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TruncationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TruncationParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TruncationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TruncationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TruncationParameter)
    MergeFrom(*source);
  }
}

void TruncationParameter::MergeFrom(const TruncationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TruncationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lower_bound()) {
      set_lower_bound(from.lower_bound());
    }
    if (from.has_upper_bound()) {
      set_upper_bound(from.upper_bound());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TruncationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TruncationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncationParameter::CopyFrom(const TruncationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TruncationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncationParameter::IsInitialized() const {

  return true;
}

void TruncationParameter::Swap(TruncationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncationParameter::InternalSwap(TruncationParameter* other) {
  std::swap(lower_bound_, other->lower_bound_);
  std::swap(upper_bound_, other->upper_bound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TruncationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncationParameter_descriptor_;
  metadata.reflection = TruncationParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TruncationParameter

// optional float lower_bound = 1 [default = 0];
bool TruncationParameter::has_lower_bound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TruncationParameter::set_has_lower_bound() {
  _has_bits_[0] |= 0x00000001u;
}
void TruncationParameter::clear_has_lower_bound() {
  _has_bits_[0] &= ~0x00000001u;
}
void TruncationParameter::clear_lower_bound() {
  lower_bound_ = 0;
  clear_has_lower_bound();
}
 float TruncationParameter::lower_bound() const {
  // @@protoc_insertion_point(field_get:caffe.TruncationParameter.lower_bound)
  return lower_bound_;
}
 void TruncationParameter::set_lower_bound(float value) {
  set_has_lower_bound();
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.TruncationParameter.lower_bound)
}

// optional float upper_bound = 2 [default = 5];
bool TruncationParameter::has_upper_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TruncationParameter::set_has_upper_bound() {
  _has_bits_[0] |= 0x00000002u;
}
void TruncationParameter::clear_has_upper_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
void TruncationParameter::clear_upper_bound() {
  upper_bound_ = 5;
  clear_has_upper_bound();
}
 float TruncationParameter::upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.TruncationParameter.upper_bound)
  return upper_bound_;
}
 void TruncationParameter::set_upper_bound(float value) {
  set_has_upper_bound();
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.TruncationParameter.upper_bound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProposalParameter::kFeatStrideFieldNumber;
const int ProposalParameter::kBaseSizeFieldNumber;
const int ProposalParameter::kMinSizeFieldNumber;
const int ProposalParameter::kRatioFieldNumber;
const int ProposalParameter::kScaleFieldNumber;
const int ProposalParameter::kPreNmsTopnFieldNumber;
const int ProposalParameter::kPostNmsTopnFieldNumber;
const int ProposalParameter::kNmsThreshFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProposalParameter::ProposalParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ProposalParameter)
}

void ProposalParameter::InitAsDefaultInstance() {
}

ProposalParameter::ProposalParameter(const ProposalParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ProposalParameter)
}

void ProposalParameter::SharedCtor() {
  _cached_size_ = 0;
  feat_stride_ = 16u;
  base_size_ = 16u;
  min_size_ = 16u;
  pre_nms_topn_ = 6000u;
  post_nms_topn_ = 300u;
  nms_thresh_ = 0.7f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProposalParameter::~ProposalParameter() {
  // @@protoc_insertion_point(destructor:caffe.ProposalParameter)
  SharedDtor();
}

void ProposalParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProposalParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProposalParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposalParameter_descriptor_;
}

const ProposalParameter& ProposalParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ProposalParameter* ProposalParameter::default_instance_ = NULL;

ProposalParameter* ProposalParameter::New(::google::protobuf::Arena* arena) const {
  ProposalParameter* n = new ProposalParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProposalParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ProposalParameter)
  if (_has_bits_[0 / 32] & 231u) {
    feat_stride_ = 16u;
    base_size_ = 16u;
    min_size_ = 16u;
    pre_nms_topn_ = 6000u;
    post_nms_topn_ = 300u;
    nms_thresh_ = 0.7f;
  }
  ratio_.Clear();
  scale_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProposalParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ProposalParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 feat_stride = 1 [default = 16];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feat_stride_)));
          set_has_feat_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_base_size;
        break;
      }

      // optional uint32 base_size = 2 [default = 16];
      case 2: {
        if (tag == 16) {
         parse_base_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_size_)));
          set_has_base_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_size;
        break;
      }

      // optional uint32 min_size = 3 [default = 16];
      case 3: {
        if (tag == 24) {
         parse_min_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_size_)));
          set_has_min_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_ratio;
        break;
      }

      // repeated float ratio = 4;
      case 4: {
        if (tag == 37) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_ratio())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ratio())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_ratio;
        if (input->ExpectTag(45)) goto parse_scale;
        break;
      }

      // repeated float scale = 5;
      case 5: {
        if (tag == 45) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_scale())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scale())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_scale;
        if (input->ExpectTag(48)) goto parse_pre_nms_topn;
        break;
      }

      // optional uint32 pre_nms_topn = 6 [default = 6000];
      case 6: {
        if (tag == 48) {
         parse_pre_nms_topn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_nms_topn_)));
          set_has_pre_nms_topn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_post_nms_topn;
        break;
      }

      // optional uint32 post_nms_topn = 7 [default = 300];
      case 7: {
        if (tag == 56) {
         parse_post_nms_topn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_nms_topn_)));
          set_has_post_nms_topn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_nms_thresh;
        break;
      }

      // optional float nms_thresh = 8 [default = 0.7];
      case 8: {
        if (tag == 69) {
         parse_nms_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_thresh_)));
          set_has_nms_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ProposalParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ProposalParameter)
  return false;
#undef DO_
}

void ProposalParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ProposalParameter)
  // optional uint32 feat_stride = 1 [default = 16];
  if (has_feat_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->feat_stride(), output);
  }

  // optional uint32 base_size = 2 [default = 16];
  if (has_base_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->base_size(), output);
  }

  // optional uint32 min_size = 3 [default = 16];
  if (has_min_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_size(), output);
  }

  // repeated float ratio = 4;
  for (int i = 0; i < this->ratio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->ratio(i), output);
  }

  // repeated float scale = 5;
  for (int i = 0; i < this->scale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->scale(i), output);
  }

  // optional uint32 pre_nms_topn = 6 [default = 6000];
  if (has_pre_nms_topn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pre_nms_topn(), output);
  }

  // optional uint32 post_nms_topn = 7 [default = 300];
  if (has_post_nms_topn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->post_nms_topn(), output);
  }

  // optional float nms_thresh = 8 [default = 0.7];
  if (has_nms_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->nms_thresh(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ProposalParameter)
}

::google::protobuf::uint8* ProposalParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ProposalParameter)
  // optional uint32 feat_stride = 1 [default = 16];
  if (has_feat_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->feat_stride(), target);
  }

  // optional uint32 base_size = 2 [default = 16];
  if (has_base_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->base_size(), target);
  }

  // optional uint32 min_size = 3 [default = 16];
  if (has_min_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_size(), target);
  }

  // repeated float ratio = 4;
  for (int i = 0; i < this->ratio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->ratio(i), target);
  }

  // repeated float scale = 5;
  for (int i = 0; i < this->scale_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->scale(i), target);
  }

  // optional uint32 pre_nms_topn = 6 [default = 6000];
  if (has_pre_nms_topn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pre_nms_topn(), target);
  }

  // optional uint32 post_nms_topn = 7 [default = 300];
  if (has_post_nms_topn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->post_nms_topn(), target);
  }

  // optional float nms_thresh = 8 [default = 0.7];
  if (has_nms_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->nms_thresh(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ProposalParameter)
  return target;
}

int ProposalParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ProposalParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 231u) {
    // optional uint32 feat_stride = 1 [default = 16];
    if (has_feat_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feat_stride());
    }

    // optional uint32 base_size = 2 [default = 16];
    if (has_base_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_size());
    }

    // optional uint32 min_size = 3 [default = 16];
    if (has_min_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_size());
    }

    // optional uint32 pre_nms_topn = 6 [default = 6000];
    if (has_pre_nms_topn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_nms_topn());
    }

    // optional uint32 post_nms_topn = 7 [default = 300];
    if (has_post_nms_topn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->post_nms_topn());
    }

    // optional float nms_thresh = 8 [default = 0.7];
    if (has_nms_thresh()) {
      total_size += 1 + 4;
    }

  }
  // repeated float ratio = 4;
  {
    int data_size = 0;
    data_size = 4 * this->ratio_size();
    total_size += 1 * this->ratio_size() + data_size;
  }

  // repeated float scale = 5;
  {
    int data_size = 0;
    data_size = 4 * this->scale_size();
    total_size += 1 * this->scale_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProposalParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ProposalParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProposalParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProposalParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ProposalParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ProposalParameter)
    MergeFrom(*source);
  }
}

void ProposalParameter::MergeFrom(const ProposalParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ProposalParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ratio_.MergeFrom(from.ratio_);
  scale_.MergeFrom(from.scale_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feat_stride()) {
      set_feat_stride(from.feat_stride());
    }
    if (from.has_base_size()) {
      set_base_size(from.base_size());
    }
    if (from.has_min_size()) {
      set_min_size(from.min_size());
    }
    if (from.has_pre_nms_topn()) {
      set_pre_nms_topn(from.pre_nms_topn());
    }
    if (from.has_post_nms_topn()) {
      set_post_nms_topn(from.post_nms_topn());
    }
    if (from.has_nms_thresh()) {
      set_nms_thresh(from.nms_thresh());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProposalParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ProposalParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalParameter::CopyFrom(const ProposalParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ProposalParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalParameter::IsInitialized() const {

  return true;
}

void ProposalParameter::Swap(ProposalParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposalParameter::InternalSwap(ProposalParameter* other) {
  std::swap(feat_stride_, other->feat_stride_);
  std::swap(base_size_, other->base_size_);
  std::swap(min_size_, other->min_size_);
  ratio_.UnsafeArenaSwap(&other->ratio_);
  scale_.UnsafeArenaSwap(&other->scale_);
  std::swap(pre_nms_topn_, other->pre_nms_topn_);
  std::swap(post_nms_topn_, other->post_nms_topn_);
  std::swap(nms_thresh_, other->nms_thresh_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProposalParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProposalParameter_descriptor_;
  metadata.reflection = ProposalParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProposalParameter

// optional uint32 feat_stride = 1 [default = 16];
bool ProposalParameter::has_feat_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProposalParameter::set_has_feat_stride() {
  _has_bits_[0] |= 0x00000001u;
}
void ProposalParameter::clear_has_feat_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProposalParameter::clear_feat_stride() {
  feat_stride_ = 16u;
  clear_has_feat_stride();
}
 ::google::protobuf::uint32 ProposalParameter::feat_stride() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.feat_stride)
  return feat_stride_;
}
 void ProposalParameter::set_feat_stride(::google::protobuf::uint32 value) {
  set_has_feat_stride();
  feat_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.feat_stride)
}

// optional uint32 base_size = 2 [default = 16];
bool ProposalParameter::has_base_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProposalParameter::set_has_base_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ProposalParameter::clear_has_base_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProposalParameter::clear_base_size() {
  base_size_ = 16u;
  clear_has_base_size();
}
 ::google::protobuf::uint32 ProposalParameter::base_size() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.base_size)
  return base_size_;
}
 void ProposalParameter::set_base_size(::google::protobuf::uint32 value) {
  set_has_base_size();
  base_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.base_size)
}

// optional uint32 min_size = 3 [default = 16];
bool ProposalParameter::has_min_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProposalParameter::set_has_min_size() {
  _has_bits_[0] |= 0x00000004u;
}
void ProposalParameter::clear_has_min_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProposalParameter::clear_min_size() {
  min_size_ = 16u;
  clear_has_min_size();
}
 ::google::protobuf::uint32 ProposalParameter::min_size() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.min_size)
  return min_size_;
}
 void ProposalParameter::set_min_size(::google::protobuf::uint32 value) {
  set_has_min_size();
  min_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.min_size)
}

// repeated float ratio = 4;
int ProposalParameter::ratio_size() const {
  return ratio_.size();
}
void ProposalParameter::clear_ratio() {
  ratio_.Clear();
}
 float ProposalParameter::ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.ratio)
  return ratio_.Get(index);
}
 void ProposalParameter::set_ratio(int index, float value) {
  ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.ratio)
}
 void ProposalParameter::add_ratio(float value) {
  ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalParameter.ratio)
}
 const ::google::protobuf::RepeatedField< float >&
ProposalParameter::ratio() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalParameter.ratio)
  return ratio_;
}
 ::google::protobuf::RepeatedField< float >*
ProposalParameter::mutable_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalParameter.ratio)
  return &ratio_;
}

// repeated float scale = 5;
int ProposalParameter::scale_size() const {
  return scale_.size();
}
void ProposalParameter::clear_scale() {
  scale_.Clear();
}
 float ProposalParameter::scale(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.scale)
  return scale_.Get(index);
}
 void ProposalParameter::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.scale)
}
 void ProposalParameter::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalParameter.scale)
}
 const ::google::protobuf::RepeatedField< float >&
ProposalParameter::scale() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalParameter.scale)
  return scale_;
}
 ::google::protobuf::RepeatedField< float >*
ProposalParameter::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalParameter.scale)
  return &scale_;
}

// optional uint32 pre_nms_topn = 6 [default = 6000];
bool ProposalParameter::has_pre_nms_topn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProposalParameter::set_has_pre_nms_topn() {
  _has_bits_[0] |= 0x00000020u;
}
void ProposalParameter::clear_has_pre_nms_topn() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProposalParameter::clear_pre_nms_topn() {
  pre_nms_topn_ = 6000u;
  clear_has_pre_nms_topn();
}
 ::google::protobuf::uint32 ProposalParameter::pre_nms_topn() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.pre_nms_topn)
  return pre_nms_topn_;
}
 void ProposalParameter::set_pre_nms_topn(::google::protobuf::uint32 value) {
  set_has_pre_nms_topn();
  pre_nms_topn_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.pre_nms_topn)
}

// optional uint32 post_nms_topn = 7 [default = 300];
bool ProposalParameter::has_post_nms_topn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProposalParameter::set_has_post_nms_topn() {
  _has_bits_[0] |= 0x00000040u;
}
void ProposalParameter::clear_has_post_nms_topn() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProposalParameter::clear_post_nms_topn() {
  post_nms_topn_ = 300u;
  clear_has_post_nms_topn();
}
 ::google::protobuf::uint32 ProposalParameter::post_nms_topn() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.post_nms_topn)
  return post_nms_topn_;
}
 void ProposalParameter::set_post_nms_topn(::google::protobuf::uint32 value) {
  set_has_post_nms_topn();
  post_nms_topn_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.post_nms_topn)
}

// optional float nms_thresh = 8 [default = 0.7];
bool ProposalParameter::has_nms_thresh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProposalParameter::set_has_nms_thresh() {
  _has_bits_[0] |= 0x00000080u;
}
void ProposalParameter::clear_has_nms_thresh() {
  _has_bits_[0] &= ~0x00000080u;
}
void ProposalParameter::clear_nms_thresh() {
  nms_thresh_ = 0.7f;
  clear_has_nms_thresh();
}
 float ProposalParameter::nms_thresh() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.nms_thresh)
  return nms_thresh_;
}
 void ProposalParameter::set_nms_thresh(float value) {
  set_has_nms_thresh();
  nms_thresh_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.nms_thresh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSROIPoolingParameter::kSpatialScaleFieldNumber;
const int PSROIPoolingParameter::kOutputDimFieldNumber;
const int PSROIPoolingParameter::kGroupSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSROIPoolingParameter::PSROIPoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PSROIPoolingParameter)
}

void PSROIPoolingParameter::InitAsDefaultInstance() {
}

PSROIPoolingParameter::PSROIPoolingParameter(const PSROIPoolingParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PSROIPoolingParameter)
}

void PSROIPoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  spatial_scale_ = 0;
  output_dim_ = 0;
  group_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSROIPoolingParameter::~PSROIPoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PSROIPoolingParameter)
  SharedDtor();
}

void PSROIPoolingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PSROIPoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSROIPoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSROIPoolingParameter_descriptor_;
}

const PSROIPoolingParameter& PSROIPoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PSROIPoolingParameter* PSROIPoolingParameter::default_instance_ = NULL;

PSROIPoolingParameter* PSROIPoolingParameter::New(::google::protobuf::Arena* arena) const {
  PSROIPoolingParameter* n = new PSROIPoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PSROIPoolingParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PSROIPoolingParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PSROIPoolingParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(spatial_scale_, group_size_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PSROIPoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PSROIPoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float spatial_scale = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spatial_scale_)));
          set_has_spatial_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_dim;
        break;
      }

      // required int32 output_dim = 2;
      case 2: {
        if (tag == 16) {
         parse_output_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_dim_)));
          set_has_output_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_size;
        break;
      }

      // required int32 group_size = 3;
      case 3: {
        if (tag == 24) {
         parse_group_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));
          set_has_group_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PSROIPoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PSROIPoolingParameter)
  return false;
#undef DO_
}

void PSROIPoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PSROIPoolingParameter)
  // required float spatial_scale = 1;
  if (has_spatial_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->spatial_scale(), output);
  }

  // required int32 output_dim = 2;
  if (has_output_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->output_dim(), output);
  }

  // required int32 group_size = 3;
  if (has_group_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PSROIPoolingParameter)
}

::google::protobuf::uint8* PSROIPoolingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PSROIPoolingParameter)
  // required float spatial_scale = 1;
  if (has_spatial_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->spatial_scale(), target);
  }

  // required int32 output_dim = 2;
  if (has_output_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->output_dim(), target);
  }

  // required int32 group_size = 3;
  if (has_group_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PSROIPoolingParameter)
  return target;
}

int PSROIPoolingParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.PSROIPoolingParameter)
  int total_size = 0;

  if (has_spatial_scale()) {
    // required float spatial_scale = 1;
    total_size += 1 + 4;
  }

  if (has_output_dim()) {
    // required int32 output_dim = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_dim());
  }

  if (has_group_size()) {
    // required int32 group_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  return total_size;
}
int PSROIPoolingParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PSROIPoolingParameter)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float spatial_scale = 1;
    total_size += 1 + 4;

    // required int32 output_dim = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_dim());

    // required int32 group_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSROIPoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PSROIPoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PSROIPoolingParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PSROIPoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PSROIPoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PSROIPoolingParameter)
    MergeFrom(*source);
  }
}

void PSROIPoolingParameter::MergeFrom(const PSROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PSROIPoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spatial_scale()) {
      set_spatial_scale(from.spatial_scale());
    }
    if (from.has_output_dim()) {
      set_output_dim(from.output_dim());
    }
    if (from.has_group_size()) {
      set_group_size(from.group_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PSROIPoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PSROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSROIPoolingParameter::CopyFrom(const PSROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PSROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSROIPoolingParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PSROIPoolingParameter::Swap(PSROIPoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSROIPoolingParameter::InternalSwap(PSROIPoolingParameter* other) {
  std::swap(spatial_scale_, other->spatial_scale_);
  std::swap(output_dim_, other->output_dim_);
  std::swap(group_size_, other->group_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSROIPoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSROIPoolingParameter_descriptor_;
  metadata.reflection = PSROIPoolingParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PSROIPoolingParameter

// required float spatial_scale = 1;
bool PSROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PSROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000001u;
}
void PSROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
void PSROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 0;
  clear_has_spatial_scale();
}
 float PSROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
 void PSROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.spatial_scale)
}

// required int32 output_dim = 2;
bool PSROIPoolingParameter::has_output_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PSROIPoolingParameter::set_has_output_dim() {
  _has_bits_[0] |= 0x00000002u;
}
void PSROIPoolingParameter::clear_has_output_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
void PSROIPoolingParameter::clear_output_dim() {
  output_dim_ = 0;
  clear_has_output_dim();
}
 ::google::protobuf::int32 PSROIPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.output_dim)
  return output_dim_;
}
 void PSROIPoolingParameter::set_output_dim(::google::protobuf::int32 value) {
  set_has_output_dim();
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.output_dim)
}

// required int32 group_size = 3;
bool PSROIPoolingParameter::has_group_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PSROIPoolingParameter::set_has_group_size() {
  _has_bits_[0] |= 0x00000004u;
}
void PSROIPoolingParameter::clear_has_group_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void PSROIPoolingParameter::clear_group_size() {
  group_size_ = 0;
  clear_has_group_size();
}
 ::google::protobuf::int32 PSROIPoolingParameter::group_size() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.group_size)
  return group_size_;
}
 void PSROIPoolingParameter::set_group_size(::google::protobuf::int32 value) {
  set_has_group_size();
  group_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.group_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PairwiseParameter_PairwiseOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairwiseParameter_PairwiseOp_descriptor_;
}
bool PairwiseParameter_PairwiseOp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PairwiseParameter_PairwiseOp PairwiseParameter::SUM;
const PairwiseParameter_PairwiseOp PairwiseParameter::PROD;
const PairwiseParameter_PairwiseOp PairwiseParameter::MAX;
const PairwiseParameter_PairwiseOp PairwiseParameter::PairwiseOp_MIN;
const PairwiseParameter_PairwiseOp PairwiseParameter::PairwiseOp_MAX;
const int PairwiseParameter::PairwiseOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PairwiseParameter::kOperationFieldNumber;
const int PairwiseParameter::kCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PairwiseParameter::PairwiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PairwiseParameter)
}

void PairwiseParameter::InitAsDefaultInstance() {
}

PairwiseParameter::PairwiseParameter(const PairwiseParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PairwiseParameter)
}

void PairwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairwiseParameter::~PairwiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.PairwiseParameter)
  SharedDtor();
}

void PairwiseParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairwiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairwiseParameter_descriptor_;
}

const PairwiseParameter& PairwiseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PairwiseParameter* PairwiseParameter::default_instance_ = NULL;

PairwiseParameter* PairwiseParameter::New(::google::protobuf::Arena* arena) const {
  PairwiseParameter* n = new PairwiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PairwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PairwiseParameter)
  operation_ = 1;
  coeff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PairwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PairwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PairwiseParameter.PairwiseOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PairwiseParameter_PairwiseOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::PairwiseParameter_PairwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (tag == 21) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_coeff())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PairwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PairwiseParameter)
  return false;
#undef DO_
}

void PairwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PairwiseParameter)
  // optional .caffe.PairwiseParameter.PairwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PairwiseParameter)
}

::google::protobuf::uint8* PairwiseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PairwiseParameter)
  // optional .caffe.PairwiseParameter.PairwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->coeff(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PairwiseParameter)
  return target;
}

int PairwiseParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PairwiseParameter)
  int total_size = 0;

  // optional .caffe.PairwiseParameter.PairwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // repeated float coeff = 2;
  {
    int data_size = 0;
    data_size = 4 * this->coeff_size();
    total_size += 1 * this->coeff_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PairwiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PairwiseParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PairwiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PairwiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PairwiseParameter)
    MergeFrom(*source);
  }
}

void PairwiseParameter::MergeFrom(const PairwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PairwiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  coeff_.MergeFrom(from.coeff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PairwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PairwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairwiseParameter::CopyFrom(const PairwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PairwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairwiseParameter::IsInitialized() const {

  return true;
}

void PairwiseParameter::Swap(PairwiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PairwiseParameter::InternalSwap(PairwiseParameter* other) {
  std::swap(operation_, other->operation_);
  coeff_.UnsafeArenaSwap(&other->coeff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PairwiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairwiseParameter_descriptor_;
  metadata.reflection = PairwiseParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PairwiseParameter

// optional .caffe.PairwiseParameter.PairwiseOp operation = 1 [default = SUM];
bool PairwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PairwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void PairwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void PairwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
 ::caffe::PairwiseParameter_PairwiseOp PairwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.PairwiseParameter.operation)
  return static_cast< ::caffe::PairwiseParameter_PairwiseOp >(operation_);
}
 void PairwiseParameter::set_operation(::caffe::PairwiseParameter_PairwiseOp value) {
  assert(::caffe::PairwiseParameter_PairwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairwiseParameter.operation)
}

// repeated float coeff = 2;
int PairwiseParameter::coeff_size() const {
  return coeff_.size();
}
void PairwiseParameter::clear_coeff() {
  coeff_.Clear();
}
 float PairwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairwiseParameter.coeff)
  return coeff_.Get(index);
}
 void PairwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PairwiseParameter.coeff)
}
 void PairwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PairwiseParameter.coeff)
}
 const ::google::protobuf::RepeatedField< float >&
PairwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.PairwiseParameter.coeff)
  return coeff_;
}
 ::google::protobuf::RepeatedField< float >*
PairwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairwiseParameter.coeff)
  return &coeff_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmoothL1Parameter::kTurnPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmoothL1Parameter::SmoothL1Parameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SmoothL1Parameter)
}

void SmoothL1Parameter::InitAsDefaultInstance() {
}

SmoothL1Parameter::SmoothL1Parameter(const SmoothL1Parameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SmoothL1Parameter)
}

void SmoothL1Parameter::SharedCtor() {
  _cached_size_ = 0;
  turn_point_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothL1Parameter::~SmoothL1Parameter() {
  // @@protoc_insertion_point(destructor:caffe.SmoothL1Parameter)
  SharedDtor();
}

void SmoothL1Parameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmoothL1Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothL1Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothL1Parameter_descriptor_;
}

const SmoothL1Parameter& SmoothL1Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SmoothL1Parameter* SmoothL1Parameter::default_instance_ = NULL;

SmoothL1Parameter* SmoothL1Parameter::New(::google::protobuf::Arena* arena) const {
  SmoothL1Parameter* n = new SmoothL1Parameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmoothL1Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SmoothL1Parameter)
  turn_point_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmoothL1Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SmoothL1Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float turn_point = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turn_point_)));
          set_has_turn_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SmoothL1Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SmoothL1Parameter)
  return false;
#undef DO_
}

void SmoothL1Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SmoothL1Parameter)
  // optional float turn_point = 1 [default = 1];
  if (has_turn_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->turn_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SmoothL1Parameter)
}

::google::protobuf::uint8* SmoothL1Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SmoothL1Parameter)
  // optional float turn_point = 1 [default = 1];
  if (has_turn_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->turn_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SmoothL1Parameter)
  return target;
}

int SmoothL1Parameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SmoothL1Parameter)
  int total_size = 0;

  // optional float turn_point = 1 [default = 1];
  if (has_turn_point()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothL1Parameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SmoothL1Parameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SmoothL1Parameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmoothL1Parameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SmoothL1Parameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SmoothL1Parameter)
    MergeFrom(*source);
  }
}

void SmoothL1Parameter::MergeFrom(const SmoothL1Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SmoothL1Parameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turn_point()) {
      set_turn_point(from.turn_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmoothL1Parameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SmoothL1Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothL1Parameter::CopyFrom(const SmoothL1Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SmoothL1Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothL1Parameter::IsInitialized() const {

  return true;
}

void SmoothL1Parameter::Swap(SmoothL1Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmoothL1Parameter::InternalSwap(SmoothL1Parameter* other) {
  std::swap(turn_point_, other->turn_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmoothL1Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothL1Parameter_descriptor_;
  metadata.reflection = SmoothL1Parameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmoothL1Parameter

// optional float turn_point = 1 [default = 1];
bool SmoothL1Parameter::has_turn_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmoothL1Parameter::set_has_turn_point() {
  _has_bits_[0] |= 0x00000001u;
}
void SmoothL1Parameter::clear_has_turn_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmoothL1Parameter::clear_turn_point() {
  turn_point_ = 1;
  clear_has_turn_point();
}
 float SmoothL1Parameter::turn_point() const {
  // @@protoc_insertion_point(field_get:caffe.SmoothL1Parameter.turn_point)
  return turn_point_;
}
 void SmoothL1Parameter::set_turn_point(float value) {
  set_has_turn_point();
  turn_point_ = value;
  // @@protoc_insertion_point(field_set:caffe.SmoothL1Parameter.turn_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermuteParameter::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermuteParameter::PermuteParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PermuteParameter)
}

void PermuteParameter::InitAsDefaultInstance() {
}

PermuteParameter::PermuteParameter(const PermuteParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PermuteParameter)
}

void PermuteParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermuteParameter::~PermuteParameter() {
  // @@protoc_insertion_point(destructor:caffe.PermuteParameter)
  SharedDtor();
}

void PermuteParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PermuteParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PermuteParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PermuteParameter_descriptor_;
}

const PermuteParameter& PermuteParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PermuteParameter* PermuteParameter::default_instance_ = NULL;

PermuteParameter* PermuteParameter::New(::google::protobuf::Arena* arena) const {
  PermuteParameter* n = new PermuteParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermuteParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PermuteParameter)
  order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PermuteParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PermuteParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 order = 1;
      case 1: {
        if (tag == 8) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_order())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_order())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_order;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PermuteParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PermuteParameter)
  return false;
#undef DO_
}

void PermuteParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PermuteParameter)
  // repeated uint32 order = 1;
  for (int i = 0; i < this->order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PermuteParameter)
}

::google::protobuf::uint8* PermuteParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PermuteParameter)
  // repeated uint32 order = 1;
  for (int i = 0; i < this->order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PermuteParameter)
  return target;
}

int PermuteParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PermuteParameter)
  int total_size = 0;

  // repeated uint32 order = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->order_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->order(i));
    }
    total_size += 1 * this->order_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermuteParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PermuteParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PermuteParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PermuteParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PermuteParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PermuteParameter)
    MergeFrom(*source);
  }
}

void PermuteParameter::MergeFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PermuteParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  order_.MergeFrom(from.order_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PermuteParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PermuteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermuteParameter::CopyFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PermuteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermuteParameter::IsInitialized() const {

  return true;
}

void PermuteParameter::Swap(PermuteParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermuteParameter::InternalSwap(PermuteParameter* other) {
  order_.UnsafeArenaSwap(&other->order_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PermuteParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PermuteParameter_descriptor_;
  metadata.reflection = PermuteParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermuteParameter

// repeated uint32 order = 1;
int PermuteParameter::order_size() const {
  return order_.size();
}
void PermuteParameter::clear_order() {
  order_.Clear();
}
 ::google::protobuf::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PermuteParameter.order)
  return order_.Get(index);
}
 void PermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PermuteParameter.order)
}
 void PermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PermuteParameter.order)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:caffe.PermuteParameter.order)
  return order_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PermuteParameter.order)
  return &order_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NCAParameter::kMinNegativeOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NCAParameter::NCAParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NCAParameter)
}

void NCAParameter::InitAsDefaultInstance() {
}

NCAParameter::NCAParameter(const NCAParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NCAParameter)
}

void NCAParameter::SharedCtor() {
  _cached_size_ = 0;
  min_negative_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NCAParameter::~NCAParameter() {
  // @@protoc_insertion_point(destructor:caffe.NCAParameter)
  SharedDtor();
}

void NCAParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NCAParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NCAParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NCAParameter_descriptor_;
}

const NCAParameter& NCAParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NCAParameter* NCAParameter::default_instance_ = NULL;

NCAParameter* NCAParameter::New(::google::protobuf::Arena* arena) const {
  NCAParameter* n = new NCAParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NCAParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NCAParameter)
  min_negative_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NCAParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NCAParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool min_negative_only = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &min_negative_only_)));
          set_has_min_negative_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NCAParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NCAParameter)
  return false;
#undef DO_
}

void NCAParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NCAParameter)
  // optional bool min_negative_only = 1 [default = false];
  if (has_min_negative_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->min_negative_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NCAParameter)
}

::google::protobuf::uint8* NCAParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NCAParameter)
  // optional bool min_negative_only = 1 [default = false];
  if (has_min_negative_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->min_negative_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NCAParameter)
  return target;
}

int NCAParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NCAParameter)
  int total_size = 0;

  // optional bool min_negative_only = 1 [default = false];
  if (has_min_negative_only()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NCAParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NCAParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NCAParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NCAParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NCAParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NCAParameter)
    MergeFrom(*source);
  }
}

void NCAParameter::MergeFrom(const NCAParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NCAParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_negative_only()) {
      set_min_negative_only(from.min_negative_only());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NCAParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NCAParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NCAParameter::CopyFrom(const NCAParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NCAParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NCAParameter::IsInitialized() const {

  return true;
}

void NCAParameter::Swap(NCAParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NCAParameter::InternalSwap(NCAParameter* other) {
  std::swap(min_negative_only_, other->min_negative_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NCAParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NCAParameter_descriptor_;
  metadata.reflection = NCAParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NCAParameter

// optional bool min_negative_only = 1 [default = false];
bool NCAParameter::has_min_negative_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NCAParameter::set_has_min_negative_only() {
  _has_bits_[0] |= 0x00000001u;
}
void NCAParameter::clear_has_min_negative_only() {
  _has_bits_[0] &= ~0x00000001u;
}
void NCAParameter::clear_min_negative_only() {
  min_negative_only_ = false;
  clear_has_min_negative_only();
}
 bool NCAParameter::min_negative_only() const {
  // @@protoc_insertion_point(field_get:caffe.NCAParameter.min_negative_only)
  return min_negative_only_;
}
 void NCAParameter::set_min_negative_only(bool value) {
  set_has_min_negative_only();
  min_negative_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.NCAParameter.min_negative_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LargeMarginInnerProductParameter_LargeMarginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LargeMarginInnerProductParameter_LargeMarginType_descriptor_;
}
bool LargeMarginInnerProductParameter_LargeMarginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::SINGLE;
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::DOUBLE;
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::TRIPLE;
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::QUADRUPLE;
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::LargeMarginType_MIN;
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::LargeMarginType_MAX;
const int LargeMarginInnerProductParameter::LargeMarginType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LargeMarginInnerProductParameter::kNumOutputFieldNumber;
const int LargeMarginInnerProductParameter::kTypeFieldNumber;
const int LargeMarginInnerProductParameter::kWeightFillerFieldNumber;
const int LargeMarginInnerProductParameter::kAxisFieldNumber;
const int LargeMarginInnerProductParameter::kBaseFieldNumber;
const int LargeMarginInnerProductParameter::kGammaFieldNumber;
const int LargeMarginInnerProductParameter::kPowerFieldNumber;
const int LargeMarginInnerProductParameter::kIterationFieldNumber;
const int LargeMarginInnerProductParameter::kLambdaMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LargeMarginInnerProductParameter::LargeMarginInnerProductParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LargeMarginInnerProductParameter)
}

void LargeMarginInnerProductParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

LargeMarginInnerProductParameter::LargeMarginInnerProductParameter(const LargeMarginInnerProductParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LargeMarginInnerProductParameter)
}

void LargeMarginInnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  type_ = 0;
  weight_filler_ = NULL;
  axis_ = 1;
  base_ = 1;
  gamma_ = 0;
  power_ = 1;
  iteration_ = 0;
  lambda_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LargeMarginInnerProductParameter::~LargeMarginInnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.LargeMarginInnerProductParameter)
  SharedDtor();
}

void LargeMarginInnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void LargeMarginInnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LargeMarginInnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LargeMarginInnerProductParameter_descriptor_;
}

const LargeMarginInnerProductParameter& LargeMarginInnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LargeMarginInnerProductParameter* LargeMarginInnerProductParameter::default_instance_ = NULL;

LargeMarginInnerProductParameter* LargeMarginInnerProductParameter::New(::google::protobuf::Arena* arena) const {
  LargeMarginInnerProductParameter* n = new LargeMarginInnerProductParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LargeMarginInnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LargeMarginInnerProductParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LargeMarginInnerProductParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LargeMarginInnerProductParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_output_, type_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    base_ = 1;
    gamma_ = 0;
    power_ = 1;
    iteration_ = 0;
  }
  lambda_min_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LargeMarginInnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LargeMarginInnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .caffe.LargeMarginInnerProductParameter.LargeMarginType type = 2 [default = SINGLE];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LargeMarginInnerProductParameter_LargeMarginType_IsValid(value)) {
            set_type(static_cast< ::caffe::LargeMarginInnerProductParameter_LargeMarginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_axis;
        break;
      }

      // optional int32 axis = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_base;
        break;
      }

      // optional float base = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_gamma;
        break;
      }

      // optional float gamma = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_power;
        break;
      }

      // optional float power = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iteration;
        break;
      }

      // optional int32 iteration = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_lambda_min;
        break;
      }

      // optional float lambda_min = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_lambda_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lambda_min_)));
          set_has_lambda_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LargeMarginInnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LargeMarginInnerProductParameter)
  return false;
#undef DO_
}

void LargeMarginInnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LargeMarginInnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional .caffe.LargeMarginInnerProductParameter.LargeMarginType type = 2 [default = SINGLE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional int32 axis = 4 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->axis(), output);
  }

  // optional float base = 5 [default = 1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base(), output);
  }

  // optional float gamma = 6 [default = 0];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gamma(), output);
  }

  // optional float power = 7 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->power(), output);
  }

  // optional int32 iteration = 8 [default = 0];
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iteration(), output);
  }

  // optional float lambda_min = 9 [default = 0];
  if (has_lambda_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lambda_min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LargeMarginInnerProductParameter)
}

::google::protobuf::uint8* LargeMarginInnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LargeMarginInnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional .caffe.LargeMarginInnerProductParameter.LargeMarginType type = 2 [default = SINGLE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->weight_filler_, target);
  }

  // optional int32 axis = 4 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->axis(), target);
  }

  // optional float base = 5 [default = 1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base(), target);
  }

  // optional float gamma = 6 [default = 0];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gamma(), target);
  }

  // optional float power = 7 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->power(), target);
  }

  // optional int32 iteration = 8 [default = 0];
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->iteration(), target);
  }

  // optional float lambda_min = 9 [default = 0];
  if (has_lambda_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lambda_min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LargeMarginInnerProductParameter)
  return target;
}

int LargeMarginInnerProductParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LargeMarginInnerProductParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.LargeMarginInnerProductParameter.LargeMarginType type = 2 [default = SINGLE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional int32 axis = 4 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float base = 5 [default = 1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 6 [default = 0];
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power = 7 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional int32 iteration = 8 [default = 0];
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iteration());
    }

  }
  // optional float lambda_min = 9 [default = 0];
  if (has_lambda_min()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LargeMarginInnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LargeMarginInnerProductParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LargeMarginInnerProductParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LargeMarginInnerProductParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LargeMarginInnerProductParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LargeMarginInnerProductParameter)
    MergeFrom(*source);
  }
}

void LargeMarginInnerProductParameter::MergeFrom(const LargeMarginInnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LargeMarginInnerProductParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lambda_min()) {
      set_lambda_min(from.lambda_min());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LargeMarginInnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LargeMarginInnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeMarginInnerProductParameter::CopyFrom(const LargeMarginInnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LargeMarginInnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeMarginInnerProductParameter::IsInitialized() const {

  return true;
}

void LargeMarginInnerProductParameter::Swap(LargeMarginInnerProductParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LargeMarginInnerProductParameter::InternalSwap(LargeMarginInnerProductParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(type_, other->type_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(axis_, other->axis_);
  std::swap(base_, other->base_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(iteration_, other->iteration_);
  std::swap(lambda_min_, other->lambda_min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LargeMarginInnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LargeMarginInnerProductParameter_descriptor_;
  metadata.reflection = LargeMarginInnerProductParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LargeMarginInnerProductParameter

// optional uint32 num_output = 1;
bool LargeMarginInnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LargeMarginInnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void LargeMarginInnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void LargeMarginInnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 LargeMarginInnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.num_output)
  return num_output_;
}
 void LargeMarginInnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.num_output)
}

// optional .caffe.LargeMarginInnerProductParameter.LargeMarginType type = 2 [default = SINGLE];
bool LargeMarginInnerProductParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LargeMarginInnerProductParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LargeMarginInnerProductParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LargeMarginInnerProductParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::caffe::LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.type)
  return static_cast< ::caffe::LargeMarginInnerProductParameter_LargeMarginType >(type_);
}
 void LargeMarginInnerProductParameter::set_type(::caffe::LargeMarginInnerProductParameter_LargeMarginType value) {
  assert(::caffe::LargeMarginInnerProductParameter_LargeMarginType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.type)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool LargeMarginInnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LargeMarginInnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void LargeMarginInnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void LargeMarginInnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& LargeMarginInnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* LargeMarginInnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LargeMarginInnerProductParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* LargeMarginInnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.LargeMarginInnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void LargeMarginInnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LargeMarginInnerProductParameter.weight_filler)
}

// optional int32 axis = 4 [default = 1];
bool LargeMarginInnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LargeMarginInnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
void LargeMarginInnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
void LargeMarginInnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 LargeMarginInnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.axis)
  return axis_;
}
 void LargeMarginInnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.axis)
}

// optional float base = 5 [default = 1];
bool LargeMarginInnerProductParameter::has_base() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LargeMarginInnerProductParameter::set_has_base() {
  _has_bits_[0] |= 0x00000010u;
}
void LargeMarginInnerProductParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000010u;
}
void LargeMarginInnerProductParameter::clear_base() {
  base_ = 1;
  clear_has_base();
}
 float LargeMarginInnerProductParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.base)
  return base_;
}
 void LargeMarginInnerProductParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.base)
}

// optional float gamma = 6 [default = 0];
bool LargeMarginInnerProductParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LargeMarginInnerProductParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000020u;
}
void LargeMarginInnerProductParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000020u;
}
void LargeMarginInnerProductParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 float LargeMarginInnerProductParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.gamma)
  return gamma_;
}
 void LargeMarginInnerProductParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.gamma)
}

// optional float power = 7 [default = 1];
bool LargeMarginInnerProductParameter::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LargeMarginInnerProductParameter::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
void LargeMarginInnerProductParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
void LargeMarginInnerProductParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
 float LargeMarginInnerProductParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.power)
  return power_;
}
 void LargeMarginInnerProductParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.power)
}

// optional int32 iteration = 8 [default = 0];
bool LargeMarginInnerProductParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LargeMarginInnerProductParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000080u;
}
void LargeMarginInnerProductParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000080u;
}
void LargeMarginInnerProductParameter::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
 ::google::protobuf::int32 LargeMarginInnerProductParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.iteration)
  return iteration_;
}
 void LargeMarginInnerProductParameter::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.iteration)
}

// optional float lambda_min = 9 [default = 0];
bool LargeMarginInnerProductParameter::has_lambda_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LargeMarginInnerProductParameter::set_has_lambda_min() {
  _has_bits_[0] |= 0x00000100u;
}
void LargeMarginInnerProductParameter::clear_has_lambda_min() {
  _has_bits_[0] &= ~0x00000100u;
}
void LargeMarginInnerProductParameter::clear_lambda_min() {
  lambda_min_ = 0;
  clear_has_lambda_min();
}
 float LargeMarginInnerProductParameter::lambda_min() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.lambda_min)
  return lambda_min_;
}
 void LargeMarginInnerProductParameter::set_lambda_min(float value) {
  set_has_lambda_min();
  lambda_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.lambda_min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSpecificRescaleParameter::kPositiveWeightFieldNumber;
const int LabelSpecificRescaleParameter::kNegativeWeightFieldNumber;
const int LabelSpecificRescaleParameter::kPositiveLowerBoundFieldNumber;
const int LabelSpecificRescaleParameter::kNegativeUpperBoundFieldNumber;
const int LabelSpecificRescaleParameter::kRescaleTestFieldNumber;
const int LabelSpecificRescaleParameter::kForIpFieldNumber;
const int LabelSpecificRescaleParameter::kPositiveWeightBaseFieldNumber;
const int LabelSpecificRescaleParameter::kGammaFieldNumber;
const int LabelSpecificRescaleParameter::kPowerFieldNumber;
const int LabelSpecificRescaleParameter::kPositiveWeightMinFieldNumber;
const int LabelSpecificRescaleParameter::kPositiveWeightMaxFieldNumber;
const int LabelSpecificRescaleParameter::kIterationFieldNumber;
const int LabelSpecificRescaleParameter::kBiasFixFieldNumber;
const int LabelSpecificRescaleParameter::kPowerOnPositiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSpecificRescaleParameter::LabelSpecificRescaleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelSpecificRescaleParameter)
}

void LabelSpecificRescaleParameter::InitAsDefaultInstance() {
}

LabelSpecificRescaleParameter::LabelSpecificRescaleParameter(const LabelSpecificRescaleParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelSpecificRescaleParameter)
}

void LabelSpecificRescaleParameter::SharedCtor() {
  _cached_size_ = 0;
  positive_weight_ = 1;
  negative_weight_ = 1;
  positive_lower_bound_ = 0;
  negative_upper_bound_ = 0;
  rescale_test_ = false;
  for_ip_ = false;
  positive_weight_base_ = 0;
  gamma_ = 0;
  power_ = 1;
  positive_weight_min_ = 0;
  positive_weight_max_ = 0;
  iteration_ = 0u;
  bias_fix_ = false;
  power_on_positive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSpecificRescaleParameter::~LabelSpecificRescaleParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelSpecificRescaleParameter)
  SharedDtor();
}

void LabelSpecificRescaleParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelSpecificRescaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSpecificRescaleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSpecificRescaleParameter_descriptor_;
}

const LabelSpecificRescaleParameter& LabelSpecificRescaleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LabelSpecificRescaleParameter* LabelSpecificRescaleParameter::default_instance_ = NULL;

LabelSpecificRescaleParameter* LabelSpecificRescaleParameter::New(::google::protobuf::Arena* arena) const {
  LabelSpecificRescaleParameter* n = new LabelSpecificRescaleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelSpecificRescaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelSpecificRescaleParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LabelSpecificRescaleParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LabelSpecificRescaleParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(positive_lower_bound_, gamma_);
    ZR_(rescale_test_, for_ip_);
    positive_weight_ = 1;
    negative_weight_ = 1;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(bias_fix_, iteration_);
    power_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelSpecificRescaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelSpecificRescaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float positive_weight = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_)));
          set_has_positive_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_negative_weight;
        break;
      }

      // optional float negative_weight = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_negative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_weight_)));
          set_has_negative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positive_lower_bound;
        break;
      }

      // optional float positive_lower_bound = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_positive_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_lower_bound_)));
          set_has_positive_lower_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_negative_upper_bound;
        break;
      }

      // optional float negative_upper_bound = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_negative_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_upper_bound_)));
          set_has_negative_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rescale_test;
        break;
      }

      // optional bool rescale_test = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_rescale_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rescale_test_)));
          set_has_rescale_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_for_ip;
        break;
      }

      // optional bool for_ip = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_for_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_ip_)));
          set_has_for_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_positive_weight_base;
        break;
      }

      // optional float positive_weight_base = 7 [default = 0];
      case 7: {
        if (tag == 61) {
         parse_positive_weight_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_base_)));
          set_has_positive_weight_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_gamma;
        break;
      }

      // optional float gamma = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_power;
        break;
      }

      // optional float power = 9 [default = 1];
      case 9: {
        if (tag == 77) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_positive_weight_min;
        break;
      }

      // optional float positive_weight_min = 10 [default = 0];
      case 10: {
        if (tag == 85) {
         parse_positive_weight_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_min_)));
          set_has_positive_weight_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_positive_weight_max;
        break;
      }

      // optional float positive_weight_max = 11 [default = 0];
      case 11: {
        if (tag == 93) {
         parse_positive_weight_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_max_)));
          set_has_positive_weight_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_iteration;
        break;
      }

      // optional uint32 iteration = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_bias_fix;
        break;
      }

      // optional bool bias_fix = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_bias_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_fix_)));
          set_has_bias_fix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_power_on_positive;
        break;
      }

      // optional bool power_on_positive = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_power_on_positive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &power_on_positive_)));
          set_has_power_on_positive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelSpecificRescaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelSpecificRescaleParameter)
  return false;
#undef DO_
}

void LabelSpecificRescaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelSpecificRescaleParameter)
  // optional float positive_weight = 1 [default = 1];
  if (has_positive_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->positive_weight(), output);
  }

  // optional float negative_weight = 2 [default = 1];
  if (has_negative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->negative_weight(), output);
  }

  // optional float positive_lower_bound = 3 [default = 0];
  if (has_positive_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positive_lower_bound(), output);
  }

  // optional float negative_upper_bound = 4 [default = 0];
  if (has_negative_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->negative_upper_bound(), output);
  }

  // optional bool rescale_test = 5 [default = false];
  if (has_rescale_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rescale_test(), output);
  }

  // optional bool for_ip = 6 [default = false];
  if (has_for_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->for_ip(), output);
  }

  // optional float positive_weight_base = 7 [default = 0];
  if (has_positive_weight_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->positive_weight_base(), output);
  }

  // optional float gamma = 8 [default = 0];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->gamma(), output);
  }

  // optional float power = 9 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->power(), output);
  }

  // optional float positive_weight_min = 10 [default = 0];
  if (has_positive_weight_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->positive_weight_min(), output);
  }

  // optional float positive_weight_max = 11 [default = 0];
  if (has_positive_weight_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->positive_weight_max(), output);
  }

  // optional uint32 iteration = 12 [default = 0];
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->iteration(), output);
  }

  // optional bool bias_fix = 13 [default = false];
  if (has_bias_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->bias_fix(), output);
  }

  // optional bool power_on_positive = 14 [default = false];
  if (has_power_on_positive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->power_on_positive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelSpecificRescaleParameter)
}

::google::protobuf::uint8* LabelSpecificRescaleParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelSpecificRescaleParameter)
  // optional float positive_weight = 1 [default = 1];
  if (has_positive_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->positive_weight(), target);
  }

  // optional float negative_weight = 2 [default = 1];
  if (has_negative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->negative_weight(), target);
  }

  // optional float positive_lower_bound = 3 [default = 0];
  if (has_positive_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positive_lower_bound(), target);
  }

  // optional float negative_upper_bound = 4 [default = 0];
  if (has_negative_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->negative_upper_bound(), target);
  }

  // optional bool rescale_test = 5 [default = false];
  if (has_rescale_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rescale_test(), target);
  }

  // optional bool for_ip = 6 [default = false];
  if (has_for_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->for_ip(), target);
  }

  // optional float positive_weight_base = 7 [default = 0];
  if (has_positive_weight_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->positive_weight_base(), target);
  }

  // optional float gamma = 8 [default = 0];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->gamma(), target);
  }

  // optional float power = 9 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->power(), target);
  }

  // optional float positive_weight_min = 10 [default = 0];
  if (has_positive_weight_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->positive_weight_min(), target);
  }

  // optional float positive_weight_max = 11 [default = 0];
  if (has_positive_weight_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->positive_weight_max(), target);
  }

  // optional uint32 iteration = 12 [default = 0];
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->iteration(), target);
  }

  // optional bool bias_fix = 13 [default = false];
  if (has_bias_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->bias_fix(), target);
  }

  // optional bool power_on_positive = 14 [default = false];
  if (has_power_on_positive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->power_on_positive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelSpecificRescaleParameter)
  return target;
}

int LabelSpecificRescaleParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelSpecificRescaleParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float positive_weight = 1 [default = 1];
    if (has_positive_weight()) {
      total_size += 1 + 4;
    }

    // optional float negative_weight = 2 [default = 1];
    if (has_negative_weight()) {
      total_size += 1 + 4;
    }

    // optional float positive_lower_bound = 3 [default = 0];
    if (has_positive_lower_bound()) {
      total_size += 1 + 4;
    }

    // optional float negative_upper_bound = 4 [default = 0];
    if (has_negative_upper_bound()) {
      total_size += 1 + 4;
    }

    // optional bool rescale_test = 5 [default = false];
    if (has_rescale_test()) {
      total_size += 1 + 1;
    }

    // optional bool for_ip = 6 [default = false];
    if (has_for_ip()) {
      total_size += 1 + 1;
    }

    // optional float positive_weight_base = 7 [default = 0];
    if (has_positive_weight_base()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 8 [default = 0];
    if (has_gamma()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float power = 9 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float positive_weight_min = 10 [default = 0];
    if (has_positive_weight_min()) {
      total_size += 1 + 4;
    }

    // optional float positive_weight_max = 11 [default = 0];
    if (has_positive_weight_max()) {
      total_size += 1 + 4;
    }

    // optional uint32 iteration = 12 [default = 0];
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iteration());
    }

    // optional bool bias_fix = 13 [default = false];
    if (has_bias_fix()) {
      total_size += 1 + 1;
    }

    // optional bool power_on_positive = 14 [default = false];
    if (has_power_on_positive()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSpecificRescaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelSpecificRescaleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelSpecificRescaleParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSpecificRescaleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelSpecificRescaleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelSpecificRescaleParameter)
    MergeFrom(*source);
  }
}

void LabelSpecificRescaleParameter::MergeFrom(const LabelSpecificRescaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelSpecificRescaleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positive_weight()) {
      set_positive_weight(from.positive_weight());
    }
    if (from.has_negative_weight()) {
      set_negative_weight(from.negative_weight());
    }
    if (from.has_positive_lower_bound()) {
      set_positive_lower_bound(from.positive_lower_bound());
    }
    if (from.has_negative_upper_bound()) {
      set_negative_upper_bound(from.negative_upper_bound());
    }
    if (from.has_rescale_test()) {
      set_rescale_test(from.rescale_test());
    }
    if (from.has_for_ip()) {
      set_for_ip(from.for_ip());
    }
    if (from.has_positive_weight_base()) {
      set_positive_weight_base(from.positive_weight_base());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_positive_weight_min()) {
      set_positive_weight_min(from.positive_weight_min());
    }
    if (from.has_positive_weight_max()) {
      set_positive_weight_max(from.positive_weight_max());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
    if (from.has_bias_fix()) {
      set_bias_fix(from.bias_fix());
    }
    if (from.has_power_on_positive()) {
      set_power_on_positive(from.power_on_positive());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LabelSpecificRescaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelSpecificRescaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSpecificRescaleParameter::CopyFrom(const LabelSpecificRescaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelSpecificRescaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSpecificRescaleParameter::IsInitialized() const {

  return true;
}

void LabelSpecificRescaleParameter::Swap(LabelSpecificRescaleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSpecificRescaleParameter::InternalSwap(LabelSpecificRescaleParameter* other) {
  std::swap(positive_weight_, other->positive_weight_);
  std::swap(negative_weight_, other->negative_weight_);
  std::swap(positive_lower_bound_, other->positive_lower_bound_);
  std::swap(negative_upper_bound_, other->negative_upper_bound_);
  std::swap(rescale_test_, other->rescale_test_);
  std::swap(for_ip_, other->for_ip_);
  std::swap(positive_weight_base_, other->positive_weight_base_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(positive_weight_min_, other->positive_weight_min_);
  std::swap(positive_weight_max_, other->positive_weight_max_);
  std::swap(iteration_, other->iteration_);
  std::swap(bias_fix_, other->bias_fix_);
  std::swap(power_on_positive_, other->power_on_positive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelSpecificRescaleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSpecificRescaleParameter_descriptor_;
  metadata.reflection = LabelSpecificRescaleParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelSpecificRescaleParameter

// optional float positive_weight = 1 [default = 1];
bool LabelSpecificRescaleParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelSpecificRescaleParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelSpecificRescaleParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelSpecificRescaleParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
 float LabelSpecificRescaleParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight)
  return positive_weight_;
}
 void LabelSpecificRescaleParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight)
}

// optional float negative_weight = 2 [default = 1];
bool LabelSpecificRescaleParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelSpecificRescaleParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelSpecificRescaleParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelSpecificRescaleParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
 float LabelSpecificRescaleParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.negative_weight)
  return negative_weight_;
}
 void LabelSpecificRescaleParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.negative_weight)
}

// optional float positive_lower_bound = 3 [default = 0];
bool LabelSpecificRescaleParameter::has_positive_lower_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelSpecificRescaleParameter::set_has_positive_lower_bound() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelSpecificRescaleParameter::clear_has_positive_lower_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelSpecificRescaleParameter::clear_positive_lower_bound() {
  positive_lower_bound_ = 0;
  clear_has_positive_lower_bound();
}
 float LabelSpecificRescaleParameter::positive_lower_bound() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_lower_bound)
  return positive_lower_bound_;
}
 void LabelSpecificRescaleParameter::set_positive_lower_bound(float value) {
  set_has_positive_lower_bound();
  positive_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_lower_bound)
}

// optional float negative_upper_bound = 4 [default = 0];
bool LabelSpecificRescaleParameter::has_negative_upper_bound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LabelSpecificRescaleParameter::set_has_negative_upper_bound() {
  _has_bits_[0] |= 0x00000008u;
}
void LabelSpecificRescaleParameter::clear_has_negative_upper_bound() {
  _has_bits_[0] &= ~0x00000008u;
}
void LabelSpecificRescaleParameter::clear_negative_upper_bound() {
  negative_upper_bound_ = 0;
  clear_has_negative_upper_bound();
}
 float LabelSpecificRescaleParameter::negative_upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.negative_upper_bound)
  return negative_upper_bound_;
}
 void LabelSpecificRescaleParameter::set_negative_upper_bound(float value) {
  set_has_negative_upper_bound();
  negative_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.negative_upper_bound)
}

// optional bool rescale_test = 5 [default = false];
bool LabelSpecificRescaleParameter::has_rescale_test() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LabelSpecificRescaleParameter::set_has_rescale_test() {
  _has_bits_[0] |= 0x00000010u;
}
void LabelSpecificRescaleParameter::clear_has_rescale_test() {
  _has_bits_[0] &= ~0x00000010u;
}
void LabelSpecificRescaleParameter::clear_rescale_test() {
  rescale_test_ = false;
  clear_has_rescale_test();
}
 bool LabelSpecificRescaleParameter::rescale_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.rescale_test)
  return rescale_test_;
}
 void LabelSpecificRescaleParameter::set_rescale_test(bool value) {
  set_has_rescale_test();
  rescale_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.rescale_test)
}

// optional bool for_ip = 6 [default = false];
bool LabelSpecificRescaleParameter::has_for_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LabelSpecificRescaleParameter::set_has_for_ip() {
  _has_bits_[0] |= 0x00000020u;
}
void LabelSpecificRescaleParameter::clear_has_for_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
void LabelSpecificRescaleParameter::clear_for_ip() {
  for_ip_ = false;
  clear_has_for_ip();
}
 bool LabelSpecificRescaleParameter::for_ip() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.for_ip)
  return for_ip_;
}
 void LabelSpecificRescaleParameter::set_for_ip(bool value) {
  set_has_for_ip();
  for_ip_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.for_ip)
}

// optional float positive_weight_base = 7 [default = 0];
bool LabelSpecificRescaleParameter::has_positive_weight_base() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LabelSpecificRescaleParameter::set_has_positive_weight_base() {
  _has_bits_[0] |= 0x00000040u;
}
void LabelSpecificRescaleParameter::clear_has_positive_weight_base() {
  _has_bits_[0] &= ~0x00000040u;
}
void LabelSpecificRescaleParameter::clear_positive_weight_base() {
  positive_weight_base_ = 0;
  clear_has_positive_weight_base();
}
 float LabelSpecificRescaleParameter::positive_weight_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight_base)
  return positive_weight_base_;
}
 void LabelSpecificRescaleParameter::set_positive_weight_base(float value) {
  set_has_positive_weight_base();
  positive_weight_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight_base)
}

// optional float gamma = 8 [default = 0];
bool LabelSpecificRescaleParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LabelSpecificRescaleParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000080u;
}
void LabelSpecificRescaleParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000080u;
}
void LabelSpecificRescaleParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 float LabelSpecificRescaleParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.gamma)
  return gamma_;
}
 void LabelSpecificRescaleParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.gamma)
}

// optional float power = 9 [default = 1];
bool LabelSpecificRescaleParameter::has_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LabelSpecificRescaleParameter::set_has_power() {
  _has_bits_[0] |= 0x00000100u;
}
void LabelSpecificRescaleParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000100u;
}
void LabelSpecificRescaleParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
 float LabelSpecificRescaleParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.power)
  return power_;
}
 void LabelSpecificRescaleParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.power)
}

// optional float positive_weight_min = 10 [default = 0];
bool LabelSpecificRescaleParameter::has_positive_weight_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LabelSpecificRescaleParameter::set_has_positive_weight_min() {
  _has_bits_[0] |= 0x00000200u;
}
void LabelSpecificRescaleParameter::clear_has_positive_weight_min() {
  _has_bits_[0] &= ~0x00000200u;
}
void LabelSpecificRescaleParameter::clear_positive_weight_min() {
  positive_weight_min_ = 0;
  clear_has_positive_weight_min();
}
 float LabelSpecificRescaleParameter::positive_weight_min() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight_min)
  return positive_weight_min_;
}
 void LabelSpecificRescaleParameter::set_positive_weight_min(float value) {
  set_has_positive_weight_min();
  positive_weight_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight_min)
}

// optional float positive_weight_max = 11 [default = 0];
bool LabelSpecificRescaleParameter::has_positive_weight_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LabelSpecificRescaleParameter::set_has_positive_weight_max() {
  _has_bits_[0] |= 0x00000400u;
}
void LabelSpecificRescaleParameter::clear_has_positive_weight_max() {
  _has_bits_[0] &= ~0x00000400u;
}
void LabelSpecificRescaleParameter::clear_positive_weight_max() {
  positive_weight_max_ = 0;
  clear_has_positive_weight_max();
}
 float LabelSpecificRescaleParameter::positive_weight_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight_max)
  return positive_weight_max_;
}
 void LabelSpecificRescaleParameter::set_positive_weight_max(float value) {
  set_has_positive_weight_max();
  positive_weight_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight_max)
}

// optional uint32 iteration = 12 [default = 0];
bool LabelSpecificRescaleParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LabelSpecificRescaleParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000800u;
}
void LabelSpecificRescaleParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000800u;
}
void LabelSpecificRescaleParameter::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
 ::google::protobuf::uint32 LabelSpecificRescaleParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.iteration)
  return iteration_;
}
 void LabelSpecificRescaleParameter::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.iteration)
}

// optional bool bias_fix = 13 [default = false];
bool LabelSpecificRescaleParameter::has_bias_fix() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LabelSpecificRescaleParameter::set_has_bias_fix() {
  _has_bits_[0] |= 0x00001000u;
}
void LabelSpecificRescaleParameter::clear_has_bias_fix() {
  _has_bits_[0] &= ~0x00001000u;
}
void LabelSpecificRescaleParameter::clear_bias_fix() {
  bias_fix_ = false;
  clear_has_bias_fix();
}
 bool LabelSpecificRescaleParameter::bias_fix() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.bias_fix)
  return bias_fix_;
}
 void LabelSpecificRescaleParameter::set_bias_fix(bool value) {
  set_has_bias_fix();
  bias_fix_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.bias_fix)
}

// optional bool power_on_positive = 14 [default = false];
bool LabelSpecificRescaleParameter::has_power_on_positive() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LabelSpecificRescaleParameter::set_has_power_on_positive() {
  _has_bits_[0] |= 0x00002000u;
}
void LabelSpecificRescaleParameter::clear_has_power_on_positive() {
  _has_bits_[0] &= ~0x00002000u;
}
void LabelSpecificRescaleParameter::clear_power_on_positive() {
  power_on_positive_ = false;
  clear_has_power_on_positive();
}
 bool LabelSpecificRescaleParameter::power_on_positive() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.power_on_positive)
  return power_on_positive_;
}
 void LabelSpecificRescaleParameter::set_power_on_positive(bool value) {
  set_has_power_on_positive();
  power_on_positive_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.power_on_positive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfimumLossParamter::kInfimumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfimumLossParamter::InfimumLossParamter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InfimumLossParamter)
}

void InfimumLossParamter::InitAsDefaultInstance() {
}

InfimumLossParamter::InfimumLossParamter(const InfimumLossParamter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InfimumLossParamter)
}

void InfimumLossParamter::SharedCtor() {
  _cached_size_ = 0;
  infimum_ = 0.25f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfimumLossParamter::~InfimumLossParamter() {
  // @@protoc_insertion_point(destructor:caffe.InfimumLossParamter)
  SharedDtor();
}

void InfimumLossParamter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InfimumLossParamter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfimumLossParamter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfimumLossParamter_descriptor_;
}

const InfimumLossParamter& InfimumLossParamter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InfimumLossParamter* InfimumLossParamter::default_instance_ = NULL;

InfimumLossParamter* InfimumLossParamter::New(::google::protobuf::Arena* arena) const {
  InfimumLossParamter* n = new InfimumLossParamter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfimumLossParamter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InfimumLossParamter)
  infimum_ = 0.25f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InfimumLossParamter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InfimumLossParamter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float infimum = 1 [default = 0.25];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &infimum_)));
          set_has_infimum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InfimumLossParamter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InfimumLossParamter)
  return false;
#undef DO_
}

void InfimumLossParamter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InfimumLossParamter)
  // optional float infimum = 1 [default = 0.25];
  if (has_infimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->infimum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InfimumLossParamter)
}

::google::protobuf::uint8* InfimumLossParamter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InfimumLossParamter)
  // optional float infimum = 1 [default = 0.25];
  if (has_infimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->infimum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InfimumLossParamter)
  return target;
}

int InfimumLossParamter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InfimumLossParamter)
  int total_size = 0;

  // optional float infimum = 1 [default = 0.25];
  if (has_infimum()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfimumLossParamter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InfimumLossParamter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InfimumLossParamter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InfimumLossParamter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InfimumLossParamter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InfimumLossParamter)
    MergeFrom(*source);
  }
}

void InfimumLossParamter::MergeFrom(const InfimumLossParamter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InfimumLossParamter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infimum()) {
      set_infimum(from.infimum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InfimumLossParamter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InfimumLossParamter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfimumLossParamter::CopyFrom(const InfimumLossParamter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InfimumLossParamter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfimumLossParamter::IsInitialized() const {

  return true;
}

void InfimumLossParamter::Swap(InfimumLossParamter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfimumLossParamter::InternalSwap(InfimumLossParamter* other) {
  std::swap(infimum_, other->infimum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfimumLossParamter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfimumLossParamter_descriptor_;
  metadata.reflection = InfimumLossParamter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfimumLossParamter

// optional float infimum = 1 [default = 0.25];
bool InfimumLossParamter::has_infimum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfimumLossParamter::set_has_infimum() {
  _has_bits_[0] |= 0x00000001u;
}
void InfimumLossParamter::clear_has_infimum() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfimumLossParamter::clear_infimum() {
  infimum_ = 0.25f;
  clear_has_infimum();
}
 float InfimumLossParamter::infimum() const {
  // @@protoc_insertion_point(field_get:caffe.InfimumLossParamter.infimum)
  return infimum_;
}
 void InfimumLossParamter::set_infimum(float value) {
  set_has_infimum();
  infimum_ = value;
  // @@protoc_insertion_point(field_set:caffe.InfimumLossParamter.infimum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdinalRegressionParameter::kKFieldNumber;
const int OrdinalRegressionParameter::kWeightFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdinalRegressionParameter::OrdinalRegressionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OrdinalRegressionParameter)
}

void OrdinalRegressionParameter::InitAsDefaultInstance() {
}

OrdinalRegressionParameter::OrdinalRegressionParameter(const OrdinalRegressionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OrdinalRegressionParameter)
}

void OrdinalRegressionParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 0u;
  weight_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdinalRegressionParameter::~OrdinalRegressionParameter() {
  // @@protoc_insertion_point(destructor:caffe.OrdinalRegressionParameter)
  SharedDtor();
}

void OrdinalRegressionParameter::SharedDtor() {
  weight_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OrdinalRegressionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrdinalRegressionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdinalRegressionParameter_descriptor_;
}

const OrdinalRegressionParameter& OrdinalRegressionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OrdinalRegressionParameter* OrdinalRegressionParameter::default_instance_ = NULL;

OrdinalRegressionParameter* OrdinalRegressionParameter::New(::google::protobuf::Arena* arena) const {
  OrdinalRegressionParameter* n = new OrdinalRegressionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrdinalRegressionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.OrdinalRegressionParameter)
  if (_has_bits_[0 / 32] & 3u) {
    k_ = 0u;
    if (has_weight_file()) {
      weight_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrdinalRegressionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OrdinalRegressionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 k = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_weight_file;
        break;
      }

      // optional string weight_file = 2;
      case 2: {
        if (tag == 18) {
         parse_weight_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight_file().data(), this->weight_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.OrdinalRegressionParameter.weight_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OrdinalRegressionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OrdinalRegressionParameter)
  return false;
#undef DO_
}

void OrdinalRegressionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OrdinalRegressionParameter)
  // optional uint32 k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->k(), output);
  }

  // optional string weight_file = 2;
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.OrdinalRegressionParameter.weight_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->weight_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OrdinalRegressionParameter)
}

::google::protobuf::uint8* OrdinalRegressionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OrdinalRegressionParameter)
  // optional uint32 k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->k(), target);
  }

  // optional string weight_file = 2;
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.OrdinalRegressionParameter.weight_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->weight_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OrdinalRegressionParameter)
  return target;
}

int OrdinalRegressionParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.OrdinalRegressionParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->k());
    }

    // optional string weight_file = 2;
    if (has_weight_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight_file());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdinalRegressionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.OrdinalRegressionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OrdinalRegressionParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrdinalRegressionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.OrdinalRegressionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.OrdinalRegressionParameter)
    MergeFrom(*source);
  }
}

void OrdinalRegressionParameter::MergeFrom(const OrdinalRegressionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.OrdinalRegressionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_weight_file()) {
      set_has_weight_file();
      weight_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_file_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrdinalRegressionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.OrdinalRegressionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdinalRegressionParameter::CopyFrom(const OrdinalRegressionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.OrdinalRegressionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdinalRegressionParameter::IsInitialized() const {

  return true;
}

void OrdinalRegressionParameter::Swap(OrdinalRegressionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdinalRegressionParameter::InternalSwap(OrdinalRegressionParameter* other) {
  std::swap(k_, other->k_);
  weight_file_.Swap(&other->weight_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrdinalRegressionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrdinalRegressionParameter_descriptor_;
  metadata.reflection = OrdinalRegressionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrdinalRegressionParameter

// optional uint32 k = 1;
bool OrdinalRegressionParameter::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrdinalRegressionParameter::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
void OrdinalRegressionParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrdinalRegressionParameter::clear_k() {
  k_ = 0u;
  clear_has_k();
}
 ::google::protobuf::uint32 OrdinalRegressionParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.OrdinalRegressionParameter.k)
  return k_;
}
 void OrdinalRegressionParameter::set_k(::google::protobuf::uint32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.OrdinalRegressionParameter.k)
}

// optional string weight_file = 2;
bool OrdinalRegressionParameter::has_weight_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrdinalRegressionParameter::set_has_weight_file() {
  _has_bits_[0] |= 0x00000002u;
}
void OrdinalRegressionParameter::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrdinalRegressionParameter::clear_weight_file() {
  weight_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight_file();
}
 const ::std::string& OrdinalRegressionParameter::weight_file() const {
  // @@protoc_insertion_point(field_get:caffe.OrdinalRegressionParameter.weight_file)
  return weight_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OrdinalRegressionParameter::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.OrdinalRegressionParameter.weight_file)
}
 void OrdinalRegressionParameter::set_weight_file(const char* value) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.OrdinalRegressionParameter.weight_file)
}
 void OrdinalRegressionParameter::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.OrdinalRegressionParameter.weight_file)
}
 ::std::string* OrdinalRegressionParameter::mutable_weight_file() {
  set_has_weight_file();
  // @@protoc_insertion_point(field_mutable:caffe.OrdinalRegressionParameter.weight_file)
  return weight_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OrdinalRegressionParameter::release_weight_file() {
  // @@protoc_insertion_point(field_release:caffe.OrdinalRegressionParameter.weight_file)
  clear_has_weight_file();
  return weight_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OrdinalRegressionParameter::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file != NULL) {
    set_has_weight_file();
  } else {
    clear_has_weight_file();
  }
  weight_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.OrdinalRegressionParameter.weight_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeParameter::kHeightFieldNumber;
const int ResizeParameter::kWidthFieldNumber;
const int ResizeParameter::kIsPyramidTestFieldNumber;
const int ResizeParameter::kOutHeightScaleFieldNumber;
const int ResizeParameter::kOutWidthScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeParameter::ResizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ResizeParameter)
}

void ResizeParameter::InitAsDefaultInstance() {
}

ResizeParameter::ResizeParameter(const ResizeParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ResizeParameter)
}

void ResizeParameter::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0u;
  width_ = 0u;
  is_pyramid_test_ = false;
  out_height_scale_ = 0;
  out_width_scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResizeParameter::~ResizeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ResizeParameter)
  SharedDtor();
}

void ResizeParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResizeParameter_descriptor_;
}

const ResizeParameter& ResizeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ResizeParameter* ResizeParameter::default_instance_ = NULL;

ResizeParameter* ResizeParameter::New(::google::protobuf::Arena* arena) const {
  ResizeParameter* n = new ResizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ResizeParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResizeParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResizeParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(height_, out_width_scale_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ResizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_pyramid_test;
        break;
      }

      // optional bool is_pyramid_test = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_is_pyramid_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pyramid_test_)));
          set_has_is_pyramid_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_out_height_scale;
        break;
      }

      // optional float out_height_scale = 4;
      case 4: {
        if (tag == 37) {
         parse_out_height_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_height_scale_)));
          set_has_out_height_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_out_width_scale;
        break;
      }

      // optional float out_width_scale = 5;
      case 5: {
        if (tag == 45) {
         parse_out_width_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_width_scale_)));
          set_has_out_width_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ResizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ResizeParameter)
  return false;
#undef DO_
}

void ResizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ResizeParameter)
  // optional uint32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // optional uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional bool is_pyramid_test = 3 [default = false];
  if (has_is_pyramid_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pyramid_test(), output);
  }

  // optional float out_height_scale = 4;
  if (has_out_height_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->out_height_scale(), output);
  }

  // optional float out_width_scale = 5;
  if (has_out_width_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->out_width_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ResizeParameter)
}

::google::protobuf::uint8* ResizeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ResizeParameter)
  // optional uint32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // optional uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional bool is_pyramid_test = 3 [default = false];
  if (has_is_pyramid_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pyramid_test(), target);
  }

  // optional float out_height_scale = 4;
  if (has_out_height_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->out_height_scale(), target);
  }

  // optional float out_width_scale = 5;
  if (has_out_width_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->out_width_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ResizeParameter)
  return target;
}

int ResizeParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ResizeParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional bool is_pyramid_test = 3 [default = false];
    if (has_is_pyramid_test()) {
      total_size += 1 + 1;
    }

    // optional float out_height_scale = 4;
    if (has_out_height_scale()) {
      total_size += 1 + 4;
    }

    // optional float out_width_scale = 5;
    if (has_out_width_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ResizeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResizeParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ResizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ResizeParameter)
    MergeFrom(*source);
  }
}

void ResizeParameter::MergeFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ResizeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_is_pyramid_test()) {
      set_is_pyramid_test(from.is_pyramid_test());
    }
    if (from.has_out_height_scale()) {
      set_out_height_scale(from.out_height_scale());
    }
    if (from.has_out_width_scale()) {
      set_out_width_scale(from.out_width_scale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeParameter::CopyFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeParameter::IsInitialized() const {

  return true;
}

void ResizeParameter::Swap(ResizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeParameter::InternalSwap(ResizeParameter* other) {
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(is_pyramid_test_, other->is_pyramid_test_);
  std::swap(out_height_scale_, other->out_height_scale_);
  std::swap(out_width_scale_, other->out_width_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResizeParameter_descriptor_;
  metadata.reflection = ResizeParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeParameter

// optional uint32 height = 1;
bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResizeParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height)
  return height_;
}
 void ResizeParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height)
}

// optional uint32 width = 2;
bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResizeParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
 ::google::protobuf::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width)
  return width_;
}
 void ResizeParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width)
}

// optional bool is_pyramid_test = 3 [default = false];
bool ResizeParameter::has_is_pyramid_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResizeParameter::set_has_is_pyramid_test() {
  _has_bits_[0] |= 0x00000004u;
}
void ResizeParameter::clear_has_is_pyramid_test() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResizeParameter::clear_is_pyramid_test() {
  is_pyramid_test_ = false;
  clear_has_is_pyramid_test();
}
 bool ResizeParameter::is_pyramid_test() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.is_pyramid_test)
  return is_pyramid_test_;
}
 void ResizeParameter::set_is_pyramid_test(bool value) {
  set_has_is_pyramid_test();
  is_pyramid_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.is_pyramid_test)
}

// optional float out_height_scale = 4;
bool ResizeParameter::has_out_height_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResizeParameter::set_has_out_height_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void ResizeParameter::clear_has_out_height_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResizeParameter::clear_out_height_scale() {
  out_height_scale_ = 0;
  clear_has_out_height_scale();
}
 float ResizeParameter::out_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_height_scale)
  return out_height_scale_;
}
 void ResizeParameter::set_out_height_scale(float value) {
  set_has_out_height_scale();
  out_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_height_scale)
}

// optional float out_width_scale = 5;
bool ResizeParameter::has_out_width_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResizeParameter::set_has_out_width_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void ResizeParameter::clear_has_out_width_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResizeParameter::clear_out_width_scale() {
  out_width_scale_ = 0;
  clear_has_out_width_scale();
}
 float ResizeParameter::out_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_width_scale)
  return out_width_scale_;
}
 void ResizeParameter::set_out_width_scale(float value) {
  set_has_out_width_scale();
  out_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_width_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MarginInnerProductParameter_MarginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarginInnerProductParameter_MarginType_descriptor_;
}
bool MarginInnerProductParameter_MarginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MarginInnerProductParameter_MarginType MarginInnerProductParameter::SINGLE;
const MarginInnerProductParameter_MarginType MarginInnerProductParameter::DOUBLE;
const MarginInnerProductParameter_MarginType MarginInnerProductParameter::TRIPLE;
const MarginInnerProductParameter_MarginType MarginInnerProductParameter::QUADRUPLE;
const MarginInnerProductParameter_MarginType MarginInnerProductParameter::MarginType_MIN;
const MarginInnerProductParameter_MarginType MarginInnerProductParameter::MarginType_MAX;
const int MarginInnerProductParameter::MarginType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginInnerProductParameter::kNumOutputFieldNumber;
const int MarginInnerProductParameter::kTypeFieldNumber;
const int MarginInnerProductParameter::kWeightFillerFieldNumber;
const int MarginInnerProductParameter::kAxisFieldNumber;
const int MarginInnerProductParameter::kBaseFieldNumber;
const int MarginInnerProductParameter::kGammaFieldNumber;
const int MarginInnerProductParameter::kPowerFieldNumber;
const int MarginInnerProductParameter::kIterationFieldNumber;
const int MarginInnerProductParameter::kLambdaMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginInnerProductParameter::MarginInnerProductParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MarginInnerProductParameter)
}

void MarginInnerProductParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

MarginInnerProductParameter::MarginInnerProductParameter(const MarginInnerProductParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MarginInnerProductParameter)
}

void MarginInnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  type_ = 0;
  weight_filler_ = NULL;
  axis_ = 1;
  base_ = 1;
  gamma_ = 0;
  power_ = 1;
  iteration_ = 0;
  lambda_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarginInnerProductParameter::~MarginInnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.MarginInnerProductParameter)
  SharedDtor();
}

void MarginInnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void MarginInnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarginInnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarginInnerProductParameter_descriptor_;
}

const MarginInnerProductParameter& MarginInnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

MarginInnerProductParameter* MarginInnerProductParameter::default_instance_ = NULL;

MarginInnerProductParameter* MarginInnerProductParameter::New(::google::protobuf::Arena* arena) const {
  MarginInnerProductParameter* n = new MarginInnerProductParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarginInnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MarginInnerProductParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MarginInnerProductParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MarginInnerProductParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_output_, type_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    base_ = 1;
    gamma_ = 0;
    power_ = 1;
    iteration_ = 0;
  }
  lambda_min_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MarginInnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MarginInnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .caffe.MarginInnerProductParameter.MarginType type = 2 [default = SINGLE];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::MarginInnerProductParameter_MarginType_IsValid(value)) {
            set_type(static_cast< ::caffe::MarginInnerProductParameter_MarginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_axis;
        break;
      }

      // optional int32 axis = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_base;
        break;
      }

      // optional float base = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_gamma;
        break;
      }

      // optional float gamma = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_power;
        break;
      }

      // optional float power = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iteration;
        break;
      }

      // optional int32 iteration = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_lambda_min;
        break;
      }

      // optional float lambda_min = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_lambda_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lambda_min_)));
          set_has_lambda_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MarginInnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MarginInnerProductParameter)
  return false;
#undef DO_
}

void MarginInnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MarginInnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional .caffe.MarginInnerProductParameter.MarginType type = 2 [default = SINGLE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional int32 axis = 4 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->axis(), output);
  }

  // optional float base = 5 [default = 1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base(), output);
  }

  // optional float gamma = 6 [default = 0];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gamma(), output);
  }

  // optional float power = 7 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->power(), output);
  }

  // optional int32 iteration = 8 [default = 0];
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iteration(), output);
  }

  // optional float lambda_min = 9 [default = 0];
  if (has_lambda_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lambda_min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MarginInnerProductParameter)
}

::google::protobuf::uint8* MarginInnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MarginInnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional .caffe.MarginInnerProductParameter.MarginType type = 2 [default = SINGLE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->weight_filler_, target);
  }

  // optional int32 axis = 4 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->axis(), target);
  }

  // optional float base = 5 [default = 1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base(), target);
  }

  // optional float gamma = 6 [default = 0];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gamma(), target);
  }

  // optional float power = 7 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->power(), target);
  }

  // optional int32 iteration = 8 [default = 0];
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->iteration(), target);
  }

  // optional float lambda_min = 9 [default = 0];
  if (has_lambda_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lambda_min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MarginInnerProductParameter)
  return target;
}

int MarginInnerProductParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MarginInnerProductParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.MarginInnerProductParameter.MarginType type = 2 [default = SINGLE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional int32 axis = 4 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float base = 5 [default = 1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 6 [default = 0];
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power = 7 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional int32 iteration = 8 [default = 0];
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iteration());
    }

  }
  // optional float lambda_min = 9 [default = 0];
  if (has_lambda_min()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarginInnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MarginInnerProductParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MarginInnerProductParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MarginInnerProductParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MarginInnerProductParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MarginInnerProductParameter)
    MergeFrom(*source);
  }
}

void MarginInnerProductParameter::MergeFrom(const MarginInnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MarginInnerProductParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lambda_min()) {
      set_lambda_min(from.lambda_min());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MarginInnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MarginInnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginInnerProductParameter::CopyFrom(const MarginInnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MarginInnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginInnerProductParameter::IsInitialized() const {

  return true;
}

void MarginInnerProductParameter::Swap(MarginInnerProductParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginInnerProductParameter::InternalSwap(MarginInnerProductParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(type_, other->type_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(axis_, other->axis_);
  std::swap(base_, other->base_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(iteration_, other->iteration_);
  std::swap(lambda_min_, other->lambda_min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarginInnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarginInnerProductParameter_descriptor_;
  metadata.reflection = MarginInnerProductParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarginInnerProductParameter

// optional uint32 num_output = 1;
bool MarginInnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarginInnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void MarginInnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarginInnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 MarginInnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.num_output)
  return num_output_;
}
 void MarginInnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.num_output)
}

// optional .caffe.MarginInnerProductParameter.MarginType type = 2 [default = SINGLE];
bool MarginInnerProductParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarginInnerProductParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MarginInnerProductParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarginInnerProductParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::caffe::MarginInnerProductParameter_MarginType MarginInnerProductParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.type)
  return static_cast< ::caffe::MarginInnerProductParameter_MarginType >(type_);
}
 void MarginInnerProductParameter::set_type(::caffe::MarginInnerProductParameter_MarginType value) {
  assert(::caffe::MarginInnerProductParameter_MarginType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.type)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool MarginInnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarginInnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void MarginInnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarginInnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& MarginInnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::caffe::FillerParameter* MarginInnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.MarginInnerProductParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* MarginInnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.MarginInnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void MarginInnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.MarginInnerProductParameter.weight_filler)
}

// optional int32 axis = 4 [default = 1];
bool MarginInnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarginInnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
void MarginInnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarginInnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
 ::google::protobuf::int32 MarginInnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.axis)
  return axis_;
}
 void MarginInnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.axis)
}

// optional float base = 5 [default = 1];
bool MarginInnerProductParameter::has_base() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MarginInnerProductParameter::set_has_base() {
  _has_bits_[0] |= 0x00000010u;
}
void MarginInnerProductParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000010u;
}
void MarginInnerProductParameter::clear_base() {
  base_ = 1;
  clear_has_base();
}
 float MarginInnerProductParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.base)
  return base_;
}
 void MarginInnerProductParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.base)
}

// optional float gamma = 6 [default = 0];
bool MarginInnerProductParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MarginInnerProductParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000020u;
}
void MarginInnerProductParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000020u;
}
void MarginInnerProductParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 float MarginInnerProductParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.gamma)
  return gamma_;
}
 void MarginInnerProductParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.gamma)
}

// optional float power = 7 [default = 1];
bool MarginInnerProductParameter::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MarginInnerProductParameter::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
void MarginInnerProductParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
void MarginInnerProductParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
 float MarginInnerProductParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.power)
  return power_;
}
 void MarginInnerProductParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.power)
}

// optional int32 iteration = 8 [default = 0];
bool MarginInnerProductParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MarginInnerProductParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000080u;
}
void MarginInnerProductParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000080u;
}
void MarginInnerProductParameter::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
 ::google::protobuf::int32 MarginInnerProductParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.iteration)
  return iteration_;
}
 void MarginInnerProductParameter::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.iteration)
}

// optional float lambda_min = 9 [default = 0];
bool MarginInnerProductParameter::has_lambda_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MarginInnerProductParameter::set_has_lambda_min() {
  _has_bits_[0] |= 0x00000100u;
}
void MarginInnerProductParameter::clear_has_lambda_min() {
  _has_bits_[0] &= ~0x00000100u;
}
void MarginInnerProductParameter::clear_lambda_min() {
  lambda_min_ = 0;
  clear_has_lambda_min();
}
 float MarginInnerProductParameter::lambda_min() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.lambda_min)
  return lambda_min_;
}
 void MarginInnerProductParameter::set_lambda_min(float value) {
  set_has_lambda_min();
  lambda_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.lambda_min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureDecayLossParameter::kDecayThresholdFieldNumber;
const int FeatureDecayLossParameter::kForceDecayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureDecayLossParameter::FeatureDecayLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FeatureDecayLossParameter)
}

void FeatureDecayLossParameter::InitAsDefaultInstance() {
}

FeatureDecayLossParameter::FeatureDecayLossParameter(const FeatureDecayLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FeatureDecayLossParameter)
}

void FeatureDecayLossParameter::SharedCtor() {
  _cached_size_ = 0;
  decay_threshold_ = 20;
  force_decay_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureDecayLossParameter::~FeatureDecayLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.FeatureDecayLossParameter)
  SharedDtor();
}

void FeatureDecayLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureDecayLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureDecayLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureDecayLossParameter_descriptor_;
}

const FeatureDecayLossParameter& FeatureDecayLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FeatureDecayLossParameter* FeatureDecayLossParameter::default_instance_ = NULL;

FeatureDecayLossParameter* FeatureDecayLossParameter::New(::google::protobuf::Arena* arena) const {
  FeatureDecayLossParameter* n = new FeatureDecayLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureDecayLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FeatureDecayLossParameter)
  if (_has_bits_[0 / 32] & 3u) {
    decay_threshold_ = 20;
    force_decay_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeatureDecayLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FeatureDecayLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float decay_threshold = 1 [default = 20];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_threshold_)));
          set_has_decay_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_force_decay;
        break;
      }

      // optional bool force_decay = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_force_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_decay_)));
          set_has_force_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FeatureDecayLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FeatureDecayLossParameter)
  return false;
#undef DO_
}

void FeatureDecayLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FeatureDecayLossParameter)
  // optional float decay_threshold = 1 [default = 20];
  if (has_decay_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->decay_threshold(), output);
  }

  // optional bool force_decay = 2 [default = false];
  if (has_force_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_decay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FeatureDecayLossParameter)
}

::google::protobuf::uint8* FeatureDecayLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FeatureDecayLossParameter)
  // optional float decay_threshold = 1 [default = 20];
  if (has_decay_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->decay_threshold(), target);
  }

  // optional bool force_decay = 2 [default = false];
  if (has_force_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_decay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FeatureDecayLossParameter)
  return target;
}

int FeatureDecayLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FeatureDecayLossParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float decay_threshold = 1 [default = 20];
    if (has_decay_threshold()) {
      total_size += 1 + 4;
    }

    // optional bool force_decay = 2 [default = false];
    if (has_force_decay()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureDecayLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FeatureDecayLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureDecayLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureDecayLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FeatureDecayLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FeatureDecayLossParameter)
    MergeFrom(*source);
  }
}

void FeatureDecayLossParameter::MergeFrom(const FeatureDecayLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FeatureDecayLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decay_threshold()) {
      set_decay_threshold(from.decay_threshold());
    }
    if (from.has_force_decay()) {
      set_force_decay(from.force_decay());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeatureDecayLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FeatureDecayLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureDecayLossParameter::CopyFrom(const FeatureDecayLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FeatureDecayLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureDecayLossParameter::IsInitialized() const {

  return true;
}

void FeatureDecayLossParameter::Swap(FeatureDecayLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureDecayLossParameter::InternalSwap(FeatureDecayLossParameter* other) {
  std::swap(decay_threshold_, other->decay_threshold_);
  std::swap(force_decay_, other->force_decay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureDecayLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureDecayLossParameter_descriptor_;
  metadata.reflection = FeatureDecayLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureDecayLossParameter

// optional float decay_threshold = 1 [default = 20];
bool FeatureDecayLossParameter::has_decay_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureDecayLossParameter::set_has_decay_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureDecayLossParameter::clear_has_decay_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureDecayLossParameter::clear_decay_threshold() {
  decay_threshold_ = 20;
  clear_has_decay_threshold();
}
 float FeatureDecayLossParameter::decay_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.FeatureDecayLossParameter.decay_threshold)
  return decay_threshold_;
}
 void FeatureDecayLossParameter::set_decay_threshold(float value) {
  set_has_decay_threshold();
  decay_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.FeatureDecayLossParameter.decay_threshold)
}

// optional bool force_decay = 2 [default = false];
bool FeatureDecayLossParameter::has_force_decay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureDecayLossParameter::set_has_force_decay() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureDecayLossParameter::clear_has_force_decay() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureDecayLossParameter::clear_force_decay() {
  force_decay_ = false;
  clear_has_force_decay();
}
 bool FeatureDecayLossParameter::force_decay() const {
  // @@protoc_insertion_point(field_get:caffe.FeatureDecayLossParameter.force_decay)
  return force_decay_;
}
 void FeatureDecayLossParameter::set_force_decay(bool value) {
  set_has_force_decay();
  force_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.FeatureDecayLossParameter.force_decay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfidencePenaltyLossParameter::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfidencePenaltyLossParameter::ConfidencePenaltyLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConfidencePenaltyLossParameter)
}

void ConfidencePenaltyLossParameter::InitAsDefaultInstance() {
}

ConfidencePenaltyLossParameter::ConfidencePenaltyLossParameter(const ConfidencePenaltyLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConfidencePenaltyLossParameter)
}

void ConfidencePenaltyLossParameter::SharedCtor() {
  _cached_size_ = 0;
  beta_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfidencePenaltyLossParameter::~ConfidencePenaltyLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConfidencePenaltyLossParameter)
  SharedDtor();
}

void ConfidencePenaltyLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfidencePenaltyLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfidencePenaltyLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfidencePenaltyLossParameter_descriptor_;
}

const ConfidencePenaltyLossParameter& ConfidencePenaltyLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ConfidencePenaltyLossParameter* ConfidencePenaltyLossParameter::default_instance_ = NULL;

ConfidencePenaltyLossParameter* ConfidencePenaltyLossParameter::New(::google::protobuf::Arena* arena) const {
  ConfidencePenaltyLossParameter* n = new ConfidencePenaltyLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfidencePenaltyLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConfidencePenaltyLossParameter)
  beta_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfidencePenaltyLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConfidencePenaltyLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float beta = 1 [default = 0.1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConfidencePenaltyLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConfidencePenaltyLossParameter)
  return false;
#undef DO_
}

void ConfidencePenaltyLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConfidencePenaltyLossParameter)
  // optional float beta = 1 [default = 0.1];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->beta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConfidencePenaltyLossParameter)
}

::google::protobuf::uint8* ConfidencePenaltyLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConfidencePenaltyLossParameter)
  // optional float beta = 1 [default = 0.1];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->beta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConfidencePenaltyLossParameter)
  return target;
}

int ConfidencePenaltyLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConfidencePenaltyLossParameter)
  int total_size = 0;

  // optional float beta = 1 [default = 0.1];
  if (has_beta()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfidencePenaltyLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConfidencePenaltyLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfidencePenaltyLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfidencePenaltyLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConfidencePenaltyLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConfidencePenaltyLossParameter)
    MergeFrom(*source);
  }
}

void ConfidencePenaltyLossParameter::MergeFrom(const ConfidencePenaltyLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConfidencePenaltyLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beta()) {
      set_beta(from.beta());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfidencePenaltyLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConfidencePenaltyLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfidencePenaltyLossParameter::CopyFrom(const ConfidencePenaltyLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConfidencePenaltyLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfidencePenaltyLossParameter::IsInitialized() const {

  return true;
}

void ConfidencePenaltyLossParameter::Swap(ConfidencePenaltyLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfidencePenaltyLossParameter::InternalSwap(ConfidencePenaltyLossParameter* other) {
  std::swap(beta_, other->beta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfidencePenaltyLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfidencePenaltyLossParameter_descriptor_;
  metadata.reflection = ConfidencePenaltyLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfidencePenaltyLossParameter

// optional float beta = 1 [default = 0.1];
bool ConfidencePenaltyLossParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfidencePenaltyLossParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfidencePenaltyLossParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfidencePenaltyLossParameter::clear_beta() {
  beta_ = 0.1f;
  clear_has_beta();
}
 float ConfidencePenaltyLossParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.ConfidencePenaltyLossParameter.beta)
  return beta_;
}
 void ConfidencePenaltyLossParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConfidencePenaltyLossParameter.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* FocalLossParameter_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FocalLossParameter_Type_descriptor_;
}
bool FocalLossParameter_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FocalLossParameter_Type FocalLossParameter::ORIGIN;
const FocalLossParameter_Type FocalLossParameter::LINEAR;
const FocalLossParameter_Type FocalLossParameter::ONEADDP;
const FocalLossParameter_Type FocalLossParameter::Type_MIN;
const FocalLossParameter_Type FocalLossParameter::Type_MAX;
const int FocalLossParameter::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FocalLossParameter::kTypeFieldNumber;
const int FocalLossParameter::kGammaFieldNumber;
const int FocalLossParameter::kAlphaFieldNumber;
const int FocalLossParameter::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FocalLossParameter::FocalLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FocalLossParameter)
}

void FocalLossParameter::InitAsDefaultInstance() {
}

FocalLossParameter::FocalLossParameter(const FocalLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FocalLossParameter)
}

void FocalLossParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  gamma_ = 2;
  alpha_ = 1;
  beta_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FocalLossParameter::~FocalLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.FocalLossParameter)
  SharedDtor();
}

void FocalLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FocalLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FocalLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FocalLossParameter_descriptor_;
}

const FocalLossParameter& FocalLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FocalLossParameter* FocalLossParameter::default_instance_ = NULL;

FocalLossParameter* FocalLossParameter::New(::google::protobuf::Arena* arena) const {
  FocalLossParameter* n = new FocalLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FocalLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FocalLossParameter)
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 0;
    gamma_ = 2;
    alpha_ = 1;
    beta_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FocalLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FocalLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FocalLossParameter.Type type = 1 [default = ORIGIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::FocalLossParameter_Type_IsValid(value)) {
            set_type(static_cast< ::caffe::FocalLossParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_gamma;
        break;
      }

      // optional float gamma = 2 [default = 2];
      case 2: {
        if (tag == 21) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_alpha;
        break;
      }

      // optional float alpha = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_beta;
        break;
      }

      // optional float beta = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FocalLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FocalLossParameter)
  return false;
#undef DO_
}

void FocalLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FocalLossParameter)
  // optional .caffe.FocalLossParameter.Type type = 1 [default = ORIGIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float gamma = 2 [default = 2];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gamma(), output);
  }

  // optional float alpha = 3 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  // optional float beta = 4 [default = 1];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->beta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FocalLossParameter)
}

::google::protobuf::uint8* FocalLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FocalLossParameter)
  // optional .caffe.FocalLossParameter.Type type = 1 [default = ORIGIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float gamma = 2 [default = 2];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gamma(), target);
  }

  // optional float alpha = 3 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  // optional float beta = 4 [default = 1];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->beta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FocalLossParameter)
  return target;
}

int FocalLossParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FocalLossParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .caffe.FocalLossParameter.Type type = 1 [default = ORIGIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float gamma = 2 [default = 2];
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float alpha = 3 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 4 [default = 1];
    if (has_beta()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FocalLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FocalLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FocalLossParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FocalLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FocalLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FocalLossParameter)
    MergeFrom(*source);
  }
}

void FocalLossParameter::MergeFrom(const FocalLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FocalLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FocalLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FocalLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FocalLossParameter::CopyFrom(const FocalLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FocalLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocalLossParameter::IsInitialized() const {

  return true;
}

void FocalLossParameter::Swap(FocalLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FocalLossParameter::InternalSwap(FocalLossParameter* other) {
  std::swap(type_, other->type_);
  std::swap(gamma_, other->gamma_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FocalLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FocalLossParameter_descriptor_;
  metadata.reflection = FocalLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FocalLossParameter

// optional .caffe.FocalLossParameter.Type type = 1 [default = ORIGIN];
bool FocalLossParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FocalLossParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FocalLossParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FocalLossParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::caffe::FocalLossParameter_Type FocalLossParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.type)
  return static_cast< ::caffe::FocalLossParameter_Type >(type_);
}
 void FocalLossParameter::set_type(::caffe::FocalLossParameter_Type value) {
  assert(::caffe::FocalLossParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.type)
}

// optional float gamma = 2 [default = 2];
bool FocalLossParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FocalLossParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000002u;
}
void FocalLossParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000002u;
}
void FocalLossParameter::clear_gamma() {
  gamma_ = 2;
  clear_has_gamma();
}
 float FocalLossParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.gamma)
  return gamma_;
}
 void FocalLossParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.gamma)
}

// optional float alpha = 3 [default = 1];
bool FocalLossParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FocalLossParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
void FocalLossParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
void FocalLossParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
 float FocalLossParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.alpha)
  return alpha_;
}
 void FocalLossParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.alpha)
}

// optional float beta = 4 [default = 1];
bool FocalLossParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FocalLossParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000008u;
}
void FocalLossParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000008u;
}
void FocalLossParameter::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
 float FocalLossParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.beta)
  return beta_;
}
 void FocalLossParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LabelSpecificMarginParameter_MarginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSpecificMarginParameter_MarginType_descriptor_;
}
bool LabelSpecificMarginParameter_MarginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter::HARD;
const LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter::SOFT;
const LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter::MarginType_MIN;
const LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter::MarginType_MAX;
const int LabelSpecificMarginParameter::MarginType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSpecificMarginParameter::kTypeFieldNumber;
const int LabelSpecificMarginParameter::kMarginBaseFieldNumber;
const int LabelSpecificMarginParameter::kMarginMaxFieldNumber;
const int LabelSpecificMarginParameter::kPowerFieldNumber;
const int LabelSpecificMarginParameter::kGammaFieldNumber;
const int LabelSpecificMarginParameter::kIterationFieldNumber;
const int LabelSpecificMarginParameter::kResetMarginFieldNumber;
const int LabelSpecificMarginParameter::kMarginOnTestFieldNumber;
const int LabelSpecificMarginParameter::kAutoTuneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSpecificMarginParameter::LabelSpecificMarginParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelSpecificMarginParameter)
}

void LabelSpecificMarginParameter::InitAsDefaultInstance() {
}

LabelSpecificMarginParameter::LabelSpecificMarginParameter(const LabelSpecificMarginParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelSpecificMarginParameter)
}

void LabelSpecificMarginParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  margin_base_ = 0;
  margin_max_ = 10;
  power_ = 1;
  gamma_ = 1;
  iteration_ = 0;
  reset_margin_ = false;
  margin_on_test_ = false;
  auto_tune_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSpecificMarginParameter::~LabelSpecificMarginParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelSpecificMarginParameter)
  SharedDtor();
}

void LabelSpecificMarginParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelSpecificMarginParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSpecificMarginParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSpecificMarginParameter_descriptor_;
}

const LabelSpecificMarginParameter& LabelSpecificMarginParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LabelSpecificMarginParameter* LabelSpecificMarginParameter::default_instance_ = NULL;

LabelSpecificMarginParameter* LabelSpecificMarginParameter::New(::google::protobuf::Arena* arena) const {
  LabelSpecificMarginParameter* n = new LabelSpecificMarginParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelSpecificMarginParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelSpecificMarginParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LabelSpecificMarginParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LabelSpecificMarginParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(type_, margin_base_);
    ZR_(iteration_, margin_on_test_);
    margin_max_ = 10;
    power_ = 1;
    gamma_ = 1;
  }
  auto_tune_ = false;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelSpecificMarginParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelSpecificMarginParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin_base = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_base_)));
          set_has_margin_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_margin_max;
        break;
      }

      // optional float margin_max = 2 [default = 10];
      case 2: {
        if (tag == 21) {
         parse_margin_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_max_)));
          set_has_margin_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_power;
        break;
      }

      // optional float power = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gamma;
        break;
      }

      // optional float gamma = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iteration;
        break;
      }

      // optional int32 iteration = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reset_margin;
        break;
      }

      // optional bool reset_margin = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_reset_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_margin_)));
          set_has_reset_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_margin_on_test;
        break;
      }

      // optional bool margin_on_test = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_margin_on_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &margin_on_test_)));
          set_has_margin_on_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_auto_tune;
        break;
      }

      // optional bool auto_tune = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_auto_tune:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_tune_)));
          set_has_auto_tune();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .caffe.LabelSpecificMarginParameter.MarginType type = 9 [default = HARD];
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LabelSpecificMarginParameter_MarginType_IsValid(value)) {
            set_type(static_cast< ::caffe::LabelSpecificMarginParameter_MarginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelSpecificMarginParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelSpecificMarginParameter)
  return false;
#undef DO_
}

void LabelSpecificMarginParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelSpecificMarginParameter)
  // optional float margin_base = 1 [default = 0];
  if (has_margin_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin_base(), output);
  }

  // optional float margin_max = 2 [default = 10];
  if (has_margin_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->margin_max(), output);
  }

  // optional float power = 3 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->power(), output);
  }

  // optional float gamma = 4 [default = 1];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gamma(), output);
  }

  // optional int32 iteration = 5 [default = 0];
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iteration(), output);
  }

  // optional bool reset_margin = 6 [default = false];
  if (has_reset_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reset_margin(), output);
  }

  // optional bool margin_on_test = 7 [default = false];
  if (has_margin_on_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->margin_on_test(), output);
  }

  // optional bool auto_tune = 8 [default = false];
  if (has_auto_tune()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->auto_tune(), output);
  }

  // optional .caffe.LabelSpecificMarginParameter.MarginType type = 9 [default = HARD];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelSpecificMarginParameter)
}

::google::protobuf::uint8* LabelSpecificMarginParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelSpecificMarginParameter)
  // optional float margin_base = 1 [default = 0];
  if (has_margin_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin_base(), target);
  }

  // optional float margin_max = 2 [default = 10];
  if (has_margin_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->margin_max(), target);
  }

  // optional float power = 3 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->power(), target);
  }

  // optional float gamma = 4 [default = 1];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gamma(), target);
  }

  // optional int32 iteration = 5 [default = 0];
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iteration(), target);
  }

  // optional bool reset_margin = 6 [default = false];
  if (has_reset_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reset_margin(), target);
  }

  // optional bool margin_on_test = 7 [default = false];
  if (has_margin_on_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->margin_on_test(), target);
  }

  // optional bool auto_tune = 8 [default = false];
  if (has_auto_tune()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->auto_tune(), target);
  }

  // optional .caffe.LabelSpecificMarginParameter.MarginType type = 9 [default = HARD];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelSpecificMarginParameter)
  return target;
}

int LabelSpecificMarginParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelSpecificMarginParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.LabelSpecificMarginParameter.MarginType type = 9 [default = HARD];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float margin_base = 1 [default = 0];
    if (has_margin_base()) {
      total_size += 1 + 4;
    }

    // optional float margin_max = 2 [default = 10];
    if (has_margin_max()) {
      total_size += 1 + 4;
    }

    // optional float power = 3 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 4 [default = 1];
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional int32 iteration = 5 [default = 0];
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iteration());
    }

    // optional bool reset_margin = 6 [default = false];
    if (has_reset_margin()) {
      total_size += 1 + 1;
    }

    // optional bool margin_on_test = 7 [default = false];
    if (has_margin_on_test()) {
      total_size += 1 + 1;
    }

  }
  // optional bool auto_tune = 8 [default = false];
  if (has_auto_tune()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSpecificMarginParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelSpecificMarginParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelSpecificMarginParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSpecificMarginParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelSpecificMarginParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelSpecificMarginParameter)
    MergeFrom(*source);
  }
}

void LabelSpecificMarginParameter::MergeFrom(const LabelSpecificMarginParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelSpecificMarginParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_margin_base()) {
      set_margin_base(from.margin_base());
    }
    if (from.has_margin_max()) {
      set_margin_max(from.margin_max());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
    if (from.has_reset_margin()) {
      set_reset_margin(from.reset_margin());
    }
    if (from.has_margin_on_test()) {
      set_margin_on_test(from.margin_on_test());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_auto_tune()) {
      set_auto_tune(from.auto_tune());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LabelSpecificMarginParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelSpecificMarginParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSpecificMarginParameter::CopyFrom(const LabelSpecificMarginParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelSpecificMarginParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSpecificMarginParameter::IsInitialized() const {

  return true;
}

void LabelSpecificMarginParameter::Swap(LabelSpecificMarginParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSpecificMarginParameter::InternalSwap(LabelSpecificMarginParameter* other) {
  std::swap(type_, other->type_);
  std::swap(margin_base_, other->margin_base_);
  std::swap(margin_max_, other->margin_max_);
  std::swap(power_, other->power_);
  std::swap(gamma_, other->gamma_);
  std::swap(iteration_, other->iteration_);
  std::swap(reset_margin_, other->reset_margin_);
  std::swap(margin_on_test_, other->margin_on_test_);
  std::swap(auto_tune_, other->auto_tune_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelSpecificMarginParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSpecificMarginParameter_descriptor_;
  metadata.reflection = LabelSpecificMarginParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelSpecificMarginParameter

// optional .caffe.LabelSpecificMarginParameter.MarginType type = 9 [default = HARD];
bool LabelSpecificMarginParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelSpecificMarginParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelSpecificMarginParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelSpecificMarginParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::caffe::LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.type)
  return static_cast< ::caffe::LabelSpecificMarginParameter_MarginType >(type_);
}
 void LabelSpecificMarginParameter::set_type(::caffe::LabelSpecificMarginParameter_MarginType value) {
  assert(::caffe::LabelSpecificMarginParameter_MarginType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.type)
}

// optional float margin_base = 1 [default = 0];
bool LabelSpecificMarginParameter::has_margin_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelSpecificMarginParameter::set_has_margin_base() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelSpecificMarginParameter::clear_has_margin_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelSpecificMarginParameter::clear_margin_base() {
  margin_base_ = 0;
  clear_has_margin_base();
}
 float LabelSpecificMarginParameter::margin_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.margin_base)
  return margin_base_;
}
 void LabelSpecificMarginParameter::set_margin_base(float value) {
  set_has_margin_base();
  margin_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.margin_base)
}

// optional float margin_max = 2 [default = 10];
bool LabelSpecificMarginParameter::has_margin_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelSpecificMarginParameter::set_has_margin_max() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelSpecificMarginParameter::clear_has_margin_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelSpecificMarginParameter::clear_margin_max() {
  margin_max_ = 10;
  clear_has_margin_max();
}
 float LabelSpecificMarginParameter::margin_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.margin_max)
  return margin_max_;
}
 void LabelSpecificMarginParameter::set_margin_max(float value) {
  set_has_margin_max();
  margin_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.margin_max)
}

// optional float power = 3 [default = 1];
bool LabelSpecificMarginParameter::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LabelSpecificMarginParameter::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
void LabelSpecificMarginParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
void LabelSpecificMarginParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
 float LabelSpecificMarginParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.power)
  return power_;
}
 void LabelSpecificMarginParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.power)
}

// optional float gamma = 4 [default = 1];
bool LabelSpecificMarginParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LabelSpecificMarginParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000010u;
}
void LabelSpecificMarginParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000010u;
}
void LabelSpecificMarginParameter::clear_gamma() {
  gamma_ = 1;
  clear_has_gamma();
}
 float LabelSpecificMarginParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.gamma)
  return gamma_;
}
 void LabelSpecificMarginParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.gamma)
}

// optional int32 iteration = 5 [default = 0];
bool LabelSpecificMarginParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LabelSpecificMarginParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000020u;
}
void LabelSpecificMarginParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000020u;
}
void LabelSpecificMarginParameter::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
 ::google::protobuf::int32 LabelSpecificMarginParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.iteration)
  return iteration_;
}
 void LabelSpecificMarginParameter::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.iteration)
}

// optional bool reset_margin = 6 [default = false];
bool LabelSpecificMarginParameter::has_reset_margin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LabelSpecificMarginParameter::set_has_reset_margin() {
  _has_bits_[0] |= 0x00000040u;
}
void LabelSpecificMarginParameter::clear_has_reset_margin() {
  _has_bits_[0] &= ~0x00000040u;
}
void LabelSpecificMarginParameter::clear_reset_margin() {
  reset_margin_ = false;
  clear_has_reset_margin();
}
 bool LabelSpecificMarginParameter::reset_margin() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.reset_margin)
  return reset_margin_;
}
 void LabelSpecificMarginParameter::set_reset_margin(bool value) {
  set_has_reset_margin();
  reset_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.reset_margin)
}

// optional bool margin_on_test = 7 [default = false];
bool LabelSpecificMarginParameter::has_margin_on_test() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LabelSpecificMarginParameter::set_has_margin_on_test() {
  _has_bits_[0] |= 0x00000080u;
}
void LabelSpecificMarginParameter::clear_has_margin_on_test() {
  _has_bits_[0] &= ~0x00000080u;
}
void LabelSpecificMarginParameter::clear_margin_on_test() {
  margin_on_test_ = false;
  clear_has_margin_on_test();
}
 bool LabelSpecificMarginParameter::margin_on_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.margin_on_test)
  return margin_on_test_;
}
 void LabelSpecificMarginParameter::set_margin_on_test(bool value) {
  set_has_margin_on_test();
  margin_on_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.margin_on_test)
}

// optional bool auto_tune = 8 [default = false];
bool LabelSpecificMarginParameter::has_auto_tune() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LabelSpecificMarginParameter::set_has_auto_tune() {
  _has_bits_[0] |= 0x00000100u;
}
void LabelSpecificMarginParameter::clear_has_auto_tune() {
  _has_bits_[0] &= ~0x00000100u;
}
void LabelSpecificMarginParameter::clear_auto_tune() {
  auto_tune_ = false;
  clear_has_auto_tune();
}
 bool LabelSpecificMarginParameter::auto_tune() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.auto_tune)
  return auto_tune_;
}
 void LabelSpecificMarginParameter::set_auto_tune(bool value) {
  set_has_auto_tune();
  auto_tune_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.auto_tune)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelScaleParameter::kDoForwardFieldNumber;
const int ChannelScaleParameter::kDoBackwardFeatureFieldNumber;
const int ChannelScaleParameter::kDoBackwardScaleFieldNumber;
const int ChannelScaleParameter::kGlobalScaleFieldNumber;
const int ChannelScaleParameter::kMaxGlobalScaleFieldNumber;
const int ChannelScaleParameter::kMinGlobalScaleFieldNumber;
const int ChannelScaleParameter::kInitGlobalScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelScaleParameter::ChannelScaleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ChannelScaleParameter)
}

void ChannelScaleParameter::InitAsDefaultInstance() {
}

ChannelScaleParameter::ChannelScaleParameter(const ChannelScaleParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ChannelScaleParameter)
}

void ChannelScaleParameter::SharedCtor() {
  _cached_size_ = 0;
  do_forward_ = true;
  do_backward_feature_ = true;
  do_backward_scale_ = true;
  global_scale_ = false;
  max_global_scale_ = 1000;
  min_global_scale_ = 0;
  init_global_scale_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelScaleParameter::~ChannelScaleParameter() {
  // @@protoc_insertion_point(destructor:caffe.ChannelScaleParameter)
  SharedDtor();
}

void ChannelScaleParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelScaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelScaleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelScaleParameter_descriptor_;
}

const ChannelScaleParameter& ChannelScaleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ChannelScaleParameter* ChannelScaleParameter::default_instance_ = NULL;

ChannelScaleParameter* ChannelScaleParameter::New(::google::protobuf::Arena* arena) const {
  ChannelScaleParameter* n = new ChannelScaleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ChannelScaleParameter)
  if (_has_bits_[0 / 32] & 127u) {
    do_forward_ = true;
    do_backward_feature_ = true;
    do_backward_scale_ = true;
    global_scale_ = false;
    max_global_scale_ = 1000;
    min_global_scale_ = 0;
    init_global_scale_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChannelScaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ChannelScaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool do_forward = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_forward_)));
          set_has_do_forward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_do_backward_feature;
        break;
      }

      // optional bool do_backward_feature = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_do_backward_feature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_backward_feature_)));
          set_has_do_backward_feature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_do_backward_scale;
        break;
      }

      // optional bool do_backward_scale = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_do_backward_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_backward_scale_)));
          set_has_do_backward_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_global_scale;
        break;
      }

      // optional bool global_scale = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_global_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_scale_)));
          set_has_global_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_max_global_scale;
        break;
      }

      // optional float max_global_scale = 5 [default = 1000];
      case 5: {
        if (tag == 45) {
         parse_max_global_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_global_scale_)));
          set_has_max_global_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_min_global_scale;
        break;
      }

      // optional float min_global_scale = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_min_global_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_global_scale_)));
          set_has_min_global_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_init_global_scale;
        break;
      }

      // optional float init_global_scale = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_init_global_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_global_scale_)));
          set_has_init_global_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ChannelScaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ChannelScaleParameter)
  return false;
#undef DO_
}

void ChannelScaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ChannelScaleParameter)
  // optional bool do_forward = 1 [default = true];
  if (has_do_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->do_forward(), output);
  }

  // optional bool do_backward_feature = 2 [default = true];
  if (has_do_backward_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->do_backward_feature(), output);
  }

  // optional bool do_backward_scale = 3 [default = true];
  if (has_do_backward_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->do_backward_scale(), output);
  }

  // optional bool global_scale = 4 [default = false];
  if (has_global_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->global_scale(), output);
  }

  // optional float max_global_scale = 5 [default = 1000];
  if (has_max_global_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_global_scale(), output);
  }

  // optional float min_global_scale = 6 [default = 0];
  if (has_min_global_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min_global_scale(), output);
  }

  // optional float init_global_scale = 7 [default = 1];
  if (has_init_global_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->init_global_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ChannelScaleParameter)
}

::google::protobuf::uint8* ChannelScaleParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ChannelScaleParameter)
  // optional bool do_forward = 1 [default = true];
  if (has_do_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->do_forward(), target);
  }

  // optional bool do_backward_feature = 2 [default = true];
  if (has_do_backward_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->do_backward_feature(), target);
  }

  // optional bool do_backward_scale = 3 [default = true];
  if (has_do_backward_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->do_backward_scale(), target);
  }

  // optional bool global_scale = 4 [default = false];
  if (has_global_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->global_scale(), target);
  }

  // optional float max_global_scale = 5 [default = 1000];
  if (has_max_global_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_global_scale(), target);
  }

  // optional float min_global_scale = 6 [default = 0];
  if (has_min_global_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min_global_scale(), target);
  }

  // optional float init_global_scale = 7 [default = 1];
  if (has_init_global_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->init_global_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ChannelScaleParameter)
  return target;
}

int ChannelScaleParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ChannelScaleParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional bool do_forward = 1 [default = true];
    if (has_do_forward()) {
      total_size += 1 + 1;
    }

    // optional bool do_backward_feature = 2 [default = true];
    if (has_do_backward_feature()) {
      total_size += 1 + 1;
    }

    // optional bool do_backward_scale = 3 [default = true];
    if (has_do_backward_scale()) {
      total_size += 1 + 1;
    }

    // optional bool global_scale = 4 [default = false];
    if (has_global_scale()) {
      total_size += 1 + 1;
    }

    // optional float max_global_scale = 5 [default = 1000];
    if (has_max_global_scale()) {
      total_size += 1 + 4;
    }

    // optional float min_global_scale = 6 [default = 0];
    if (has_min_global_scale()) {
      total_size += 1 + 4;
    }

    // optional float init_global_scale = 7 [default = 1];
    if (has_init_global_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ChannelScaleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelScaleParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelScaleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ChannelScaleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ChannelScaleParameter)
    MergeFrom(*source);
  }
}

void ChannelScaleParameter::MergeFrom(const ChannelScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ChannelScaleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_forward()) {
      set_do_forward(from.do_forward());
    }
    if (from.has_do_backward_feature()) {
      set_do_backward_feature(from.do_backward_feature());
    }
    if (from.has_do_backward_scale()) {
      set_do_backward_scale(from.do_backward_scale());
    }
    if (from.has_global_scale()) {
      set_global_scale(from.global_scale());
    }
    if (from.has_max_global_scale()) {
      set_max_global_scale(from.max_global_scale());
    }
    if (from.has_min_global_scale()) {
      set_min_global_scale(from.min_global_scale());
    }
    if (from.has_init_global_scale()) {
      set_init_global_scale(from.init_global_scale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChannelScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ChannelScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelScaleParameter::CopyFrom(const ChannelScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ChannelScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelScaleParameter::IsInitialized() const {

  return true;
}

void ChannelScaleParameter::Swap(ChannelScaleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelScaleParameter::InternalSwap(ChannelScaleParameter* other) {
  std::swap(do_forward_, other->do_forward_);
  std::swap(do_backward_feature_, other->do_backward_feature_);
  std::swap(do_backward_scale_, other->do_backward_scale_);
  std::swap(global_scale_, other->global_scale_);
  std::swap(max_global_scale_, other->max_global_scale_);
  std::swap(min_global_scale_, other->min_global_scale_);
  std::swap(init_global_scale_, other->init_global_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelScaleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelScaleParameter_descriptor_;
  metadata.reflection = ChannelScaleParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelScaleParameter

// optional bool do_forward = 1 [default = true];
bool ChannelScaleParameter::has_do_forward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChannelScaleParameter::set_has_do_forward() {
  _has_bits_[0] |= 0x00000001u;
}
void ChannelScaleParameter::clear_has_do_forward() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelScaleParameter::clear_do_forward() {
  do_forward_ = true;
  clear_has_do_forward();
}
 bool ChannelScaleParameter::do_forward() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.do_forward)
  return do_forward_;
}
 void ChannelScaleParameter::set_do_forward(bool value) {
  set_has_do_forward();
  do_forward_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.do_forward)
}

// optional bool do_backward_feature = 2 [default = true];
bool ChannelScaleParameter::has_do_backward_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChannelScaleParameter::set_has_do_backward_feature() {
  _has_bits_[0] |= 0x00000002u;
}
void ChannelScaleParameter::clear_has_do_backward_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChannelScaleParameter::clear_do_backward_feature() {
  do_backward_feature_ = true;
  clear_has_do_backward_feature();
}
 bool ChannelScaleParameter::do_backward_feature() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.do_backward_feature)
  return do_backward_feature_;
}
 void ChannelScaleParameter::set_do_backward_feature(bool value) {
  set_has_do_backward_feature();
  do_backward_feature_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.do_backward_feature)
}

// optional bool do_backward_scale = 3 [default = true];
bool ChannelScaleParameter::has_do_backward_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChannelScaleParameter::set_has_do_backward_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void ChannelScaleParameter::clear_has_do_backward_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChannelScaleParameter::clear_do_backward_scale() {
  do_backward_scale_ = true;
  clear_has_do_backward_scale();
}
 bool ChannelScaleParameter::do_backward_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.do_backward_scale)
  return do_backward_scale_;
}
 void ChannelScaleParameter::set_do_backward_scale(bool value) {
  set_has_do_backward_scale();
  do_backward_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.do_backward_scale)
}

// optional bool global_scale = 4 [default = false];
bool ChannelScaleParameter::has_global_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChannelScaleParameter::set_has_global_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void ChannelScaleParameter::clear_has_global_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChannelScaleParameter::clear_global_scale() {
  global_scale_ = false;
  clear_has_global_scale();
}
 bool ChannelScaleParameter::global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.global_scale)
  return global_scale_;
}
 void ChannelScaleParameter::set_global_scale(bool value) {
  set_has_global_scale();
  global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.global_scale)
}

// optional float max_global_scale = 5 [default = 1000];
bool ChannelScaleParameter::has_max_global_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChannelScaleParameter::set_has_max_global_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void ChannelScaleParameter::clear_has_max_global_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChannelScaleParameter::clear_max_global_scale() {
  max_global_scale_ = 1000;
  clear_has_max_global_scale();
}
 float ChannelScaleParameter::max_global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.max_global_scale)
  return max_global_scale_;
}
 void ChannelScaleParameter::set_max_global_scale(float value) {
  set_has_max_global_scale();
  max_global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.max_global_scale)
}

// optional float min_global_scale = 6 [default = 0];
bool ChannelScaleParameter::has_min_global_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChannelScaleParameter::set_has_min_global_scale() {
  _has_bits_[0] |= 0x00000020u;
}
void ChannelScaleParameter::clear_has_min_global_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChannelScaleParameter::clear_min_global_scale() {
  min_global_scale_ = 0;
  clear_has_min_global_scale();
}
 float ChannelScaleParameter::min_global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.min_global_scale)
  return min_global_scale_;
}
 void ChannelScaleParameter::set_min_global_scale(float value) {
  set_has_min_global_scale();
  min_global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.min_global_scale)
}

// optional float init_global_scale = 7 [default = 1];
bool ChannelScaleParameter::has_init_global_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChannelScaleParameter::set_has_init_global_scale() {
  _has_bits_[0] |= 0x00000040u;
}
void ChannelScaleParameter::clear_has_init_global_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChannelScaleParameter::clear_init_global_scale() {
  init_global_scale_ = 1;
  clear_has_init_global_scale();
}
 float ChannelScaleParameter::init_global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.init_global_scale)
  return init_global_scale_;
}
 void ChannelScaleParameter::set_init_global_scale(float value) {
  set_has_init_global_scale();
  init_global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.init_global_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSpecificAffineParameter::kScaleBaseFieldNumber;
const int LabelSpecificAffineParameter::kScaleGammaFieldNumber;
const int LabelSpecificAffineParameter::kScalePowerFieldNumber;
const int LabelSpecificAffineParameter::kScaleMaxFieldNumber;
const int LabelSpecificAffineParameter::kTransformTestFieldNumber;
const int LabelSpecificAffineParameter::kIterationFieldNumber;
const int LabelSpecificAffineParameter::kBiasBaseFieldNumber;
const int LabelSpecificAffineParameter::kBiasGammaFieldNumber;
const int LabelSpecificAffineParameter::kBiasPowerFieldNumber;
const int LabelSpecificAffineParameter::kBiasMaxFieldNumber;
const int LabelSpecificAffineParameter::kPowerBaseFieldNumber;
const int LabelSpecificAffineParameter::kPowerGammaFieldNumber;
const int LabelSpecificAffineParameter::kPowerPowerFieldNumber;
const int LabelSpecificAffineParameter::kPowerMinFieldNumber;
const int LabelSpecificAffineParameter::kAutoTuneFieldNumber;
const int LabelSpecificAffineParameter::kResetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSpecificAffineParameter::LabelSpecificAffineParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelSpecificAffineParameter)
}

void LabelSpecificAffineParameter::InitAsDefaultInstance() {
}

LabelSpecificAffineParameter::LabelSpecificAffineParameter(const LabelSpecificAffineParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelSpecificAffineParameter)
}

void LabelSpecificAffineParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_base_ = 1;
  scale_gamma_ = 0;
  scale_power_ = 1;
  scale_max_ = 1;
  transform_test_ = false;
  iteration_ = 0u;
  bias_base_ = 0;
  bias_gamma_ = 0;
  bias_power_ = 1;
  bias_max_ = 0;
  power_base_ = 1;
  power_gamma_ = 0;
  power_power_ = -1;
  power_min_ = 0.5f;
  auto_tune_ = false;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSpecificAffineParameter::~LabelSpecificAffineParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelSpecificAffineParameter)
  SharedDtor();
}

void LabelSpecificAffineParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelSpecificAffineParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSpecificAffineParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSpecificAffineParameter_descriptor_;
}

const LabelSpecificAffineParameter& LabelSpecificAffineParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LabelSpecificAffineParameter* LabelSpecificAffineParameter::default_instance_ = NULL;

LabelSpecificAffineParameter* LabelSpecificAffineParameter::New(::google::protobuf::Arena* arena) const {
  LabelSpecificAffineParameter* n = new LabelSpecificAffineParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelSpecificAffineParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelSpecificAffineParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LabelSpecificAffineParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LabelSpecificAffineParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(iteration_, bias_gamma_);
    scale_base_ = 1;
    scale_gamma_ = 0;
    scale_power_ = 1;
    scale_max_ = 1;
    transform_test_ = false;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(auto_tune_, reset_);
    bias_power_ = 1;
    bias_max_ = 0;
    power_base_ = 1;
    power_gamma_ = 0;
    power_power_ = -1;
    power_min_ = 0.5f;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelSpecificAffineParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelSpecificAffineParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale_base = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_base_)));
          set_has_scale_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale_gamma;
        break;
      }

      // optional float scale_gamma = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_scale_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_gamma_)));
          set_has_scale_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_scale_power;
        break;
      }

      // optional float scale_power = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_scale_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_power_)));
          set_has_scale_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_scale_max;
        break;
      }

      // optional float scale_max = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_scale_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_max_)));
          set_has_scale_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transform_test;
        break;
      }

      // optional bool transform_test = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_transform_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transform_test_)));
          set_has_transform_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iteration;
        break;
      }

      // optional uint32 iteration = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_bias_base;
        break;
      }

      // optional float bias_base = 7 [default = 0];
      case 7: {
        if (tag == 61) {
         parse_bias_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_base_)));
          set_has_bias_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_bias_gamma;
        break;
      }

      // optional float bias_gamma = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_bias_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_gamma_)));
          set_has_bias_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_bias_power;
        break;
      }

      // optional float bias_power = 9 [default = 1];
      case 9: {
        if (tag == 77) {
         parse_bias_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_power_)));
          set_has_bias_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_bias_max;
        break;
      }

      // optional float bias_max = 10 [default = 0];
      case 10: {
        if (tag == 85) {
         parse_bias_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_max_)));
          set_has_bias_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_power_base;
        break;
      }

      // optional float power_base = 11 [default = 1];
      case 11: {
        if (tag == 93) {
         parse_power_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_base_)));
          set_has_power_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_power_gamma;
        break;
      }

      // optional float power_gamma = 12 [default = 0];
      case 12: {
        if (tag == 101) {
         parse_power_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_gamma_)));
          set_has_power_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_power_power;
        break;
      }

      // optional float power_power = 13 [default = -1];
      case 13: {
        if (tag == 109) {
         parse_power_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_power_)));
          set_has_power_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_power_min;
        break;
      }

      // optional float power_min = 14 [default = 0.5];
      case 14: {
        if (tag == 117) {
         parse_power_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_min_)));
          set_has_power_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_auto_tune;
        break;
      }

      // optional bool auto_tune = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_auto_tune:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_tune_)));
          set_has_auto_tune();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_reset;
        break;
      }

      // optional bool reset = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelSpecificAffineParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelSpecificAffineParameter)
  return false;
#undef DO_
}

void LabelSpecificAffineParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelSpecificAffineParameter)
  // optional float scale_base = 1 [default = 1];
  if (has_scale_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale_base(), output);
  }

  // optional float scale_gamma = 2 [default = 0];
  if (has_scale_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale_gamma(), output);
  }

  // optional float scale_power = 3 [default = 1];
  if (has_scale_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale_power(), output);
  }

  // optional float scale_max = 4 [default = 1];
  if (has_scale_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale_max(), output);
  }

  // optional bool transform_test = 5 [default = false];
  if (has_transform_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->transform_test(), output);
  }

  // optional uint32 iteration = 6 [default = 0];
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->iteration(), output);
  }

  // optional float bias_base = 7 [default = 0];
  if (has_bias_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bias_base(), output);
  }

  // optional float bias_gamma = 8 [default = 0];
  if (has_bias_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bias_gamma(), output);
  }

  // optional float bias_power = 9 [default = 1];
  if (has_bias_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->bias_power(), output);
  }

  // optional float bias_max = 10 [default = 0];
  if (has_bias_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->bias_max(), output);
  }

  // optional float power_base = 11 [default = 1];
  if (has_power_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->power_base(), output);
  }

  // optional float power_gamma = 12 [default = 0];
  if (has_power_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->power_gamma(), output);
  }

  // optional float power_power = 13 [default = -1];
  if (has_power_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->power_power(), output);
  }

  // optional float power_min = 14 [default = 0.5];
  if (has_power_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->power_min(), output);
  }

  // optional bool auto_tune = 15 [default = false];
  if (has_auto_tune()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->auto_tune(), output);
  }

  // optional bool reset = 16 [default = false];
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->reset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelSpecificAffineParameter)
}

::google::protobuf::uint8* LabelSpecificAffineParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelSpecificAffineParameter)
  // optional float scale_base = 1 [default = 1];
  if (has_scale_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale_base(), target);
  }

  // optional float scale_gamma = 2 [default = 0];
  if (has_scale_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale_gamma(), target);
  }

  // optional float scale_power = 3 [default = 1];
  if (has_scale_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale_power(), target);
  }

  // optional float scale_max = 4 [default = 1];
  if (has_scale_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale_max(), target);
  }

  // optional bool transform_test = 5 [default = false];
  if (has_transform_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->transform_test(), target);
  }

  // optional uint32 iteration = 6 [default = 0];
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->iteration(), target);
  }

  // optional float bias_base = 7 [default = 0];
  if (has_bias_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->bias_base(), target);
  }

  // optional float bias_gamma = 8 [default = 0];
  if (has_bias_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bias_gamma(), target);
  }

  // optional float bias_power = 9 [default = 1];
  if (has_bias_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->bias_power(), target);
  }

  // optional float bias_max = 10 [default = 0];
  if (has_bias_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->bias_max(), target);
  }

  // optional float power_base = 11 [default = 1];
  if (has_power_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->power_base(), target);
  }

  // optional float power_gamma = 12 [default = 0];
  if (has_power_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->power_gamma(), target);
  }

  // optional float power_power = 13 [default = -1];
  if (has_power_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->power_power(), target);
  }

  // optional float power_min = 14 [default = 0.5];
  if (has_power_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->power_min(), target);
  }

  // optional bool auto_tune = 15 [default = false];
  if (has_auto_tune()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->auto_tune(), target);
  }

  // optional bool reset = 16 [default = false];
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->reset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelSpecificAffineParameter)
  return target;
}

int LabelSpecificAffineParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelSpecificAffineParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float scale_base = 1 [default = 1];
    if (has_scale_base()) {
      total_size += 1 + 4;
    }

    // optional float scale_gamma = 2 [default = 0];
    if (has_scale_gamma()) {
      total_size += 1 + 4;
    }

    // optional float scale_power = 3 [default = 1];
    if (has_scale_power()) {
      total_size += 1 + 4;
    }

    // optional float scale_max = 4 [default = 1];
    if (has_scale_max()) {
      total_size += 1 + 4;
    }

    // optional bool transform_test = 5 [default = false];
    if (has_transform_test()) {
      total_size += 1 + 1;
    }

    // optional uint32 iteration = 6 [default = 0];
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iteration());
    }

    // optional float bias_base = 7 [default = 0];
    if (has_bias_base()) {
      total_size += 1 + 4;
    }

    // optional float bias_gamma = 8 [default = 0];
    if (has_bias_gamma()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float bias_power = 9 [default = 1];
    if (has_bias_power()) {
      total_size += 1 + 4;
    }

    // optional float bias_max = 10 [default = 0];
    if (has_bias_max()) {
      total_size += 1 + 4;
    }

    // optional float power_base = 11 [default = 1];
    if (has_power_base()) {
      total_size += 1 + 4;
    }

    // optional float power_gamma = 12 [default = 0];
    if (has_power_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power_power = 13 [default = -1];
    if (has_power_power()) {
      total_size += 1 + 4;
    }

    // optional float power_min = 14 [default = 0.5];
    if (has_power_min()) {
      total_size += 1 + 4;
    }

    // optional bool auto_tune = 15 [default = false];
    if (has_auto_tune()) {
      total_size += 1 + 1;
    }

    // optional bool reset = 16 [default = false];
    if (has_reset()) {
      total_size += 2 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSpecificAffineParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelSpecificAffineParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelSpecificAffineParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSpecificAffineParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelSpecificAffineParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelSpecificAffineParameter)
    MergeFrom(*source);
  }
}

void LabelSpecificAffineParameter::MergeFrom(const LabelSpecificAffineParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelSpecificAffineParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale_base()) {
      set_scale_base(from.scale_base());
    }
    if (from.has_scale_gamma()) {
      set_scale_gamma(from.scale_gamma());
    }
    if (from.has_scale_power()) {
      set_scale_power(from.scale_power());
    }
    if (from.has_scale_max()) {
      set_scale_max(from.scale_max());
    }
    if (from.has_transform_test()) {
      set_transform_test(from.transform_test());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
    if (from.has_bias_base()) {
      set_bias_base(from.bias_base());
    }
    if (from.has_bias_gamma()) {
      set_bias_gamma(from.bias_gamma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bias_power()) {
      set_bias_power(from.bias_power());
    }
    if (from.has_bias_max()) {
      set_bias_max(from.bias_max());
    }
    if (from.has_power_base()) {
      set_power_base(from.power_base());
    }
    if (from.has_power_gamma()) {
      set_power_gamma(from.power_gamma());
    }
    if (from.has_power_power()) {
      set_power_power(from.power_power());
    }
    if (from.has_power_min()) {
      set_power_min(from.power_min());
    }
    if (from.has_auto_tune()) {
      set_auto_tune(from.auto_tune());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LabelSpecificAffineParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelSpecificAffineParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSpecificAffineParameter::CopyFrom(const LabelSpecificAffineParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelSpecificAffineParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSpecificAffineParameter::IsInitialized() const {

  return true;
}

void LabelSpecificAffineParameter::Swap(LabelSpecificAffineParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSpecificAffineParameter::InternalSwap(LabelSpecificAffineParameter* other) {
  std::swap(scale_base_, other->scale_base_);
  std::swap(scale_gamma_, other->scale_gamma_);
  std::swap(scale_power_, other->scale_power_);
  std::swap(scale_max_, other->scale_max_);
  std::swap(transform_test_, other->transform_test_);
  std::swap(iteration_, other->iteration_);
  std::swap(bias_base_, other->bias_base_);
  std::swap(bias_gamma_, other->bias_gamma_);
  std::swap(bias_power_, other->bias_power_);
  std::swap(bias_max_, other->bias_max_);
  std::swap(power_base_, other->power_base_);
  std::swap(power_gamma_, other->power_gamma_);
  std::swap(power_power_, other->power_power_);
  std::swap(power_min_, other->power_min_);
  std::swap(auto_tune_, other->auto_tune_);
  std::swap(reset_, other->reset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelSpecificAffineParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSpecificAffineParameter_descriptor_;
  metadata.reflection = LabelSpecificAffineParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelSpecificAffineParameter

// optional float scale_base = 1 [default = 1];
bool LabelSpecificAffineParameter::has_scale_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelSpecificAffineParameter::set_has_scale_base() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelSpecificAffineParameter::clear_has_scale_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelSpecificAffineParameter::clear_scale_base() {
  scale_base_ = 1;
  clear_has_scale_base();
}
 float LabelSpecificAffineParameter::scale_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_base)
  return scale_base_;
}
 void LabelSpecificAffineParameter::set_scale_base(float value) {
  set_has_scale_base();
  scale_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_base)
}

// optional float scale_gamma = 2 [default = 0];
bool LabelSpecificAffineParameter::has_scale_gamma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelSpecificAffineParameter::set_has_scale_gamma() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelSpecificAffineParameter::clear_has_scale_gamma() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelSpecificAffineParameter::clear_scale_gamma() {
  scale_gamma_ = 0;
  clear_has_scale_gamma();
}
 float LabelSpecificAffineParameter::scale_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_gamma)
  return scale_gamma_;
}
 void LabelSpecificAffineParameter::set_scale_gamma(float value) {
  set_has_scale_gamma();
  scale_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_gamma)
}

// optional float scale_power = 3 [default = 1];
bool LabelSpecificAffineParameter::has_scale_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelSpecificAffineParameter::set_has_scale_power() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelSpecificAffineParameter::clear_has_scale_power() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelSpecificAffineParameter::clear_scale_power() {
  scale_power_ = 1;
  clear_has_scale_power();
}
 float LabelSpecificAffineParameter::scale_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_power)
  return scale_power_;
}
 void LabelSpecificAffineParameter::set_scale_power(float value) {
  set_has_scale_power();
  scale_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_power)
}

// optional float scale_max = 4 [default = 1];
bool LabelSpecificAffineParameter::has_scale_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LabelSpecificAffineParameter::set_has_scale_max() {
  _has_bits_[0] |= 0x00000008u;
}
void LabelSpecificAffineParameter::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void LabelSpecificAffineParameter::clear_scale_max() {
  scale_max_ = 1;
  clear_has_scale_max();
}
 float LabelSpecificAffineParameter::scale_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_max)
  return scale_max_;
}
 void LabelSpecificAffineParameter::set_scale_max(float value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_max)
}

// optional bool transform_test = 5 [default = false];
bool LabelSpecificAffineParameter::has_transform_test() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LabelSpecificAffineParameter::set_has_transform_test() {
  _has_bits_[0] |= 0x00000010u;
}
void LabelSpecificAffineParameter::clear_has_transform_test() {
  _has_bits_[0] &= ~0x00000010u;
}
void LabelSpecificAffineParameter::clear_transform_test() {
  transform_test_ = false;
  clear_has_transform_test();
}
 bool LabelSpecificAffineParameter::transform_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.transform_test)
  return transform_test_;
}
 void LabelSpecificAffineParameter::set_transform_test(bool value) {
  set_has_transform_test();
  transform_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.transform_test)
}

// optional uint32 iteration = 6 [default = 0];
bool LabelSpecificAffineParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LabelSpecificAffineParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000020u;
}
void LabelSpecificAffineParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000020u;
}
void LabelSpecificAffineParameter::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
 ::google::protobuf::uint32 LabelSpecificAffineParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.iteration)
  return iteration_;
}
 void LabelSpecificAffineParameter::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.iteration)
}

// optional float bias_base = 7 [default = 0];
bool LabelSpecificAffineParameter::has_bias_base() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LabelSpecificAffineParameter::set_has_bias_base() {
  _has_bits_[0] |= 0x00000040u;
}
void LabelSpecificAffineParameter::clear_has_bias_base() {
  _has_bits_[0] &= ~0x00000040u;
}
void LabelSpecificAffineParameter::clear_bias_base() {
  bias_base_ = 0;
  clear_has_bias_base();
}
 float LabelSpecificAffineParameter::bias_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_base)
  return bias_base_;
}
 void LabelSpecificAffineParameter::set_bias_base(float value) {
  set_has_bias_base();
  bias_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_base)
}

// optional float bias_gamma = 8 [default = 0];
bool LabelSpecificAffineParameter::has_bias_gamma() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LabelSpecificAffineParameter::set_has_bias_gamma() {
  _has_bits_[0] |= 0x00000080u;
}
void LabelSpecificAffineParameter::clear_has_bias_gamma() {
  _has_bits_[0] &= ~0x00000080u;
}
void LabelSpecificAffineParameter::clear_bias_gamma() {
  bias_gamma_ = 0;
  clear_has_bias_gamma();
}
 float LabelSpecificAffineParameter::bias_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_gamma)
  return bias_gamma_;
}
 void LabelSpecificAffineParameter::set_bias_gamma(float value) {
  set_has_bias_gamma();
  bias_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_gamma)
}

// optional float bias_power = 9 [default = 1];
bool LabelSpecificAffineParameter::has_bias_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LabelSpecificAffineParameter::set_has_bias_power() {
  _has_bits_[0] |= 0x00000100u;
}
void LabelSpecificAffineParameter::clear_has_bias_power() {
  _has_bits_[0] &= ~0x00000100u;
}
void LabelSpecificAffineParameter::clear_bias_power() {
  bias_power_ = 1;
  clear_has_bias_power();
}
 float LabelSpecificAffineParameter::bias_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_power)
  return bias_power_;
}
 void LabelSpecificAffineParameter::set_bias_power(float value) {
  set_has_bias_power();
  bias_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_power)
}

// optional float bias_max = 10 [default = 0];
bool LabelSpecificAffineParameter::has_bias_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LabelSpecificAffineParameter::set_has_bias_max() {
  _has_bits_[0] |= 0x00000200u;
}
void LabelSpecificAffineParameter::clear_has_bias_max() {
  _has_bits_[0] &= ~0x00000200u;
}
void LabelSpecificAffineParameter::clear_bias_max() {
  bias_max_ = 0;
  clear_has_bias_max();
}
 float LabelSpecificAffineParameter::bias_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_max)
  return bias_max_;
}
 void LabelSpecificAffineParameter::set_bias_max(float value) {
  set_has_bias_max();
  bias_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_max)
}

// optional float power_base = 11 [default = 1];
bool LabelSpecificAffineParameter::has_power_base() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LabelSpecificAffineParameter::set_has_power_base() {
  _has_bits_[0] |= 0x00000400u;
}
void LabelSpecificAffineParameter::clear_has_power_base() {
  _has_bits_[0] &= ~0x00000400u;
}
void LabelSpecificAffineParameter::clear_power_base() {
  power_base_ = 1;
  clear_has_power_base();
}
 float LabelSpecificAffineParameter::power_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_base)
  return power_base_;
}
 void LabelSpecificAffineParameter::set_power_base(float value) {
  set_has_power_base();
  power_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_base)
}

// optional float power_gamma = 12 [default = 0];
bool LabelSpecificAffineParameter::has_power_gamma() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LabelSpecificAffineParameter::set_has_power_gamma() {
  _has_bits_[0] |= 0x00000800u;
}
void LabelSpecificAffineParameter::clear_has_power_gamma() {
  _has_bits_[0] &= ~0x00000800u;
}
void LabelSpecificAffineParameter::clear_power_gamma() {
  power_gamma_ = 0;
  clear_has_power_gamma();
}
 float LabelSpecificAffineParameter::power_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_gamma)
  return power_gamma_;
}
 void LabelSpecificAffineParameter::set_power_gamma(float value) {
  set_has_power_gamma();
  power_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_gamma)
}

// optional float power_power = 13 [default = -1];
bool LabelSpecificAffineParameter::has_power_power() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LabelSpecificAffineParameter::set_has_power_power() {
  _has_bits_[0] |= 0x00001000u;
}
void LabelSpecificAffineParameter::clear_has_power_power() {
  _has_bits_[0] &= ~0x00001000u;
}
void LabelSpecificAffineParameter::clear_power_power() {
  power_power_ = -1;
  clear_has_power_power();
}
 float LabelSpecificAffineParameter::power_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_power)
  return power_power_;
}
 void LabelSpecificAffineParameter::set_power_power(float value) {
  set_has_power_power();
  power_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_power)
}

// optional float power_min = 14 [default = 0.5];
bool LabelSpecificAffineParameter::has_power_min() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LabelSpecificAffineParameter::set_has_power_min() {
  _has_bits_[0] |= 0x00002000u;
}
void LabelSpecificAffineParameter::clear_has_power_min() {
  _has_bits_[0] &= ~0x00002000u;
}
void LabelSpecificAffineParameter::clear_power_min() {
  power_min_ = 0.5f;
  clear_has_power_min();
}
 float LabelSpecificAffineParameter::power_min() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_min)
  return power_min_;
}
 void LabelSpecificAffineParameter::set_power_min(float value) {
  set_has_power_min();
  power_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_min)
}

// optional bool auto_tune = 15 [default = false];
bool LabelSpecificAffineParameter::has_auto_tune() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LabelSpecificAffineParameter::set_has_auto_tune() {
  _has_bits_[0] |= 0x00004000u;
}
void LabelSpecificAffineParameter::clear_has_auto_tune() {
  _has_bits_[0] &= ~0x00004000u;
}
void LabelSpecificAffineParameter::clear_auto_tune() {
  auto_tune_ = false;
  clear_has_auto_tune();
}
 bool LabelSpecificAffineParameter::auto_tune() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.auto_tune)
  return auto_tune_;
}
 void LabelSpecificAffineParameter::set_auto_tune(bool value) {
  set_has_auto_tune();
  auto_tune_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.auto_tune)
}

// optional bool reset = 16 [default = false];
bool LabelSpecificAffineParameter::has_reset() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LabelSpecificAffineParameter::set_has_reset() {
  _has_bits_[0] |= 0x00008000u;
}
void LabelSpecificAffineParameter::clear_has_reset() {
  _has_bits_[0] &= ~0x00008000u;
}
void LabelSpecificAffineParameter::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
 bool LabelSpecificAffineParameter::reset() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.reset)
  return reset_;
}
 void LabelSpecificAffineParameter::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.reset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSpecificHardMarginParameter::kPositiveWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSpecificHardMarginParameter::LabelSpecificHardMarginParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelSpecificHardMarginParameter)
}

void LabelSpecificHardMarginParameter::InitAsDefaultInstance() {
}

LabelSpecificHardMarginParameter::LabelSpecificHardMarginParameter(const LabelSpecificHardMarginParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelSpecificHardMarginParameter)
}

void LabelSpecificHardMarginParameter::SharedCtor() {
  _cached_size_ = 0;
  positive_weight_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSpecificHardMarginParameter::~LabelSpecificHardMarginParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelSpecificHardMarginParameter)
  SharedDtor();
}

void LabelSpecificHardMarginParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelSpecificHardMarginParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSpecificHardMarginParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSpecificHardMarginParameter_descriptor_;
}

const LabelSpecificHardMarginParameter& LabelSpecificHardMarginParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LabelSpecificHardMarginParameter* LabelSpecificHardMarginParameter::default_instance_ = NULL;

LabelSpecificHardMarginParameter* LabelSpecificHardMarginParameter::New(::google::protobuf::Arena* arena) const {
  LabelSpecificHardMarginParameter* n = new LabelSpecificHardMarginParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelSpecificHardMarginParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelSpecificHardMarginParameter)
  positive_weight_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelSpecificHardMarginParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelSpecificHardMarginParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float positive_weight = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_weight_)));
          set_has_positive_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelSpecificHardMarginParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelSpecificHardMarginParameter)
  return false;
#undef DO_
}

void LabelSpecificHardMarginParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelSpecificHardMarginParameter)
  // optional float positive_weight = 1 [default = 0.5];
  if (has_positive_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->positive_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelSpecificHardMarginParameter)
}

::google::protobuf::uint8* LabelSpecificHardMarginParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelSpecificHardMarginParameter)
  // optional float positive_weight = 1 [default = 0.5];
  if (has_positive_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->positive_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelSpecificHardMarginParameter)
  return target;
}

int LabelSpecificHardMarginParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelSpecificHardMarginParameter)
  int total_size = 0;

  // optional float positive_weight = 1 [default = 0.5];
  if (has_positive_weight()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSpecificHardMarginParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelSpecificHardMarginParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelSpecificHardMarginParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSpecificHardMarginParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelSpecificHardMarginParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelSpecificHardMarginParameter)
    MergeFrom(*source);
  }
}

void LabelSpecificHardMarginParameter::MergeFrom(const LabelSpecificHardMarginParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelSpecificHardMarginParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positive_weight()) {
      set_positive_weight(from.positive_weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LabelSpecificHardMarginParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelSpecificHardMarginParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSpecificHardMarginParameter::CopyFrom(const LabelSpecificHardMarginParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelSpecificHardMarginParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSpecificHardMarginParameter::IsInitialized() const {

  return true;
}

void LabelSpecificHardMarginParameter::Swap(LabelSpecificHardMarginParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSpecificHardMarginParameter::InternalSwap(LabelSpecificHardMarginParameter* other) {
  std::swap(positive_weight_, other->positive_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelSpecificHardMarginParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSpecificHardMarginParameter_descriptor_;
  metadata.reflection = LabelSpecificHardMarginParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelSpecificHardMarginParameter

// optional float positive_weight = 1 [default = 0.5];
bool LabelSpecificHardMarginParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelSpecificHardMarginParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelSpecificHardMarginParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelSpecificHardMarginParameter::clear_positive_weight() {
  positive_weight_ = 0.5f;
  clear_has_positive_weight();
}
 float LabelSpecificHardMarginParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificHardMarginParameter.positive_weight)
  return positive_weight_;
}
 void LabelSpecificHardMarginParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificHardMarginParameter.positive_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSpecificStatisticsParameter::kScaleForAngleFieldNumber;
const int LabelSpecificStatisticsParameter::kScaleFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSpecificStatisticsParameter::LabelSpecificStatisticsParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelSpecificStatisticsParameter)
}

void LabelSpecificStatisticsParameter::InitAsDefaultInstance() {
}

LabelSpecificStatisticsParameter::LabelSpecificStatisticsParameter(const LabelSpecificStatisticsParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelSpecificStatisticsParameter)
}

void LabelSpecificStatisticsParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_for_angle_ = true;
  scale_factor_ = 30;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSpecificStatisticsParameter::~LabelSpecificStatisticsParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelSpecificStatisticsParameter)
  SharedDtor();
}

void LabelSpecificStatisticsParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelSpecificStatisticsParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSpecificStatisticsParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSpecificStatisticsParameter_descriptor_;
}

const LabelSpecificStatisticsParameter& LabelSpecificStatisticsParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LabelSpecificStatisticsParameter* LabelSpecificStatisticsParameter::default_instance_ = NULL;

LabelSpecificStatisticsParameter* LabelSpecificStatisticsParameter::New(::google::protobuf::Arena* arena) const {
  LabelSpecificStatisticsParameter* n = new LabelSpecificStatisticsParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelSpecificStatisticsParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelSpecificStatisticsParameter)
  if (_has_bits_[0 / 32] & 3u) {
    scale_for_angle_ = true;
    scale_factor_ = 30;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelSpecificStatisticsParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelSpecificStatisticsParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool scale_for_angle = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_for_angle_)));
          set_has_scale_for_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale_factor;
        break;
      }

      // optional float scale_factor = 2 [default = 30];
      case 2: {
        if (tag == 21) {
         parse_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_factor_)));
          set_has_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelSpecificStatisticsParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelSpecificStatisticsParameter)
  return false;
#undef DO_
}

void LabelSpecificStatisticsParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelSpecificStatisticsParameter)
  // optional bool scale_for_angle = 1 [default = true];
  if (has_scale_for_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->scale_for_angle(), output);
  }

  // optional float scale_factor = 2 [default = 30];
  if (has_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelSpecificStatisticsParameter)
}

::google::protobuf::uint8* LabelSpecificStatisticsParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelSpecificStatisticsParameter)
  // optional bool scale_for_angle = 1 [default = true];
  if (has_scale_for_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->scale_for_angle(), target);
  }

  // optional float scale_factor = 2 [default = 30];
  if (has_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelSpecificStatisticsParameter)
  return target;
}

int LabelSpecificStatisticsParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelSpecificStatisticsParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool scale_for_angle = 1 [default = true];
    if (has_scale_for_angle()) {
      total_size += 1 + 1;
    }

    // optional float scale_factor = 2 [default = 30];
    if (has_scale_factor()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSpecificStatisticsParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelSpecificStatisticsParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelSpecificStatisticsParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSpecificStatisticsParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelSpecificStatisticsParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelSpecificStatisticsParameter)
    MergeFrom(*source);
  }
}

void LabelSpecificStatisticsParameter::MergeFrom(const LabelSpecificStatisticsParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelSpecificStatisticsParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale_for_angle()) {
      set_scale_for_angle(from.scale_for_angle());
    }
    if (from.has_scale_factor()) {
      set_scale_factor(from.scale_factor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LabelSpecificStatisticsParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelSpecificStatisticsParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSpecificStatisticsParameter::CopyFrom(const LabelSpecificStatisticsParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelSpecificStatisticsParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSpecificStatisticsParameter::IsInitialized() const {

  return true;
}

void LabelSpecificStatisticsParameter::Swap(LabelSpecificStatisticsParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSpecificStatisticsParameter::InternalSwap(LabelSpecificStatisticsParameter* other) {
  std::swap(scale_for_angle_, other->scale_for_angle_);
  std::swap(scale_factor_, other->scale_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelSpecificStatisticsParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSpecificStatisticsParameter_descriptor_;
  metadata.reflection = LabelSpecificStatisticsParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelSpecificStatisticsParameter

// optional bool scale_for_angle = 1 [default = true];
bool LabelSpecificStatisticsParameter::has_scale_for_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelSpecificStatisticsParameter::set_has_scale_for_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelSpecificStatisticsParameter::clear_has_scale_for_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelSpecificStatisticsParameter::clear_scale_for_angle() {
  scale_for_angle_ = true;
  clear_has_scale_for_angle();
}
 bool LabelSpecificStatisticsParameter::scale_for_angle() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificStatisticsParameter.scale_for_angle)
  return scale_for_angle_;
}
 void LabelSpecificStatisticsParameter::set_scale_for_angle(bool value) {
  set_has_scale_for_angle();
  scale_for_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificStatisticsParameter.scale_for_angle)
}

// optional float scale_factor = 2 [default = 30];
bool LabelSpecificStatisticsParameter::has_scale_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelSpecificStatisticsParameter::set_has_scale_factor() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelSpecificStatisticsParameter::clear_has_scale_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelSpecificStatisticsParameter::clear_scale_factor() {
  scale_factor_ = 30;
  clear_has_scale_factor();
}
 float LabelSpecificStatisticsParameter::scale_factor() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificStatisticsParameter.scale_factor)
  return scale_factor_;
}
 void LabelSpecificStatisticsParameter::set_scale_factor(float value) {
  set_has_scale_factor();
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificStatisticsParameter.scale_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSpecificAddParameter::kBiasFieldNumber;
const int LabelSpecificAddParameter::kTransformTestFieldNumber;
const int LabelSpecificAddParameter::kBiasBaseFieldNumber;
const int LabelSpecificAddParameter::kBiasGammaFieldNumber;
const int LabelSpecificAddParameter::kBiasPowerFieldNumber;
const int LabelSpecificAddParameter::kBiasMinFieldNumber;
const int LabelSpecificAddParameter::kBiasMaxFieldNumber;
const int LabelSpecificAddParameter::kIterationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSpecificAddParameter::LabelSpecificAddParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelSpecificAddParameter)
}

void LabelSpecificAddParameter::InitAsDefaultInstance() {
}

LabelSpecificAddParameter::LabelSpecificAddParameter(const LabelSpecificAddParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelSpecificAddParameter)
}

void LabelSpecificAddParameter::SharedCtor() {
  _cached_size_ = 0;
  bias_ = 0;
  transform_test_ = false;
  bias_base_ = 0;
  bias_gamma_ = 0;
  bias_power_ = 1;
  bias_min_ = 0;
  bias_max_ = 0;
  iteration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSpecificAddParameter::~LabelSpecificAddParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelSpecificAddParameter)
  SharedDtor();
}

void LabelSpecificAddParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelSpecificAddParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSpecificAddParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSpecificAddParameter_descriptor_;
}

const LabelSpecificAddParameter& LabelSpecificAddParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LabelSpecificAddParameter* LabelSpecificAddParameter::default_instance_ = NULL;

LabelSpecificAddParameter* LabelSpecificAddParameter::New(::google::protobuf::Arena* arena) const {
  LabelSpecificAddParameter* n = new LabelSpecificAddParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelSpecificAddParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelSpecificAddParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LabelSpecificAddParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LabelSpecificAddParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(bias_, bias_gamma_);
    ZR_(bias_min_, iteration_);
    bias_power_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelSpecificAddParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelSpecificAddParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float bias = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transform_test;
        break;
      }

      // optional bool transform_test = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_transform_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transform_test_)));
          set_has_transform_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bias_base;
        break;
      }

      // optional float bias_base = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_bias_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_base_)));
          set_has_bias_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bias_gamma;
        break;
      }

      // optional float bias_gamma = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_bias_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_gamma_)));
          set_has_bias_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_bias_power;
        break;
      }

      // optional float bias_power = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_bias_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_power_)));
          set_has_bias_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_bias_min;
        break;
      }

      // optional float bias_min = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_bias_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_min_)));
          set_has_bias_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_bias_max;
        break;
      }

      // optional float bias_max = 7 [default = 0];
      case 7: {
        if (tag == 61) {
         parse_bias_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_max_)));
          set_has_bias_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iteration;
        break;
      }

      // optional uint32 iteration = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelSpecificAddParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelSpecificAddParameter)
  return false;
#undef DO_
}

void LabelSpecificAddParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelSpecificAddParameter)
  // optional float bias = 1 [default = 0];
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bias(), output);
  }

  // optional bool transform_test = 2 [default = false];
  if (has_transform_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->transform_test(), output);
  }

  // optional float bias_base = 3 [default = 0];
  if (has_bias_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bias_base(), output);
  }

  // optional float bias_gamma = 4 [default = 0];
  if (has_bias_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bias_gamma(), output);
  }

  // optional float bias_power = 5 [default = 1];
  if (has_bias_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bias_power(), output);
  }

  // optional float bias_min = 6 [default = 0];
  if (has_bias_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bias_min(), output);
  }

  // optional float bias_max = 7 [default = 0];
  if (has_bias_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bias_max(), output);
  }

  // optional uint32 iteration = 8 [default = 0];
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->iteration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelSpecificAddParameter)
}

::google::protobuf::uint8* LabelSpecificAddParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelSpecificAddParameter)
  // optional float bias = 1 [default = 0];
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bias(), target);
  }

  // optional bool transform_test = 2 [default = false];
  if (has_transform_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->transform_test(), target);
  }

  // optional float bias_base = 3 [default = 0];
  if (has_bias_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bias_base(), target);
  }

  // optional float bias_gamma = 4 [default = 0];
  if (has_bias_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bias_gamma(), target);
  }

  // optional float bias_power = 5 [default = 1];
  if (has_bias_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bias_power(), target);
  }

  // optional float bias_min = 6 [default = 0];
  if (has_bias_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bias_min(), target);
  }

  // optional float bias_max = 7 [default = 0];
  if (has_bias_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->bias_max(), target);
  }

  // optional uint32 iteration = 8 [default = 0];
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->iteration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelSpecificAddParameter)
  return target;
}

int LabelSpecificAddParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelSpecificAddParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float bias = 1 [default = 0];
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional bool transform_test = 2 [default = false];
    if (has_transform_test()) {
      total_size += 1 + 1;
    }

    // optional float bias_base = 3 [default = 0];
    if (has_bias_base()) {
      total_size += 1 + 4;
    }

    // optional float bias_gamma = 4 [default = 0];
    if (has_bias_gamma()) {
      total_size += 1 + 4;
    }

    // optional float bias_power = 5 [default = 1];
    if (has_bias_power()) {
      total_size += 1 + 4;
    }

    // optional float bias_min = 6 [default = 0];
    if (has_bias_min()) {
      total_size += 1 + 4;
    }

    // optional float bias_max = 7 [default = 0];
    if (has_bias_max()) {
      total_size += 1 + 4;
    }

    // optional uint32 iteration = 8 [default = 0];
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iteration());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSpecificAddParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelSpecificAddParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelSpecificAddParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSpecificAddParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelSpecificAddParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelSpecificAddParameter)
    MergeFrom(*source);
  }
}

void LabelSpecificAddParameter::MergeFrom(const LabelSpecificAddParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelSpecificAddParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_transform_test()) {
      set_transform_test(from.transform_test());
    }
    if (from.has_bias_base()) {
      set_bias_base(from.bias_base());
    }
    if (from.has_bias_gamma()) {
      set_bias_gamma(from.bias_gamma());
    }
    if (from.has_bias_power()) {
      set_bias_power(from.bias_power());
    }
    if (from.has_bias_min()) {
      set_bias_min(from.bias_min());
    }
    if (from.has_bias_max()) {
      set_bias_max(from.bias_max());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LabelSpecificAddParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelSpecificAddParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSpecificAddParameter::CopyFrom(const LabelSpecificAddParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelSpecificAddParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSpecificAddParameter::IsInitialized() const {

  return true;
}

void LabelSpecificAddParameter::Swap(LabelSpecificAddParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSpecificAddParameter::InternalSwap(LabelSpecificAddParameter* other) {
  std::swap(bias_, other->bias_);
  std::swap(transform_test_, other->transform_test_);
  std::swap(bias_base_, other->bias_base_);
  std::swap(bias_gamma_, other->bias_gamma_);
  std::swap(bias_power_, other->bias_power_);
  std::swap(bias_min_, other->bias_min_);
  std::swap(bias_max_, other->bias_max_);
  std::swap(iteration_, other->iteration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelSpecificAddParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSpecificAddParameter_descriptor_;
  metadata.reflection = LabelSpecificAddParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelSpecificAddParameter

// optional float bias = 1 [default = 0];
bool LabelSpecificAddParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelSpecificAddParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelSpecificAddParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelSpecificAddParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
 float LabelSpecificAddParameter::bias() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias)
  return bias_;
}
 void LabelSpecificAddParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias)
}

// optional bool transform_test = 2 [default = false];
bool LabelSpecificAddParameter::has_transform_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelSpecificAddParameter::set_has_transform_test() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelSpecificAddParameter::clear_has_transform_test() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelSpecificAddParameter::clear_transform_test() {
  transform_test_ = false;
  clear_has_transform_test();
}
 bool LabelSpecificAddParameter::transform_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.transform_test)
  return transform_test_;
}
 void LabelSpecificAddParameter::set_transform_test(bool value) {
  set_has_transform_test();
  transform_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.transform_test)
}

// optional float bias_base = 3 [default = 0];
bool LabelSpecificAddParameter::has_bias_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelSpecificAddParameter::set_has_bias_base() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelSpecificAddParameter::clear_has_bias_base() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelSpecificAddParameter::clear_bias_base() {
  bias_base_ = 0;
  clear_has_bias_base();
}
 float LabelSpecificAddParameter::bias_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_base)
  return bias_base_;
}
 void LabelSpecificAddParameter::set_bias_base(float value) {
  set_has_bias_base();
  bias_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_base)
}

// optional float bias_gamma = 4 [default = 0];
bool LabelSpecificAddParameter::has_bias_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LabelSpecificAddParameter::set_has_bias_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
void LabelSpecificAddParameter::clear_has_bias_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
void LabelSpecificAddParameter::clear_bias_gamma() {
  bias_gamma_ = 0;
  clear_has_bias_gamma();
}
 float LabelSpecificAddParameter::bias_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_gamma)
  return bias_gamma_;
}
 void LabelSpecificAddParameter::set_bias_gamma(float value) {
  set_has_bias_gamma();
  bias_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_gamma)
}

// optional float bias_power = 5 [default = 1];
bool LabelSpecificAddParameter::has_bias_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LabelSpecificAddParameter::set_has_bias_power() {
  _has_bits_[0] |= 0x00000010u;
}
void LabelSpecificAddParameter::clear_has_bias_power() {
  _has_bits_[0] &= ~0x00000010u;
}
void LabelSpecificAddParameter::clear_bias_power() {
  bias_power_ = 1;
  clear_has_bias_power();
}
 float LabelSpecificAddParameter::bias_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_power)
  return bias_power_;
}
 void LabelSpecificAddParameter::set_bias_power(float value) {
  set_has_bias_power();
  bias_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_power)
}

// optional float bias_min = 6 [default = 0];
bool LabelSpecificAddParameter::has_bias_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LabelSpecificAddParameter::set_has_bias_min() {
  _has_bits_[0] |= 0x00000020u;
}
void LabelSpecificAddParameter::clear_has_bias_min() {
  _has_bits_[0] &= ~0x00000020u;
}
void LabelSpecificAddParameter::clear_bias_min() {
  bias_min_ = 0;
  clear_has_bias_min();
}
 float LabelSpecificAddParameter::bias_min() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_min)
  return bias_min_;
}
 void LabelSpecificAddParameter::set_bias_min(float value) {
  set_has_bias_min();
  bias_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_min)
}

// optional float bias_max = 7 [default = 0];
bool LabelSpecificAddParameter::has_bias_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LabelSpecificAddParameter::set_has_bias_max() {
  _has_bits_[0] |= 0x00000040u;
}
void LabelSpecificAddParameter::clear_has_bias_max() {
  _has_bits_[0] &= ~0x00000040u;
}
void LabelSpecificAddParameter::clear_bias_max() {
  bias_max_ = 0;
  clear_has_bias_max();
}
 float LabelSpecificAddParameter::bias_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_max)
  return bias_max_;
}
 void LabelSpecificAddParameter::set_bias_max(float value) {
  set_has_bias_max();
  bias_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_max)
}

// optional uint32 iteration = 8 [default = 0];
bool LabelSpecificAddParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LabelSpecificAddParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000080u;
}
void LabelSpecificAddParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000080u;
}
void LabelSpecificAddParameter::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
 ::google::protobuf::uint32 LabelSpecificAddParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.iteration)
  return iteration_;
}
 void LabelSpecificAddParameter::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.iteration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)
